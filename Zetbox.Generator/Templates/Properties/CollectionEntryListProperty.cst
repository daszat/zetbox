<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Properties.CollectionEntryListProperty"
    ClassName="Zetbox.Generator.Templates.Properties.CollectionEntryListProperty"
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="exposedCollectionInterface" Type="string" %>
<%@ Parameter Name="referencedInterface" Type="string" %>
<%@ Parameter Name="backingName" Type="string" %>
<%@ Parameter Name="backingCollectionType" Type="string" %>
<%@ Parameter Name="aSideType" Type="string" %>
<%@ Parameter Name="bSideType" Type="string" %>
<%@ Parameter Name="entryType" Type="string" %>
<%@ Parameter Name="providerCollectionType" Type="string" %>
<%@ Parameter Name="relId" Type="Guid" %>
<%@ Parameter Name="role" Type="RelationEndRole" %>
<%@ Parameter Name="eagerLoading" Type="bool" %>
<%
    string taskName = "_triggerFetch" + name + "Task";
    string eventName = "On" + name + "_PostSetter";
%>
        // BEGIN <%= this.GetType() %> for <%= name %>
        <%= GetModifiers() %> <%= exposedCollectionInterface %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= backingName %> == null)
                {
                    var task = TriggerFetch<%= name %>Async();
                    task.TryRunSynchronously();
                }
                return (<%= exposedCollectionInterface %><<%= referencedInterface %>>)<%= backingName %>;
            }
        }

        <%= GetModifiers() %> async System.Threading.Tasks.Task<<%= exposedCollectionInterface %><<%= referencedInterface %>>> GetProp_<%= name %>()
        {
            await TriggerFetch<%= name %>Async();
            return <%= backingName %>;
        }

        System.Threading.Tasks.Task <%= taskName %>;
        public System.Threading.Tasks.Task TriggerFetch<%= name %>Async()
        {
            if (<%= taskName %> != null) return <%= taskName %>;
<%
    // eagerly loaded relation already has the objects loaded
    if (!eagerLoading)
    {
%>
            <%= taskName %> = Context.FetchRelationAsync<<%= entryType %>>(new Guid("<%= relId %>"), RelationEndRole.<%= role %>, this);
<%
    }
    else
    {
%>
            if (!<%= name %>_was_eagerLoaded) <%= taskName %> = Context.FetchRelationAsync<<%= entryType %>>(new Guid("<%= relId %>"), RelationEndRole.<%= role %>, this);
            else <%= taskName %> = System.Threading.Tasks.Task.FromResult<Guid?>(null);
<%
    }
%>
            <%= taskName %> = <%= taskName %>.OnResult(r =>
            {
                <%= backingName %>
                    = new <%= backingCollectionType %><<%= aSideType %>, <%= bSideType %>, <%= entryType %>, ICollection<<%= entryType %>>>(
                        this,
                        new RelationshipFilter<%= role %>SideCollection<<%= entryType %>>(this.Context, this));
                        // <%= backingName %>.CollectionChanged is managed by On<%= name %>CollectionChanged() and called from the RelationEntry
            });
            return <%= taskName %>;
        }

        internal void On<%= name %>CollectionChanged()
        {
            NotifyPropertyChanged("<%= name %>", null, null);
            if (<%= eventName %> != null && IsAttached)
                <%= eventName %>(this);
        }

        private <%= backingCollectionType %><<%= aSideType %>, <%= bSideType %>, <%= entryType %>, ICollection<<%= entryType %>>> <%= backingName %>;
<%
    if (eagerLoading)
    {
%>
        private bool <%= name %>_was_eagerLoaded = false;
<%
    }
        AddSerialization(serializationList, name, eagerLoading);
%>
        // END <%= this.GetType() %> for <%= name %>

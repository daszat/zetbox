<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="Module"
    ClassName="Zetbox.Generator.Templates.Module" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="shortName" Type="string" %>
// <autogenerated/>

namespace Zetbox.Objects
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Autofac;
	using Zetbox.API;
<% foreach(string ns in GetAdditionalImports().OrderBy(s => s).Distinct().OrderBy(s => s)) { %>
    using <%= ns %>;
<% } %>

    public class <%= shortName %>Module
        : Autofac.Module
    {
        protected override void Load(ContainerBuilder builder)
        {
            base.Load(builder);

<% ApplyRegistrations(); %>
        }
    }

<% ApplyTypeCheckerTemplate(); %>

    // marker class to provide stable and correct assembly reference
    internal sealed class <%= shortName %>ActionsManager
        : BaseCustomActionsManager, I<%= shortName %>ActionsManager
    {
        private static readonly SemaphoreSlim _initLock = new SemaphoreSlim(1, 1);
        private static bool _isInitialised = false;

        protected override SemaphoreSlim InitLock => _initLock;
        protected override bool IsInitialised
        {
            get { return _isInitialised; }
            set { _isInitialised = value; }
        }

        public <%= shortName %>ActionsManager(ILifetimeScope container, IEnumerable<ImplementorAssembly> assemblies)
            : base(container, "<%= ImplementationSuffix %>", assemblies)
        {
        }
    }
}

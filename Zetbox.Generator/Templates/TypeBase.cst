<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="TypeBase"
    ClassName="Zetbox.Generator.Templates.TypeBase" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="DataType" Type="DataType" %>
// <autogenerated/>

<% ApplyGlobalPreambleTemplate(); %>
namespace <%= DataType.Module.Namespace %>
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

<% foreach(string ns in GetAdditionalImports().Distinct().OrderBy(s => s)) { %>
    using <%= ns %>;
<% } %>

<% ApplyNamespacePreambleTemplate(); %>
    /// <summary>
    /// <%= UglyXmlEncode(DataType.Description) %>
    /// </summary>
<%
    var mungedClassName = GetTypeName();

    ApplyClassAttributeTemplate();
%>
    [System.Diagnostics.DebuggerDisplay("<%= DataType.Name %>")]
    public<%= GetClassModifiers() %> class <%= mungedClassName %> <%= GetInheritance() %>
    {
<% ApplyClassHeadTemplate(); %>
<% ApplyConstructorTemplate(); %>
<%
        // TODO: decouple serializing format from Name order
        foreach(Property p in DataType.Properties.OrderBy(p => p.Name))
        {
%>

        /// <summary>
        /// <%= UglyXmlEncode(p.Description) %>
        /// </summary>
<%
            ApplyPropertyTemplate(p);
        }

        foreach(var mg in MethodsToGenerate().GroupBy(m => m.Name).OrderBy(mg => mg.Key))
        {
            int index = 0;
            foreach(var m in mg.OrderByDefault())
            {
%>

        /// <summary>
        /// <%= UglyXmlEncode(m.Description) %>
        /// </summary>
<%
                ApplyMethodTemplate(m, index++);
            }
        }
%>

        public override Type GetImplementedInterface()
        {
            return typeof(<%= DataType.Name %>);
        }
<%
        ApplyApplyChangesFromMethod();
        ApplyAttachToContextMethod();
		ApplySetNewMethod();
        ApplyClassTailTemplate();
%>

        #region Serializer

<%
        Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.ToStream, this.MembersToSerialize, true, null);
        
        Serialization.SerializerTemplate.Call(Host, ctx,
            Serialization.SerializerDirection.FromStream, this.MembersToSerialize, true, null);

        if ((DataType is ObjectClass) && ((ObjectClass)DataType).ImplementsIExportable().Result)
        {
            ObjectClass cls = (ObjectClass)DataType;            
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.Export, this.MembersToSerialize, cls.BaseObjectClass != null, GetExportGuidBackingStoreReference());
            
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.MergeImport, this.MembersToSerialize, cls.BaseObjectClass != null, GetExportGuidBackingStoreReference());
        } 
        else if (DataType is CompoundObject)
        {
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.Export, this.MembersToSerialize, true, null);
            
            Serialization.SerializerTemplate.Call(Host, ctx,
                Serialization.SerializerDirection.MergeImport, this.MembersToSerialize, true, null);
        }
%>

        #endregion

    }
<% ApplyNamespaceTailTemplate(); %>
}
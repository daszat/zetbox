<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.ReloadReferences"
    ClassName="Zetbox.Generator.Templates.ObjectClasses.ReloadReferences"
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="cls" Type="DataType" %>

        public override async System.Threading.Tasks.Task ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            await base.ReloadReferences();

            // fix direct object references
<%
	// TODO: Use only 1 side relation ends
    foreach(var prop in GetDirectObjectReferences())
    {
        Relation rel = Zetbox.App.Extensions.RelationExtensions.Lookup(ctx, prop);
        RelationEnd relEnd = rel.GetEnd(prop).Result;
        RelationEnd otherEnd = rel.GetOtherEnd(relEnd).Result;

        string referencedInterface = otherEnd.Type.GetDataTypeString().Result;
        string referencedImplementation = otherEnd.Type.GetDataTypeString().Result + ImplementationSuffix;
        string name = prop.Name;
        string implName = name + Zetbox.API.Helper.ImplementationSuffix;
        string fkBackingName = "_fk_" + name;
        string fkGuidBackingName = "_fk_guid_" + name;
        bool isExportable = relEnd.Type.ImplementsIExportable().Result && otherEnd.Type.ImplementsIExportable().Result;

        ReloadOneReference.Call(Host, ctx, referencedInterface, referencedImplementation, name, implName, fkBackingName, fkGuidBackingName, isExportable);
    }        
%>
            // fix cached lists references
<%
    foreach(var prop in GetListReferences())
    {
        string name = prop.Name;
        string taskName = "_triggerFetch" + name + "Task";
        string backingName = "_" + name;
%>
            <%= taskName %> = null;
            <%= backingName %> = null;
<%
    }
%>
        }

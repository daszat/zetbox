<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="ObjectClasses.ApplyChangesFromMethod"
    ClassName="Zetbox.Generator.Templates.ObjectClasses.ApplyChangesFromMethod" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.SchemaManagement" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="otherInterface" Type="string" %>
<%@ Parameter Name="cls" Type="DataType" %>
<%@ Parameter Name="clsName" Type="string" %>
<%@ Parameter Name="implName" Type="string" %>

        public override void ApplyChangesFrom(<%= otherInterface %> obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (<%= clsName %>)obj;
            var otherImpl = (<%= implName %>)obj;
            var me = (<%= clsName %>)this;

<% foreach(var prop in cls.Properties.OfType<ValueTypeProperty>().Where(p => !p.IsCalculated && !p.IsList).OrderBy(p => p.Name)) { %>
<%      var propName = prop.Name;                                                                                                  %>
            me.<%= propName %> = other.<%= propName %>;
<% } %>
<% foreach(var prop in cls.Properties.OfType<CompoundObjectProperty>().Where(p => !p.IsList /* && !p.IsCalculated */).OrderBy(p => p.Name)) { %>
<%      var propName = prop.Name;                                                                                                  %>
            if (me.<%= propName %> == null && other.<%= propName %> != null) {
                me.<%= propName %> = (<%= prop.GetElementTypeString() %>)other.<%= propName %>.Clone();
            } else if (me.<%= propName %> != null && other.<%= propName %> == null) {
                me.<%= propName %> = null;
            } else if (me.<%= propName %> != null && other.<%= propName %> != null) {
                me.<%= propName %>.ApplyChangesFrom(other.<%= propName %>);
            }
<% } %>
<% foreach(var prop in cls.Properties.OfType<ObjectReferenceProperty>().Where(p => !p.IsList().Result).OrderBy(p => p.Name)) {
		var propName = prop.Name;
        if (prop.RelationEnd.HasPersistentOrder) {
            var positionPropertyName = Construct.ListPositionPropertyName(prop.RelationEnd);
%>
            this.<%= positionPropertyName %> = otherImpl.<%= positionPropertyName %>;
<%      } %>
            this._fk_<%= propName %> = otherImpl._fk_<%= propName %>;
<% } %>
        }

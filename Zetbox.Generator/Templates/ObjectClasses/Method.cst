<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.Method"
    ClassName="Zetbox.Generator.Templates.ObjectClasses.Method"
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="dt" Type="Zetbox.App.Base.DataType" %>
<%@ Parameter Name="m" Type="Zetbox.App.Base.Method" %>
<%@ Parameter Name="index" Type="int" %>
<%@ Parameter Name="indexSuffix" Type="string" %>
<%@ Parameter Name="eventName" Type="string" %>
        // BEGIN <%= this.GetType() %>
<%
    foreach(var attr in GetMethodAttributes())
    {
%>
        <%= attr %>
<%
    }
%>
        <%= GetModifiers() %> async <%= GetReturnType() %> <%= m.Name %>(<%= GetParameterDefinitions() %>)
<%

    string delegateName = m.Name + indexSuffix + "_Handler";
    var returnParam = m.Parameter.SingleOrDefault(parameter => parameter.IsReturnParameter);

    string parameterDefs = m.GetParameterDefinitions();
    if (!String.IsNullOrEmpty(parameterDefs))
    {
        // add leading comma for later usage
        parameterDefs = ", " + parameterDefs;
    }

    string argumentDefs = m.GetArguments();
    if (!String.IsNullOrEmpty(argumentDefs))
    {
        // add leading comma for later usage
        argumentDefs = ", " + argumentDefs;
    }

    if (returnParam == null)
    {
%>
        {
            // base.<%= m.Name %>();
            if (<%= eventName %> != null)
            {
                await <%= eventName %>(this<%= argumentDefs %>);
            }
            else
            {
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on method <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
                await base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
            }
        }
<%
        // define delegate type only on base class
        if (this.m.ObjectClass == this.dt)
        {
%>
        public delegate System.Threading.Tasks.Task <%= delegateName %><T>(T obj<%= parameterDefs %>);
<%
        }
    }
    else
    {

        string returnArgsType = String.Format("MethodReturnEventArgs<{0}>", returnParam.GetParameterTypeString());
%>
        {
            var e = new <%= returnArgsType %>();
            if (<%= eventName %> != null)
            {
                await <%= eventName %>(this, e<%= argumentDefs %>);
            }
            else
            {
<%
        if (m.ObjectClass == dt || !(dt is ObjectClass))
        {
%>
                throw new NotImplementedException("No handler registered on <%= m.ObjectClass.Name %>.<%= m.Name %>");
<%
        }
        else
        {
%>
                e.Result = await base.<%= m.Name %>(<%= m.GetArguments() %>);
<%
        }
%>
            }
            return e.Result;
        }
<%

        // define delegate type only on base class
        if (this.m.ObjectClass == this.dt)
        {
%>
        public delegate System.Threading.Tasks.Task <%= delegateName %><T>(T obj, <%= returnArgsType %> ret<%= parameterDefs %>);
<%
        }
    }

%>
        public static event <%= delegateName %><<%= dt.Name %>> <%= eventName %>;
<% 
if(index == 0) {
	// Only for first overload
	MethodCanExec.Call(Host, ctx, dt, m, eventName);
} 
        // END <%= this.GetType() %>

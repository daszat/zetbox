<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"    
    Name="Properties.ObjectListProperty"
    ClassName="Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty"    
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.SchemaManagement" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="wrapperName" Type="string" %>
<%@ Parameter Name="wrapperClass" Type="string" %>
<%@ Parameter Name="exposedListType" Type="string" %>
<%@ Parameter Name="rel" Type="Relation" %>
<%@ Parameter Name="endRole" Type="RelationEndRole" %>
<%@ Parameter Name="positionPropertyName" Type="string" %>
<%@ Parameter Name="otherName" Type="string" %>
<%@ Parameter Name="referencedInterface" Type="string" %>
<%
    RelationEnd relEnd = rel.GetEndFromRole(endRole);
    RelationEnd otherEnd = rel.GetOtherEnd(relEnd);

    // the ef-visible property's name
    string efName = name + ImplementationPropertySuffix;
    // the name of the position property as string argument
    string positionPropertyNameArgument = rel.NeedsPositionStorage(otherEnd.GetRole()) ? String.Format(@", ""{0}""", Construct.ListPositionPropertyName(otherEnd)) : String.Empty;
    
    // the name of the EF association
    string assocName = rel.GetAssociationName() + (relEnd.Multiplicity.UpperBound() > 1 ? "_" + relEnd.GetRole().ToString() : String.Empty);
    string targetRoleName = otherEnd.RoleName;

    // which Zetbox interface this is    
    string thisInterface = relEnd.Type.GetDataTypeString();
    // the actual implementation class of the list's elements
    string referencedImplementation = referencedInterface + ImplementationSuffix;

    // whether or not the collection will be eagerly loaded
    bool eagerLoading = relEnd.Navigator != null && relEnd.Navigator.EagerLoading;

    // override and ignore Base's notion of wrapper classes
    wrapperClass = rel.NeedsPositionStorage(otherEnd.GetRole()) ? "EntityListWrapper" : "EntityCollectionWrapper";

	var eventName = "On" + name + "_PostSetter";
%>
        // BEGIN <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= referencedInterface %>, <%= referencedImplementation %>>(
                            this.Context, <%= efName %>,
                            () => this.NotifyPropertyChanging("<%= name %>", null, null),
                            null, // see Get<%= efName %>Collection()
                            (item) => item.NotifyPropertyChanging("<%= otherName %>", null, null),
                            (item) => item.NotifyPropertyChanged("<%= otherName %>", null, null)<%
    // TODO: improve this!
    if (rel.NeedsPositionStorage(otherEnd.GetRole()))
    {
        this.WriteObjects(", \"", relEnd.RoleName, "\"");
    }
                            %><%= positionPropertyNameArgument %>);
                }
                return <%= wrapperName %>;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "<%= assocName %>", "<%= targetRoleName %>")]
        public EntityCollection<<%= referencedImplementation %>> <%= efName %>
        {
            get
            {
                return Get<%= efName %>Collection();
            }
        }
        private <%= wrapperClass %><<%= referencedInterface %>, <%= referencedImplementation %>> <%= wrapperName %>;

        private EntityCollection<<%= referencedImplementation %>> _<%= efName %>EntityCollection;
        internal EntityCollection<<%= referencedImplementation %>> Get<%= efName %>Collection()
        {
            if (_<%= efName %>EntityCollection == null)
            {
                _<%= efName %>EntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<<%= referencedImplementation %>>(
                        "Model.<%= assocName %>",
                        "<%= targetRoleName %>");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_<%= efName %>EntityCollection.IsLoaded)
                {
                    _<%= efName %>EntityCollection.Load();
                }
                _<%= efName %>EntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("<%= name %>", null, null); if (<%= eventName %> != null && IsAttached) <%= eventName%>(this); };
            }
            return _<%= efName %>EntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetch<%= name %>Async()
        {
            return new Zetbox.API.Async.ZbTask<<%= exposedListType %><<%= referencedInterface %>>>(this.<%= name %>);
        }

<% if (eagerLoading) { %>
        private List<int> <%= name %>Ids;
        private bool <%= name %>_was_eagerLoaded = false;
<%
        if (serializationList != null)
        {
            serializationList.Add("Serialization.EagerLoadingSerialization", Zetbox.Generator.Templates.Serialization.SerializerType.Binary, null, null, name, true, false, null);
        }
    }
%>
        // END <%= this.GetType() %>

<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="EfModel.ModelCsdl"
    ClassName="Zetbox.DalProvider.Ef.Generator.Templates.EfModel.ModelCsdl" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.SchemaManagement" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Schema Namespace="Model" Alias="Self" xmlns="http://schemas.microsoft.com/ado/2006/04/edm">
  <EntityContainer Name="Entities">
  
    <!-- EntitySets for all classes -->
<%
    foreach(var cls in GetBaseClasses(ctx).OrderBy(c => c.Name))
    {
        var clsName = cls.Name;
%>
    <EntitySet Name="<%= clsName %>EfImpl" EntityType="Model.<%= clsName %>EfImpl" />
<%  
		if (cls.NeedsRightsTable())
		{
%>
    <EntitySet Name="<%= Construct.SecurityRulesClassName(cls) %>" EntityType="Model.<%= Construct.SecurityRulesClassName(cls) %>" />
    <AssociationSet Name="<%= Construct.SecurityRulesFKName(cls) %>" Association="Model.<%= Construct.SecurityRulesFKName(cls) %>">
      <End Role="<%= clsName %>" EntitySet="<%= clsName %>EfImpl" />
      <End Role="<%= Construct.SecurityRulesClassName(cls) %>" EntitySet="<%= Construct.SecurityRulesClassName(cls) %>" />
    </AssociationSet>
<%	
		}
    }
%>
    <!-- EntitySets and AssociationSets for all object-object CollectionEntrys -->
<%
    foreach (var rel in GetRelationsWithSeparateStorage(ctx))
    {
        string entityName = rel.GetRelationClassName();
        string assocNameA = rel.GetRelationAssociationName(RelationEndRole.A);
        string assocNameB = rel.GetRelationAssociationName(RelationEndRole.B);
        var a = rel.A;
        var b = rel.B;
%>
    <EntitySet Name="<%= entityName %>EfImpl" EntityType="Model.<%= entityName %>EfImpl" />
    <AssociationSet Name="<%= assocNameA %>" Association="Model.<%= assocNameA %>" >
      <End Role="<%= a.RoleName %>" EntitySet="<%= a.Type.GetRootClass().Name %>EfImpl" />
      <End Role="CollectionEntry" EntitySet="<%= entityName %>EfImpl" />
    </AssociationSet>
    <AssociationSet Name="<%= assocNameB %>" Association="Model.<%= assocNameB %>" >
      <End Role="<%= b.RoleName %>" EntitySet="<%= b.Type.GetRootClass().Name %>EfImpl" />
      <End Role="CollectionEntry" EntitySet="<%= entityName %>EfImpl" />
    </AssociationSet>
<%
    }
%>

    <!-- EntitySets and AssociationSets for all object-value CollectionEntrys -->
<%
    foreach (var prop in GetValueTypeProperties(ctx)
        .Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    {
        string assocName = prop.GetAssociationName();
        string entityName = prop.GetCollectionEntryClassName();
        var cls = (ObjectClass)prop.ObjectClass;
%>
    <EntitySet Name="<%= entityName %>EfImpl" EntityType="Model.<%= entityName %>EfImpl" />
    <AssociationSet Name="<%= assocName %>" Association="Model.<%= assocName %>" >
      <End Role="<%= cls.Name %>" EntitySet="<%= cls.GetRootClass().Name %>EfImpl" />
      <End Role="CollectionEntry" EntitySet="<%= entityName %>EfImpl" />
    </AssociationSet>
<%
    }
%>

    <!-- EntitySets and AssociationSets for all object-struct CollectionEntrys -->
<%
    foreach (var prop in GetCompoundObjectProperties(ctx)
        .Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    {
        string assocName = prop.GetAssociationName();
        string entityName = prop.GetCollectionEntryClassName();
        var cls = (ObjectClass)prop.ObjectClass;
%>
    <EntitySet Name="<%= entityName %>EfImpl" EntityType="Model.<%= entityName %>EfImpl" />
    <AssociationSet Name="<%= assocName %>" Association="Model.<%= assocName %>" >
      <End Role="<%= cls.Name %>" EntitySet="<%= cls.GetRootClass().Name %>EfImpl" />
      <End Role="CollectionEntry" EntitySet="<%= entityName %>EfImpl" />
    </AssociationSet>
<%
    }
%>

    <!-- AssociationSets for all object-object relations without CollectionEntrys -->
<%
    foreach (var rel in GetRelationsWithoutSeparateStorage(ctx))
    {
        string assocName = rel.GetAssociationName();
        var a = rel.A;
        var b = rel.B;
%>
    <AssociationSet Name="<%= assocName %>" Association="Model.<%= assocName %>" >
      <End Role="<%= a.RoleName %>" EntitySet="<%= a.Type.GetRootClass().Name %>EfImpl" />
      <End Role="<%= b.RoleName %>" EntitySet="<%= b.Type.GetRootClass().Name %>EfImpl" />
    </AssociationSet>
<%
    }
%>

    <FunctionImport Name="GetContinuousSequenceNumber" ReturnType="Collection(Int32)">
      <Parameter Name="seqNumber" Mode="In" Type="Guid" />
      <Parameter Name="result" Mode="Out" Type="Int32" />
    </FunctionImport>
    <FunctionImport Name="GetSequenceNumber" ReturnType="Collection(Int32)">
      <Parameter Name="seqNumber" Mode="In" Type="Guid" />
      <Parameter Name="result" Mode="Out" Type="Int32" />
    </FunctionImport>
  </EntityContainer>
  
  <!-- EntityTypes for all base classes -->
<%
    foreach (var cls in GetBaseClasses(ctx).OrderBy(c => c.Name))
    {
        var clsName = cls.Name;
%>
  <EntityType Name="<%= clsName %>EfImpl"<%= GetAbstractModifier(cls) %>>
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
<% 
		ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>());
		if (cls.NeedsRightsTable())
		{
%>
    <NavigationProperty Name="SecurityRightsCollection<%= ImplementationPropertySuffix %>" Relationship="Model.<%= Construct.SecurityRulesFKName(cls) %>" FromRole="<%= clsName %>" ToRole="<%= Construct.SecurityRulesClassName(cls) %>" />
<%
		}
%>
  </EntityType>
<%
		if (cls.NeedsRightsTable())
		{
%>
  <EntityType Name="<%= Construct.SecurityRulesClassName(cls) %>">
    <Key>
	  <PropertyRef Name="ID" />
	  <PropertyRef Name="Identity" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
    <Property Name="Identity" Type="Int32" Nullable="false" />
    <Property Name="Right" Type="Int32" Nullable="false" />
  </EntityType>
  <Association Name="<%= Construct.SecurityRulesFKName(cls) %>">
    <End Role="<%= clsName %>" Type="Model.<%= clsName %>EfImpl" Multiplicity="1">
      <OnDelete Action="Cascade" />
    </End>
    <End Role="<%= Construct.SecurityRulesClassName(cls) %>" Type="Model.<%= Construct.SecurityRulesClassName(cls) %>" Multiplicity="*" />
    <ReferentialConstraint>
	  <Principal Role="<%= clsName %>">
	    <PropertyRef Name="ID" />
	  </Principal>
	  <Dependent Role="<%= Construct.SecurityRulesClassName(cls) %>">
	    <PropertyRef Name="ID" />
	  </Dependent>
    </ReferentialConstraint>
  </Association>
<%	
		}
    }
%>

  <!-- EntityTypes for all other classes -->
<%
    foreach (var cls in GetDerivedClasses(ctx).OrderBy(c => c.Name))
    {
%>
  <EntityType Name="<%= cls.Name %>EfImpl" BaseType="Model.<%= cls.BaseObjectClass.Name %>EfImpl"<%= GetAbstractModifier(cls) %>>
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </EntityType>
<%
    }
%>

  <!-- EntityTypes and Associations for all object-object CollectionEntrys -->
<%
    foreach (var rel in GetRelationsWithSeparateStorage(ctx))
    {
        var a = rel.A;
        var b = rel.B;
%>
  <!--
<%
    RelationDebugTemplate.Call(Host, ctx, rel);
%>
  -->
  <EntityType Name="<%= rel.GetRelationClassName() %>EfImpl" >
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
<% 
	if (a.Type.ImplementsIExportable() && b.Type.ImplementsIExportable())
	{
%>
	<Property Name="ExportGuid" Type="Guid" Nullable="false" />
<%	
	}
%>	
    
    <!-- A -->
    <NavigationProperty Name="A<%= ImplementationPropertySuffix %>"
                        Relationship="Model.<%= rel.GetRelationAssociationName(RelationEndRole.A) %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= a.RoleName %>" />
<%
        if (rel.NeedsPositionStorage(RelationEndRole.A))
        {
%>
    <Property Name="A<%= Zetbox.API.Helper.PositionSuffix %>" Type="Int32" Nullable="false" />
<%
        }
%>

    <!-- B -->
    <NavigationProperty Name="B<%= ImplementationPropertySuffix %>"
                        Relationship="Model.<%= rel.GetRelationAssociationName(RelationEndRole.B) %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= b.RoleName %>" />
<%
        if (rel.NeedsPositionStorage(RelationEndRole.B))
        {
%>
    <Property Name="B<%= Zetbox.API.Helper.PositionSuffix %>" Type="Int32" Nullable="false" />
<%
        }
%>
  </EntityType>
  <Association Name="<%= rel.GetRelationAssociationName(RelationEndRole.A) %>" >
    <End Role="<%= a.RoleName %>"
         Type="Model.<%= a.Type.Name %>EfImpl" 
         Multiplicity="0..1" />
    <End Role="CollectionEntry"
         Type="Model.<%= rel.GetRelationClassName() %>EfImpl"
         Multiplicity="*" />
  </Association>
  <Association Name="<%= rel.GetRelationAssociationName(RelationEndRole.B) %>" >
    <End Role="<%= b.RoleName %>"
         Type="Model.<%= b.Type.Name %>EfImpl" 
         Multiplicity="0..1" />
    <End Role="CollectionEntry"
         Type="Model.<%= rel.GetRelationClassName() %>EfImpl"
         Multiplicity="*" />
  </Association>
  
<%
    }
%>


  <!-- EntityTypes and Associations for all object-value CollectionEntrys -->
<%
    foreach (var prop in GetValueTypeProperties(ctx)
        .Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    {
        var propClsName = prop.ObjectClass.Name;
%>
  <!-- <%= propClsName %>.<%= prop.Name %> -->
  <EntityType Name="<%= prop.GetCollectionEntryClassName() %>EfImpl" >
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
    
    <!-- A -->
    <NavigationProperty Name="Parent<%= ImplementationPropertySuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= propClsName %>" />
    <!-- B -->
    <%= PlainPropertyDefinitionFromValueType(prop, "Value", ImplementationPropertySuffix) %>
<%
        if (prop.HasPersistentOrder)
        {
%>
    <Property Name="Value<%= Zetbox.API.Helper.PositionSuffix %>" Type="Int32" Nullable="false" />
<%
        }
%>
  </EntityType>
  <Association Name="<%= prop.GetAssociationName() %>" >
    <End Role="<%= propClsName %>"
         Type="Model.<%= propClsName %>EfImpl" 
         Multiplicity="0..1" />
    <End Role="CollectionEntry"
         Type="Model.<%= prop.GetCollectionEntryClassName() %>EfImpl" 
         Multiplicity="*" />
  </Association>
<%
    }
%>

<!-- EntityTypes and Associations for all object-CompoundObject CollectionEntrys -->
<%
    foreach(var prop in GetCompoundObjectProperties(ctx)
        .Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    {
        var propClsName = prop.ObjectClass.Name;

%>
  <!-- <%= propClsName %>.<%= prop.Name %> -->
  <EntityType Name="<%= prop.GetCollectionEntryClassName() %>EfImpl" >
    <Key>
      <PropertyRef Name="ID" />
    </Key>
    <Property Name="ID" Type="Int32" Nullable="false" />
    
    <!-- A -->
    <NavigationProperty Name="Parent<%= ImplementationPropertySuffix %>"
                        Relationship="Model.<%= prop.GetAssociationName() %>"
                        FromRole="CollectionEntry"
                        ToRole="<%= propClsName %>" />
    <!-- B -->
    <Property Name="Value<%= ImplementationPropertySuffix %>"
              Type="Model.<%= prop.CompoundObjectDefinition.Name %>EfImpl"
              Nullable="false" />
<%
        if (prop.HasPersistentOrder)
        {
%>
    <Property Name="Index" Type="Int32" Nullable="false" />
<%
        }
%>
  </EntityType>
  <Association Name="<%= prop.GetAssociationName() %>" >
    <End Role="<%= propClsName %>"
         Type="Model.<%= propClsName %>EfImpl" 
         Multiplicity="0..1" />
    <End Role="CollectionEntry"
         Type="Model.<%= prop.GetCollectionEntryClassName() %>EfImpl" 
         Multiplicity="*" />
  </Association>
<%
    }
%>

  <!-- Associations for all object-object relations without CollectionEntrys -->
<%
    foreach (var rel in GetRelationsWithoutSeparateStorage(ctx))
    {
        var a = rel.A;
        var b = rel.B;
%>
  <Association Name="<%= rel.GetAssociationName() %>" >
    <End Role="<%= a.RoleName %>"
         Type="Model.<%= a.Type.Name %>EfImpl" 
         Multiplicity="<%= a.Multiplicity.ToCsdlRelationshipMultiplicity().ToXmlValue() %>" />
    <End Role="<%= b.RoleName %>"
         Type="Model.<%= b.Type.Name %>EfImpl" 
         Multiplicity="<%= b.Multiplicity.ToCsdlRelationshipMultiplicity().ToXmlValue() %>" />
  </Association>
<%
    }
%>


  <!-- ComplexTypes for all CompoundObjects -->
<%
    foreach (var cls in GetCompoundObjects(ctx).OrderBy(s => s.Name))
    {
%>
  <ComplexType Name="<%= cls.Name %>EfImpl" >
<% ApplyEntityTypeFieldDefs(cls.Properties.Cast<Property>()); %>
  </ComplexType>
<%    }

%>

</Schema>

<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#" 
    Name="EfModel.ModelMsl"
    ClassName="Zetbox.DalProvider.Ef.Generator.Templates.EfModel.ModelMsl" 
    Inherits="Zetbox.Generator.ResourceTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.SchemaManagement" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<?xml version="1.0" encoding="utf-8"?>
<Mapping Space="C-S" xmlns="urn:schemas-microsoft-com:windows:storage:mapping:CS">
  <EntityContainerMapping StorageEntityContainer="dbo" CdmEntityContainer="Entities">
    
    <!-- EntitySetMappings for classes -->
<%
    foreach(var cls in GetBaseClasses(ctx).OrderBy(c => c.Name))
    {
        var clsName = cls.Name;
%>
    <EntitySetMapping Name="<%= clsName %>EfImpl">
<% ApplyEntityTypeMapping(cls); %>
    </EntitySetMapping>
<%
		if (cls.NeedsRightsTable())
		{
%>
    <EntitySetMapping Name="<%= Construct.SecurityRulesClassName(cls) %>">
      <EntityTypeMapping TypeName="Model.<%= Construct.SecurityRulesClassName(cls) %>">
        <MappingFragment StoreEntitySet="<%= Construct.SecurityRulesClassName(cls) %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
          <ScalarProperty Name="Identity" ColumnName="Identity" />
          <ScalarProperty Name="Right" ColumnName="Right" />
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <AssociationSetMapping Name="<%= Construct.SecurityRulesFKName(cls) %>" TypeName="Model.<%= Construct.SecurityRulesFKName(cls) %>" StoreEntitySet="<%= Construct.SecurityRulesClassName(cls) %>">
      <EndProperty Name="<%= clsName %>">
        <ScalarProperty Name="ID" ColumnName="ID" />
      </EndProperty>
      <EndProperty Name="<%= Construct.SecurityRulesClassName(cls) %>">
        <ScalarProperty Name="ID" ColumnName="ID" />
        <ScalarProperty Name="Identity" ColumnName="Identity" />
      </EndProperty>
    </AssociationSetMapping>
<%
		}
    }
%>


    <!-- EntitySetMappings and AssociationSetMappings for object-object relations with a CollectionEntry -->
<%
    foreach(var rel in GetRelationsWithSeparateStorage(ctx))
    {
        string fkAName = Construct.ForeignKeyColumnName(rel.A);
        string fkBName = Construct.ForeignKeyColumnName(rel.B);
%>
    <!--
<%
    RelationDebugTemplate.Call(Host, ctx, rel);
%>
    -->
    <EntitySetMapping Name="<%= rel.GetRelationClassName() %>EfImpl">
      <EntityTypeMapping TypeName="Model.<%= rel.GetRelationClassName() %>EfImpl">
        <MappingFragment StoreEntitySet="<%= rel.GetRelationClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
<% 
		if (rel.A.Type.ImplementsIExportable() && rel.B.Type.ImplementsIExportable())
		{
%>
		  <ScalarProperty Name="ExportGuid" ColumnName="ExportGuid" />
<%	
		}
		if (rel.NeedsPositionStorage(RelationEndRole.A))
		{
%>
          <ScalarProperty Name="A<%= Zetbox.API.Helper.PositionSuffix %>" ColumnName="<%= fkAName %><%= Zetbox.API.Helper.PositionSuffix %>" />
<%
		}

		if (rel.NeedsPositionStorage(RelationEndRole.B))
		{
%>
          <ScalarProperty Name="B<%= Zetbox.API.Helper.PositionSuffix %>" ColumnName="<%= fkBName %><%= Zetbox.API.Helper.PositionSuffix %>" />
<%
		}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <!-- A to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetRelationAssociationName(RelationEndRole.A) %>"
                           TypeName="Model.<%= rel.GetRelationAssociationName(RelationEndRole.A) %>"
                           StoreEntitySet="<%= rel.GetRelationClassName() %>" >
      <EndProperty Name="<%= rel.A.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="<%= fkAName %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= fkAName %>" IsNull="false"/>
    </AssociationSetMapping>
    <!-- B to CollectionEntry -->
    <AssociationSetMapping Name="<%= rel.GetRelationAssociationName(RelationEndRole.B) %>"
                           TypeName="Model.<%= rel.GetRelationAssociationName(RelationEndRole.B) %>"
                           StoreEntitySet="<%= rel.GetRelationClassName() %>" >
      <EndProperty Name="<%= rel.B.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="<%= fkBName %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= fkBName %>" IsNull="false"/>
    </AssociationSetMapping>

<%
    }
    
%>


    <!-- AssociationSetMappings for direct object-object relations without a CollectionEntry -->
<%
    foreach(var rel in GetRelationsWithoutSeparateStorage(ctx))
    {
        RelationEnd principal, dependent;
    
        switch(rel.Storage)
        {
            case StorageType.MergeIntoA:
                principal = rel.B;
                dependent = rel.A;
                break;
            case StorageType.MergeIntoB:
                principal = rel.A;
                dependent = rel.B;
                break;
            default:
                throw new NotImplementedException();
        }
%>
    <!--
<%
    RelationDebugTemplate.Call(Host, ctx, rel);
%>
    -->
    <AssociationSetMapping Name="<%= rel.GetAssociationName() %>"
                           TypeName="Model.<%= rel.GetAssociationName() %>"
                           StoreEntitySet="<%= dependent.Type.GetEntitySetName() %>" >
      <EndProperty Name="<%= principal.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="<%= Construct.ForeignKeyColumnName(principal) %>"/>
      </EndProperty>
      <EndProperty Name="<%= dependent.RoleName %>">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= Construct.ForeignKeyColumnName(principal) %>" IsNull="false"/>
    </AssociationSetMapping>
<%
    }
    
%>

    <!-- EntitySetMappings and AssociationSetMappings for object-value CollectionEntrys -->
<%
    foreach(var prop in GetValueTypeProperties(ctx)
        .Where(p => p.IsList && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    { 
        var propClsName = prop.ObjectClass.Name;
%>
    <EntitySetMapping Name="<%= prop.GetCollectionEntryClassName() %>EfImpl">
      <EntityTypeMapping TypeName="Model.<%= prop.GetCollectionEntryClassName() %>EfImpl">
        <MappingFragment StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
          <ScalarProperty Name="Value" ColumnName="<%= prop.Name %>" />
<%
		if (prop.HasPersistentOrder)
		{
%>
          <ScalarProperty Name="B<%= Zetbox.API.Helper.PositionSuffix %>" ColumnName="BIndex" />
<%
		}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <AssociationSetMapping Name="<%= prop.GetAssociationName() %>"
                           TypeName="Model.<%= prop.GetAssociationName() %>"
                           StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= prop.ObjectClass.Name %>">
        <ScalarProperty Name="ID" ColumnName="<%= Construct.ForeignKeyColumnName(prop) %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= Construct.ForeignKeyColumnName(prop)  %>" IsNull="false"/>
    </AssociationSetMapping>
<%
    }
    
%>

    <!-- EntitySetMappings and AssociationSetMappings for object-struct CollectionEntrys -->
<%
    foreach(var prop in GetCompoundObjectProperties(ctx)
        .Where(p => p.IsList) // && !p.IsCalculated)
        .Where(p => p.ObjectClass is ObjectClass)
        .OrderBy(p => p.ObjectClass.Name)
        .ThenBy(p => p.Name))
    { 
        var propClsName = prop.ObjectClass.Name;
%>
    <EntitySetMapping Name="<%= prop.GetCollectionEntryClassName() %>EfImpl">
      <EntityTypeMapping TypeName="Model.<%= prop.GetCollectionEntryClassName() %>EfImpl">
        <MappingFragment StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>">
          <ScalarProperty Name="ID" ColumnName="ID" />
          <% ModelMslEntityTypeMappingComplexProperty.Call(Host, ctx, prop, "Value", string.Empty); %>
<%
		if (prop.HasPersistentOrder)
		{
%>
          <ScalarProperty Name="Index" ColumnName="<%= prop.Name %>Index" />
<%
		}
%>
        </MappingFragment>
      </EntityTypeMapping>
    </EntitySetMapping>
    <AssociationSetMapping Name="<%= prop.GetAssociationName() %>"
                           TypeName="Model.<%= prop.GetAssociationName() %>"
                           StoreEntitySet="<%= prop.GetCollectionEntryClassName() %>" >
      <EndProperty Name="<%= prop.ObjectClass.Name %>">
        <ScalarProperty Name="ID" ColumnName="<%= Construct.ForeignKeyColumnName(prop) %>"/>
      </EndProperty>
      <EndProperty Name="CollectionEntry">
        <ScalarProperty Name="ID" ColumnName="ID"/>
      </EndProperty>
      <Condition ColumnName="<%= Construct.ForeignKeyColumnName(prop) %>" IsNull="false"/>
    </AssociationSetMapping>
<%
    }
    
%>

	<FunctionImportMapping FunctionImportName="GetContinuousSequenceNumber" FunctionName="Model.Store.GetContinuousSequenceNumber" />
    <FunctionImportMapping FunctionImportName="GetSequenceNumber" FunctionName="Model.Store.GetSequenceNumber" />
  </EntityContainerMapping>
</Mapping>
// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections.Generic;

    using Zetbox.API;

    /// <summary>
    /// Represents an Identity
    /// </summary>
    [Zetbox.API.DefinitionGuid("31d8890a-67fc-4a78-9d35-9ff0b9e09b4c")]
    public interface Identity : IDataObject, Zetbox.App.Base.IDeactivatable 
    {

        /// <summary>
        /// Storage for the users calendar configuration
        /// </summary>
        [Zetbox.API.DefinitionGuid("733a16fe-b741-4e7e-9b52-f306c6e1f559")]
        string CalendarConfiguration {
            get;
            set;
        }


        /// <summary>
        /// Displayname of this identity
        /// </summary>
        [Zetbox.API.DefinitionGuid("f93e6dbb-a704-460c-8183-ce8b1c2c47a2")]
        string DisplayName {
            get;
            set;
        }


        /// <summary>
        /// Identites are member of groups
        /// </summary>

        [Zetbox.API.DefinitionGuid("5f534204-f0d5-4d6f-8efa-7ff248580ba3")]
        [System.Runtime.Serialization.IgnoreDataMember]
        ICollection<Zetbox.App.Base.Group> Groups { get; }

        /// <summary>
        /// A token for simple login with a URL
        /// </summary>
        [Zetbox.API.DefinitionGuid("267074ae-3a16-41bd-b9af-f09fa27e8d5a")]
        Guid? LoginToken {
            get;
            set;
        }


        /// <summary>
        /// Optional Open Id
        /// </summary>
        [Zetbox.API.DefinitionGuid("9e5b1327-cb22-4442-a4b4-6cf6083e88a2")]
        Zetbox.App.Base.OpenID OpenID {
            get;
            set;
        }


        /// <summary>
        /// Password of a generic identity
        /// </summary>
        [Zetbox.API.DefinitionGuid("0d499610-99e3-42cc-b71b-49ed1a356355")]
        string Password {
            get;
            set;
        }


        /// <summary>
        /// Username of a generic identity
        /// </summary>
        [Zetbox.API.DefinitionGuid("a4ce1f5f-311b-4510-8817-4cca40f0bf0f")]
        string UserName {
            get;
            set;
        }


        /// <summary>
        /// Clears the login token
        /// </summary>
        void ClearLoginToken();

        /// <summary>
        /// Creates or re-creates the login token
        /// </summary>
        void CreateLoginToken();

        /// <summary>
        /// Sets a password hash from the given plain text password
        /// </summary>
        void SetPassword(string plainTextPassword);

        /// <summary>
        /// Sets a new password by opening a dialog
        /// </summary>
        void SetPasswordUI();
    }
}

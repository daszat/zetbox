@attribute [ViewDescriptor(Zetbox.App.GUI.Toolkit.Blazor)]

@using Zetbox.Client.Presentables.ValueViewModels
@using Zetbox.Client.Presentables.ZetboxBase

@if (ViewModel != null)
{
	<div>
		@foreach(var action in ViewModel.Commands)
		{
			<CommandButton ViewModel="@action" />
		}
	</div>

	<table class="table table-bordered">
		<tr>
			<th></th>
			@foreach (var col in ViewModel.DisplayedColumns.Columns)
			{
				<th>@col.Header</th>
			}
		</tr>

		@if (ViewModel.InstancesAsync != null)
		{
			@foreach (var item in ViewModel.InstancesAsync)
			{
				<tr>
					<td>
						<input type="checkbox" value="@(ViewModel.SelectedItem == item)" @onchange="@(i => Select(item, i))">
					</td>
					@foreach (var col in ViewModel.DisplayedColumns.Columns)
					{
						<td>
							<BaseValueView Value="@item.PropertyModelsByName[col.Property.Name]"></BaseValueView>
						</td>
					}
				</tr>
			}
		}
		else
		{
			<p class="text-info">Loading ...</p>
		}
	</table>
}

@code {
	[Parameter]
	public InstanceListViewModel? ViewModel { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (ViewModel != null)
		{
			ViewModel.PropertyChanged += (s, e) => StateHasChanged();
		}
	}

	private void Select(DataObjectViewModel item, ChangeEventArgs args)
	{
		if (args.Value as bool? == true)
		{
			ViewModel.SelectedItem = item;
		}
	}
}

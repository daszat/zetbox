// <autogenerated/>

namespace Zetbox.App.Projekte
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Projekt")]
    public class ProjektNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, Projekt, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("885939e8-82e1-4fdf-b80e-5f612d5131d3");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public ProjektNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ProjektNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ProjektProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ProjektNHibernateImpl(Func<IFrozenContext> lazyCtx, ProjektProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ProjektProxy Proxy;

        /// <summary>
        /// Eine Liste der Änderungen an diesem Datensatz.
        /// </summary>
        // CompoundObject list property

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty
        public ICollection<Zetbox.App.Base.AuditEntry> AuditJournal
        {
            get
            {
                if (_AuditJournal == null)
                {
                    _AuditJournal = new ClientValueCollectionWrapper<Projekt, Zetbox.App.Base.AuditEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl, ICollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl>>(
                            this.Context,
                            this,
                            () => { this.NotifyPropertyChanged("AuditJournal", null, null); if(OnAuditJournal_PostSetter != null && IsAttached) OnAuditJournal_PostSetter(this); },
                            AuditJournalCollection);
                }
                return _AuditJournal;
            }
        }

        private ProjectedCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl> AuditJournalCollection
        {
            get {
                if (_AuditJournalCollection == null)
                {
                    _AuditJournalCollection = new ProjectedCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl>(
                        () => this.Proxy.AuditJournal,
                        p => (Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                        d => (Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy)((NHibernatePersistenceObject)d).NHibernateProxy);
                }
                return _AuditJournalCollection;
            }
        }

        private ClientValueCollectionWrapper<Projekt, Zetbox.App.Base.AuditEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl, ICollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl>> _AuditJournal;
        private ProjectedCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl> _AuditJournalCollection;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnAuditJournal_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnAuditJournal_IsValid;

        /// <summary>
        /// Aufträge
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Projekte.Auftrag> Auftraege
        {
            get
            {
                if (_Auftraege == null)
                {
                    _Auftraege = new OneNRelationList<Zetbox.App.Projekte.Auftrag>(
                        "Projekt",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Auftraege", null, null),
                        () => { this.NotifyPropertyChanged("Auftraege", null, null); if(OnAuftraege_PostSetter != null && IsAttached) OnAuftraege_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Projekte.AuftragNHibernateImpl.AuftragProxy, Zetbox.App.Projekte.Auftrag>(
                            () => Proxy.Auftraege,
                            p => (Zetbox.App.Projekte.Auftrag)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Projekte.AuftragNHibernateImpl.AuftragProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Auftraege;
            }
        }
    
        private OneNRelationList<Zetbox.App.Projekte.Auftrag> _Auftraege;

        public Zetbox.API.Async.ZbTask TriggerFetchAuftraegeAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Projekte.Auftrag>>(this.Auftraege);
        }

public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnAuftraege_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnAuftraege_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public double? AufwandGes
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchAufwandGesOrDefault();
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.AufwandGes != value)
                {
                    var __oldValue = Proxy.AufwandGes;
                    var __newValue = value;
                    NotifyPropertyChanging("AufwandGes", __oldValue, __newValue);
                    Proxy.AufwandGes = __newValue;
                    NotifyPropertyChanged("AufwandGes", __oldValue, __newValue);
                    _AufwandGes_IsDirty = false;

                }
                else
                {
                    SetInitializedProperty("AufwandGes");
                }
            }
        }
        private bool _AufwandGes_IsDirty = false;


        private double? FetchAufwandGesOrDefault()
        {
           var __result = Proxy.AufwandGes;
            if (_AufwandGes_IsDirty && OnAufwandGes_Getter != null)
            {
                var __e = new PropertyGetterEventArgs<double?>(__result);
                OnAufwandGes_Getter(this, __e);
                _AufwandGes_IsDirty = false;
                __result = Proxy.AufwandGes = __e.Result;
            }
            return __result;
        }

        private bool _isAufwandGesSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, double?> OnAufwandGes_Getter;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime? Bis
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Bis;
                if (OnBis_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnBis_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Bis != value)
                {
                    var __oldValue = Proxy.Bis;
                    var __newValue = value;
                    if (OnBis_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBis_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Bis", __oldValue, __newValue);
                    Proxy.Bis = __newValue;
                    NotifyPropertyChanged("Bis", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBis_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBis_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Bis");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnBis_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d1f821b0-5991-44a7-9c4d-8be66834ea9c"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Projekte.Projekt.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("7119febf-e750-411f-a4f2-5a2181e45dc7"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Projekte.Projekt.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("df36d615-9f6e-4075-ae1c-8c5cd8a4ef91"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Projekte.Projekt.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime KickOffAm
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.KickOffAm;
                if (OnKickOffAm_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnKickOffAm_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.KickOffAm != value)
                {
                    var __oldValue = Proxy.KickOffAm;
                    var __newValue = value;
                    if (OnKickOffAm_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnKickOffAm_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("KickOffAm", __oldValue, __newValue);
                    Proxy.KickOffAm = __newValue;
                    NotifyPropertyChanged("KickOffAm", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKickOffAm_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnKickOffAm_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("KickOffAm");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKickOffAm_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime? KickOffBis
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.KickOffBis;
                if (OnKickOffBis_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnKickOffBis_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.KickOffBis != value)
                {
                    var __oldValue = Proxy.KickOffBis;
                    var __newValue = value;
                    if (OnKickOffBis_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnKickOffBis_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("KickOffBis", __oldValue, __newValue);
                    Proxy.KickOffBis = __newValue;
                    NotifyPropertyChanged("KickOffBis", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKickOffBis_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnKickOffBis_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("KickOffBis");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKickOffBis_IsValid;

        /// <summary>
        /// Bitte geben Sie den Kundennamen ein
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Kundenname
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Kundenname;
                if (OnKundenname_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnKundenname_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Kundenname != value)
                {
                    var __oldValue = Proxy.Kundenname;
                    var __newValue = value;
                    if (OnKundenname_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Kundenname", __oldValue, __newValue);
                    Proxy.Kundenname = __newValue;
                    NotifyPropertyChanged("Kundenname", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKundenname_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Kundenname");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKundenname_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public IList<Zetbox.App.Projekte.Mitarbeiter> Mitarbeiter
		{
			get
			{
				if (_Mitarbeiter == null)
				{
					_Mitarbeiter 
						= new NHibernateBSideListWrapper<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl.Projekte_haben_Mitarbeiter_RelationEntryProxy, Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl>(
                                () => this.Proxy.Mitarbeiter,
                                p => (Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl.Projekte_haben_Mitarbeiter_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _Mitarbeiter.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("Mitarbeiter", null, null); if(OnMitarbeiter_PostSetter != null && IsAttached) OnMitarbeiter_PostSetter(this); };
                    if (Mitarbeiter_was_eagerLoaded) { Mitarbeiter_was_eagerLoaded = false; }
				}
				return (IList<Zetbox.App.Projekte.Mitarbeiter>)_Mitarbeiter;
			}
		}

		private NHibernateBSideListWrapper<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl> _Mitarbeiter;
		// ignored, but required for Serialization
        private bool Mitarbeiter_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchMitarbeiterAsync()
        {
            return new Zetbox.API.Async.ZbTask<IList<Zetbox.App.Projekte.Mitarbeiter>>(this.Mitarbeiter);
        }

public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnMitarbeiter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnMitarbeiter_IsValid;

        /// <summary>
        /// Projektname
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Projekte.Task> Tasks
        {
            get
            {
                if (_Tasks == null)
                {
                    _Tasks = new OneNRelationList<Zetbox.App.Projekte.Task>(
                        "Projekt",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Tasks", null, null),
                        () => { this.NotifyPropertyChanged("Tasks", null, null); if(OnTasks_PostSetter != null && IsAttached) OnTasks_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Projekte.TaskNHibernateImpl.TaskProxy, Zetbox.App.Projekte.Task>(
                            () => Proxy.Tasks,
                            p => (Zetbox.App.Projekte.Task)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Projekte.TaskNHibernateImpl.TaskProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Tasks;
            }
        }
    
        private OneNRelationList<Zetbox.App.Projekte.Task> _Tasks;

        public Zetbox.API.Async.ZbTask TriggerFetchTasksAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Projekte.Task>>(this.Tasks);
        }

public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnTasks_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnTasks_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime Von
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Von;
                if (OnVon_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnVon_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Von != value)
                {
                    var __oldValue = Proxy.Von;
                    var __newValue = value;
                    if (OnVon_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnVon_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Von", __oldValue, __newValue);
                    Proxy.Von = __newValue;
                    NotifyPropertyChanged("Von", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnVon_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnVon_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Von");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnVon_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetFulltextIndexBody_Projekt")]
        public virtual string GetFulltextIndexBody()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetFulltextIndexBody_Projekt != null)
            {
                OnGetFulltextIndexBody_Projekt(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Projekt.GetFulltextIndexBody");
            }
            return e.Result;
        }
        public delegate void GetFulltextIndexBody_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetFulltextIndexBody_Handler<Projekt> OnGetFulltextIndexBody_Projekt;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Projekt> OnGetFulltextIndexBody_Projekt_CanExec;

        [EventBasedMethod("OnGetFulltextIndexBody_Projekt_CanExec")]
        public virtual bool GetFulltextIndexBodyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetFulltextIndexBody_Projekt_CanExec != null)
				{
					OnGetFulltextIndexBody_Projekt_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Projekt> OnGetFulltextIndexBody_Projekt_CanExecReason;

        [EventBasedMethod("OnGetFulltextIndexBody_Projekt_CanExecReason")]
        public virtual string GetFulltextIndexBodyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetFulltextIndexBody_Projekt_CanExecReason != null)
				{
					OnGetFulltextIndexBody_Projekt_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetSummaryReport_Projekt")]
        public virtual System.Object GetSummaryReport(string title, Zetbox.App.Base.DateTimeRange range)
        {
            var e = new MethodReturnEventArgs<System.Object>();
            if (OnGetSummaryReport_Projekt != null)
            {
                OnGetSummaryReport_Projekt(this, e, title, range);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Projekt.GetSummaryReport");
            }
            return e.Result;
        }
        public delegate void GetSummaryReport_Handler<T>(T obj, MethodReturnEventArgs<System.Object> ret, string title, Zetbox.App.Base.DateTimeRange range);
        public static event GetSummaryReport_Handler<Projekt> OnGetSummaryReport_Projekt;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Projekt> OnGetSummaryReport_Projekt_CanExec;

        [EventBasedMethod("OnGetSummaryReport_Projekt_CanExec")]
        public virtual bool GetSummaryReportCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetSummaryReport_Projekt_CanExec != null)
				{
					OnGetSummaryReport_Projekt_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Projekt> OnGetSummaryReport_Projekt_CanExecReason;

        [EventBasedMethod("OnGetSummaryReport_Projekt_CanExecReason")]
        public virtual string GetSummaryReportCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetSummaryReport_Projekt_CanExecReason != null)
				{
					OnGetSummaryReport_Projekt_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt)obj;
            var otherImpl = (ProjektNHibernateImpl)obj;
            var me = (Projekt)this;

            me.Bis = other.Bis;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.KickOffAm = other.KickOffAm;
            me.KickOffBis = other.KickOffBis;
            me.Kundenname = other.Kundenname;
            me.Name = other.Name;
            me.Von = other.Von;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
            _AufwandGes_IsDirty = true;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Bis":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "KickOffAm":
                case "KickOffBis":
                case "Kundenname":
                case "Name":
                case "Von":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "AufwandGes":
                    NotifyPropertyChanging(property, null, null);
                    _AufwandGes_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Auftraege":
                case "Mitarbeiter":
                case "Tasks":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Auftraege":
                return TriggerFetchAuftraegeAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Mitarbeiter":
                return TriggerFetchMitarbeiterAsync();
            case "Tasks":
                return TriggerFetchTasksAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<Projekt, ICollection<Zetbox.App.Base.AuditEntry>>(
                        lazyCtx,
                        new Guid("4bef0e48-79c8-4776-a5de-bbb250599a40"),
                        "AuditJournal",
                        null,
                        obj => obj.AuditJournal,
                        null, // lists are read-only properties
                        obj => OnAuditJournal_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<Projekt, ICollection<Zetbox.App.Projekte.Auftrag>>(
                        lazyCtx,
                        new Guid("30a1d8b6-4db5-45a0-a9a8-531472a9107e"),
                        "Auftraege",
                        null,
                        obj => obj.Auftraege,
                        null, // lists are read-only properties
                        obj => OnAuftraege_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, double?>(
                        lazyCtx,
                        new Guid("a26cec7d-1e5c-44f5-9c56-92af595739eb"),
                        "AufwandGes",
                        null,
                        obj => obj.AufwandGes,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime?>(
                        lazyCtx,
                        new Guid("b1e079e3-9236-4774-8f21-7b2abfcf9fb0"),
                        "Bis",
                        null,
                        obj => obj.Bis,
                        (obj, val) => obj.Bis = val,
						obj => OnBis_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("2fe9d894-c359-412f-b787-d3ed3a26a0a2"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("d1f821b0-5991-44a7-9c4d-8be66834ea9c"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("fbe34f93-21ec-470a-b9d4-6e4664729466"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("7119febf-e750-411f-a4f2-5a2181e45dc7"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, Guid>(
                        lazyCtx,
                        new Guid("df36d615-9f6e-4075-ae1c-8c5cd8a4ef91"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("d9b9e70b-e9d2-4da4-8731-a4eee7bf6d87"),
                        "KickOffAm",
                        null,
                        obj => obj.KickOffAm,
                        (obj, val) => obj.KickOffAm = val,
						obj => OnKickOffAm_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime?>(
                        lazyCtx,
                        new Guid("a5057dbd-bd31-4e0a-81c2-e0fa551fa34d"),
                        "KickOffBis",
                        null,
                        obj => obj.KickOffBis,
                        (obj, val) => obj.KickOffBis = val,
						obj => OnKickOffBis_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, string>(
                        lazyCtx,
                        new Guid("cd6be045-d1bd-4086-b848-c83249f5ca9b"),
                        "Kundenname",
                        null,
                        obj => obj.Kundenname,
                        (obj, val) => obj.Kundenname = val,
						obj => OnKundenname_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<Projekt, IList<Zetbox.App.Projekte.Mitarbeiter>>(
                        lazyCtx,
                        new Guid("3e60fe29-ac50-4232-bbeb-af023ede02f6"),
                        "Mitarbeiter",
                        null,
                        obj => obj.Mitarbeiter,
                        null, // lists are read-only properties
                        obj => OnMitarbeiter_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, string>(
                        lazyCtx,
                        new Guid("b5482479-fd14-4990-86f4-49872e2eeeb8"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<Projekt, ICollection<Zetbox.App.Projekte.Task>>(
                        lazyCtx,
                        new Guid("f6ff71b0-ccaf-4c7d-8e2b-1210a9df4b0f"),
                        "Tasks",
                        null,
                        obj => obj.Tasks,
                        null, // lists are read-only properties
                        obj => OnTasks_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("94ea407f-9816-470e-9e52-6607830c7c0b"),
                        "Von",
                        null,
                        obj => obj.Von,
                        (obj, val) => obj.Von = val,
						obj => OnVon_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Projekt")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Projekt != null)
            {
                OnToString_Projekt(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Projekt> OnToString_Projekt;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Projekt")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Projekt != null)
            {
                OnObjectIsValid_Projekt(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Projekt> OnObjectIsValid_Projekt;

        [EventBasedMethod("OnNotifyPreSave_Projekt")]
        public override void NotifyPreSave()
        {
            FetchAufwandGesOrDefault();
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Projekt != null) OnNotifyPreSave_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyPreSave_Projekt;

        [EventBasedMethod("OnNotifyPostSave_Projekt")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Projekt != null) OnNotifyPostSave_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyPostSave_Projekt;

        [EventBasedMethod("OnNotifyCreated_Projekt")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Bis");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("KickOffAm");
            SetNotInitializedProperty("KickOffBis");
            SetNotInitializedProperty("Kundenname");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Von");
            _AufwandGes_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Projekt != null) OnNotifyCreated_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyCreated_Projekt;

        [EventBasedMethod("OnNotifyDeleting_Projekt")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Projekt != null) OnNotifyDeleting_Projekt(this);
            foreach(NHibernatePersistenceObject x in AuditJournalCollection) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }

            // FK_Projekt_has_Auftraege ZeroOrMore
            foreach(NHibernatePersistenceObject x in Auftraege) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_Projekt_has_Tasks ZeroOrMore
            foreach(NHibernatePersistenceObject x in Tasks) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_Projekt_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_Projekt_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }

            AuditJournal.Clear();
            Auftraege.Clear();
            Mitarbeiter.Clear();
            Tasks.Clear();
            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Projekt> OnNotifyDeleting_Projekt;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class ProjektProxy
            : IProxyObject, ISortKey<int>
        {
            public ProjektProxy()
            {
                AuditJournal = new Collection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy>();
                Auftraege = new Collection<Zetbox.App.Projekte.AuftragNHibernateImpl.AuftragProxy>();
                Mitarbeiter = new Collection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl.Projekte_haben_Mitarbeiter_RelationEntryProxy>();
                Tasks = new Collection<Zetbox.App.Projekte.TaskNHibernateImpl.TaskProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ProjektNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ProjektProxy); } }

            public virtual ICollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryNHibernateImpl.Projekt_AuditJournal_CollectionEntryProxy> AuditJournal { get; set; }

            public virtual int? AuditJournal_pos { get; set; }

            public virtual ICollection<Zetbox.App.Projekte.AuftragNHibernateImpl.AuftragProxy> Auftraege { get; set; }

            public virtual double? AufwandGes { get; set; }

            public virtual DateTime? Bis { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual DateTime KickOffAm { get; set; }

            public virtual DateTime? KickOffBis { get; set; }

            public virtual string Kundenname { get; set; }

            public virtual ICollection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryNHibernateImpl.Projekte_haben_Mitarbeiter_RelationEntryProxy> Mitarbeiter { get; set; }

            public virtual string Name { get; set; }

            public virtual int? Projekte_pos { get; set; }

            public virtual ICollection<Zetbox.App.Projekte.TaskNHibernateImpl.TaskProxy> Tasks { get; set; }

            public virtual DateTime Von { get; set; }

            public virtual ICollection<Projekt_RightsNHibernateImpl> SecurityRightsCollectionImpl { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        private Zetbox.API.AccessRights? __currentAccessRights;
        public override Zetbox.API.AccessRights CurrentAccessRights
        {
           get { 
             if(Context == null) return Zetbox.API.AccessRights.Full;
             if(__currentAccessRights == null) { 
                 __currentAccessRights = base.CurrentAccessRights; 
                 var secRight = this.Proxy.SecurityRightsCollectionImpl != null ? this.Proxy.SecurityRightsCollectionImpl.SingleOrDefault(i => i.Identity == Context.Internals().IdentityID) : null;
                 __currentAccessRights |= secRight != null ? (Zetbox.API.AccessRights)secRight.Right : Zetbox.API.AccessRights.None; 
             } 
             return __currentAccessRights.Value; }
        }

        protected override void ResetCurrentAccessRights()
        {
                base.ResetCurrentAccessRights();
                __currentAccessRights = null;
        }


        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.WriteCollectionEntries(this.AuditJournalCollection);
            binStream.Write(this.Proxy.AufwandGes);
            binStream.Write(this.Proxy.Bis);
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.KickOffAm);
            binStream.Write(this.Proxy.KickOffBis);
            binStream.Write(this.Proxy.Kundenname);
            binStream.Write(this.Proxy.Name);
            binStream.Write(this.Proxy.Von);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.AufwandGes = binStream.ReadNullableDouble();
            this.Proxy.Bis = binStream.ReadNullableDateTime();
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this.Proxy.KickOffAm = binStream.ReadDateTime();
            this.Proxy.KickOffBis = binStream.ReadNullableDateTime();
            this.Proxy.Kundenname = binStream.ReadString();
            this.Proxy.Name = binStream.ReadString();
            this.Proxy.Von = binStream.ReadDateTime();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ExportCollectionEntries(this.AuditJournalCollection, xml, "AuditJournal", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.AufwandGes, xml, "AufwandGes", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.Bis, xml, "Bis", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.KickOffAm, xml, "KickOffAm", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.KickOffBis, xml, "KickOffBis", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.Kundenname, xml, "Kundenname", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this.Proxy.Von, xml, "Von", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|AuditJournal":
                XmlStreamer.MergeImportCollectionEntries(this, this.AuditJournalCollection, xml);
                break;
            case "Zetbox.App.Projekte|AufwandGes":
                this.Proxy.AufwandGes = XmlStreamer.ReadNullableDouble(xml);
                break;
            case "Zetbox.App.Projekte|Bis":
                this.Proxy.Bis = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Projekte|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Projekte|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Projekte|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Projekte|KickOffAm":
                this.Proxy.KickOffAm = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Projekte|KickOffBis":
                this.Proxy.KickOffBis = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Projekte|Kundenname":
                this.Proxy.Kundenname = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Von":
                this.Proxy.Von = XmlStreamer.ReadDateTime(xml);
                break;
            }
        }

        #endregion

    }

        public class Projekt_RightsNHibernateImpl
        {
            public Projekt_RightsNHibernateImpl()
            {
            }

            public virtual int ID { get; set; }
            public virtual int Identity { get; set; }
            public virtual int Right { get; set; }
        }
}
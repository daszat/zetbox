// <autogenerated/>

namespace Zetbox.App.LicenseManagement
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// A single License
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("License")]
    public class LicenseNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, License, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("dba4beb1-acfb-45f5-9261-6486536016f6");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public LicenseNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public LicenseNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new LicenseProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public LicenseNHibernateImpl(Func<IFrozenContext> lazyCtx, LicenseProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
            _isValidFromSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly LicenseProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.LicenseManagement;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d02c4d91-59dd-4f4a-93cf-85669295c164"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.LicenseManagement.License.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.LicenseManagement;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("a25fd55e-1982-4d02-bd29-22e8f8b1c451"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.LicenseManagement.License.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("ae35124b-5da8-4af2-a5e3-f0084cf690ad"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.LicenseManagement.License.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnExportGuid_IsValid;

        /// <summary>
        /// Optional additional data attached to this license
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string LicenseData
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.LicenseData;
                if (OnLicenseData_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLicenseData_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.LicenseData != value)
                {
                    var __oldValue = Proxy.LicenseData;
                    var __newValue = value;
                    if (OnLicenseData_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicenseData_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("LicenseData", __oldValue, __newValue);
                    Proxy.LicenseData = __newValue;
                    NotifyPropertyChanged("LicenseData", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLicenseData_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicenseData_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("LicenseData");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicenseData_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicenseData_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicenseData_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnLicenseData_IsValid;

        /// <summary>
        /// The licensee of this license
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Licensee
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Licensee;
                if (OnLicensee_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLicensee_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Licensee != value)
                {
                    var __oldValue = Proxy.Licensee;
                    var __newValue = value;
                    if (OnLicensee_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicensee_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Licensee", __oldValue, __newValue);
                    Proxy.Licensee = __newValue;
                    NotifyPropertyChanged("Licensee", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLicensee_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicensee_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Licensee");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensee_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensee_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensee_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnLicensee_IsValid;

        /// <summary>
        /// A integer represeting the license subject
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public int? LicenseSubject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.LicenseSubject;
                if (OnLicenseSubject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnLicenseSubject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.LicenseSubject != value)
                {
                    var __oldValue = Proxy.LicenseSubject;
                    var __newValue = value;
                    if (OnLicenseSubject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnLicenseSubject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("LicenseSubject", __oldValue, __newValue);
                    Proxy.LicenseSubject = __newValue;
                    NotifyPropertyChanged("LicenseSubject", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLicenseSubject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnLicenseSubject_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("LicenseSubject");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, int?> OnLicenseSubject_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, int?> OnLicenseSubject_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, int?> OnLicenseSubject_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnLicenseSubject_IsValid;

        /// <summary>
        /// Licensor of this License
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Licensor
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Licensor;
                if (OnLicensor_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLicensor_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Licensor != value)
                {
                    var __oldValue = Proxy.Licensor;
                    var __newValue = value;
                    if (OnLicensor_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicensor_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Licensor", __oldValue, __newValue);
                    Proxy.Licensor = __newValue;
                    NotifyPropertyChanged("Licensor", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLicensor_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLicensor_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Licensor");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensor_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensor_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, string> OnLicensor_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnLicensor_IsValid;

        /// <summary>
        /// Encoded Signature
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Signature
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Signature;
                if (OnSignature_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSignature_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Signature != value)
                {
                    var __oldValue = Proxy.Signature;
                    var __newValue = value;
                    if (OnSignature_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSignature_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Signature", __oldValue, __newValue);
                    Proxy.Signature = __newValue;
                    NotifyPropertyChanged("Signature", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSignature_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSignature_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Signature");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, string> OnSignature_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, string> OnSignature_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, string> OnSignature_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnSignature_IsValid;

        /// <summary>
        /// License is valid from
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ValidFrom
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchValidFromOrDefault();
                if (OnValidFrom_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnValidFrom_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isValidFromSet = true;
                if (Proxy.ValidFrom != value)
                {
                    var __oldValue = Proxy.ValidFrom;
                    var __newValue = value;
                    if (OnValidFrom_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnValidFrom_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidFrom", __oldValue, __newValue);
                    Proxy.ValidFrom = __newValue;
                    NotifyPropertyChanged("ValidFrom", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnValidFrom_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnValidFrom_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ValidFrom");
                }
            }
        }


        private DateTime FetchValidFromOrDefault()
        {
            var __result = Proxy.ValidFrom;
                if (!_isValidFromSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("b8d29d74-eb31-47d4-bca1-a4c4c0f93c1c"));
                    if (__p != null) {
                        _isValidFromSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ValidFrom = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.LicenseManagement.License.ValidFrom'");
                    }
                }
            return __result;
        }

        private bool _isValidFromSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidFrom_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidFrom_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidFrom_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnValidFrom_IsValid;

        /// <summary>
        /// License is valid thru
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ValidThru
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ValidThru;
                if (OnValidThru_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnValidThru_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ValidThru != value)
                {
                    var __oldValue = Proxy.ValidThru;
                    var __newValue = value;
                    if (OnValidThru_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnValidThru_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidThru", __oldValue, __newValue);
                    Proxy.ValidThru = __newValue;
                    NotifyPropertyChanged("ValidThru", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnValidThru_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnValidThru_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ValidThru");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidThru_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidThru_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.LicenseManagement.License, DateTime> OnValidThru_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.LicenseManagement.License> OnValidThru_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCheck_License")]
        public virtual bool Check(System.Object certificate)
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnCheck_License != null)
            {
                OnCheck_License(this, e, certificate);
            }
            else
            {
                throw new NotImplementedException("No handler registered on License.Check");
            }
            return e.Result;
        }
        public delegate void Check_Handler<T>(T obj, MethodReturnEventArgs<bool> ret, System.Object certificate);
        public static event Check_Handler<License> OnCheck_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnCheck_License_CanExec;

        [EventBasedMethod("OnCheck_License_CanExec")]
        public virtual bool CheckCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCheck_License_CanExec != null)
				{
					OnCheck_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnCheck_License_CanExecReason;

        [EventBasedMethod("OnCheck_License_CanExecReason")]
        public virtual string CheckCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCheck_License_CanExecReason != null)
				{
					OnCheck_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnExport_License")]
        public virtual void Export(string file)
        {
            // base.Export();
            if (OnExport_License != null)
            {
                OnExport_License(this, file);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method License.Export");
            }
        }
        public delegate void Export_Handler<T>(T obj, string file);
        public static event Export_Handler<License> OnExport_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnExport_License_CanExec;

        [EventBasedMethod("OnExport_License_CanExec")]
        public virtual bool ExportCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnExport_License_CanExec != null)
				{
					OnExport_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnExport_License_CanExecReason;

        [EventBasedMethod("OnExport_License_CanExecReason")]
        public virtual string ExportCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnExport_License_CanExecReason != null)
				{
					OnExport_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Exports this License
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnExportUI_License")]
        public virtual void ExportUI()
        {
            // base.ExportUI();
            if (OnExportUI_License != null)
            {
                OnExportUI_License(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method License.ExportUI");
            }
        }
        public delegate void ExportUI_Handler<T>(T obj);
        public static event ExportUI_Handler<License> OnExportUI_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnExportUI_License_CanExec;

        [EventBasedMethod("OnExportUI_License_CanExec")]
        public virtual bool ExportUICanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnExportUI_License_CanExec != null)
				{
					OnExportUI_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnExportUI_License_CanExecReason;

        [EventBasedMethod("OnExportUI_License_CanExecReason")]
        public virtual string ExportUICanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnExportUI_License_CanExecReason != null)
				{
					OnExportUI_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Checks, if the signature is valid
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnIsSignatureValid_License")]
        public virtual bool IsSignatureValid(System.Object certificate)
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsSignatureValid_License != null)
            {
                OnIsSignatureValid_License(this, e, certificate);
            }
            else
            {
                throw new NotImplementedException("No handler registered on License.IsSignatureValid");
            }
            return e.Result;
        }
        public delegate void IsSignatureValid_Handler<T>(T obj, MethodReturnEventArgs<bool> ret, System.Object certificate);
        public static event IsSignatureValid_Handler<License> OnIsSignatureValid_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnIsSignatureValid_License_CanExec;

        [EventBasedMethod("OnIsSignatureValid_License_CanExec")]
        public virtual bool IsSignatureValidCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnIsSignatureValid_License_CanExec != null)
				{
					OnIsSignatureValid_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnIsSignatureValid_License_CanExecReason;

        [EventBasedMethod("OnIsSignatureValid_License_CanExecReason")]
        public virtual string IsSignatureValidCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnIsSignatureValid_License_CanExecReason != null)
				{
					OnIsSignatureValid_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Checks, if the time range is valid
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnIsValid_License")]
        public virtual bool IsValid()
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnIsValid_License != null)
            {
                OnIsValid_License(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on License.IsValid");
            }
            return e.Result;
        }
        public delegate void IsValid_Handler<T>(T obj, MethodReturnEventArgs<bool> ret);
        public static event IsValid_Handler<License> OnIsValid_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnIsValid_License_CanExec;

        [EventBasedMethod("OnIsValid_License_CanExec")]
        public virtual bool IsValidCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnIsValid_License_CanExec != null)
				{
					OnIsValid_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnIsValid_License_CanExecReason;

        [EventBasedMethod("OnIsValid_License_CanExecReason")]
        public virtual string IsValidCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnIsValid_License_CanExecReason != null)
				{
					OnIsValid_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Sings this license
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnSign_License")]
        public virtual void Sign(Zetbox.App.LicenseManagement.PrivateKey certificate, string password)
        {
            // base.Sign();
            if (OnSign_License != null)
            {
                OnSign_License(this, certificate, password);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method License.Sign");
            }
        }
        public delegate void Sign_Handler<T>(T obj, Zetbox.App.LicenseManagement.PrivateKey certificate, string password);
        public static event Sign_Handler<License> OnSign_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnSign_License_CanExec;

        [EventBasedMethod("OnSign_License_CanExec")]
        public virtual bool SignCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnSign_License_CanExec != null)
				{
					OnSign_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnSign_License_CanExecReason;

        [EventBasedMethod("OnSign_License_CanExecReason")]
        public virtual string SignCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnSign_License_CanExecReason != null)
				{
					OnSign_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Sings this license
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnSignUI_License")]
        public virtual void SignUI()
        {
            // base.SignUI();
            if (OnSignUI_License != null)
            {
                OnSignUI_License(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method License.SignUI");
            }
        }
        public delegate void SignUI_Handler<T>(T obj);
        public static event SignUI_Handler<License> OnSignUI_License;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<License> OnSignUI_License_CanExec;

        [EventBasedMethod("OnSignUI_License_CanExec")]
        public virtual bool SignUICanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnSignUI_License_CanExec != null)
				{
					OnSignUI_License_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<License> OnSignUI_License_CanExecReason;

        [EventBasedMethod("OnSignUI_License_CanExecReason")]
        public virtual string SignUICanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnSignUI_License_CanExecReason != null)
				{
					OnSignUI_License_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(License);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (License)obj;
            var otherImpl = (LicenseNHibernateImpl)obj;
            var me = (License)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.LicenseData = other.LicenseData;
            me.Licensee = other.Licensee;
            me.LicenseSubject = other.LicenseSubject;
            me.Licensor = other.Licensor;
            me.Signature = other.Signature;
            me.ValidFrom = other.ValidFrom;
            me.ValidThru = other.ValidThru;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "ExportGuid":
                case "LicenseData":
                case "Licensee":
                case "LicenseSubject":
                case "Licensor":
                case "Signature":
                case "ValidFrom":
                case "ValidThru":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<License, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("7bfbe8d0-5cea-4aa6-8a89-0ea91770fb82"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, DateTime>(
                        lazyCtx,
                        new Guid("d02c4d91-59dd-4f4a-93cf-85669295c164"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("19c92597-0c31-4b78-9747-673ccbe04612"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, DateTime>(
                        lazyCtx,
                        new Guid("a25fd55e-1982-4d02-bd29-22e8f8b1c451"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, string>(
                        lazyCtx,
                        new Guid("bb043766-bd52-4e8f-b98a-6c35867db9e1"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, Guid>(
                        lazyCtx,
                        new Guid("ae35124b-5da8-4af2-a5e3-f0084cf690ad"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, string>(
                        lazyCtx,
                        new Guid("ccfbd6fd-24cf-4624-9d3e-9f47e2c6a1fa"),
                        "LicenseData",
                        null,
                        obj => obj.LicenseData,
                        (obj, val) => obj.LicenseData = val,
						obj => OnLicenseData_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, string>(
                        lazyCtx,
                        new Guid("86553c32-7f63-41f3-a3a2-28a5801935b9"),
                        "Licensee",
                        null,
                        obj => obj.Licensee,
                        (obj, val) => obj.Licensee = val,
						obj => OnLicensee_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, int?>(
                        lazyCtx,
                        new Guid("fea12587-60b9-41c2-9123-6884dc7f51c6"),
                        "LicenseSubject",
                        null,
                        obj => obj.LicenseSubject,
                        (obj, val) => obj.LicenseSubject = val,
						obj => OnLicenseSubject_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, string>(
                        lazyCtx,
                        new Guid("906bc74c-e8b8-4b51-83b3-597ca6062090"),
                        "Licensor",
                        null,
                        obj => obj.Licensor,
                        (obj, val) => obj.Licensor = val,
						obj => OnLicensor_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, string>(
                        lazyCtx,
                        new Guid("e6c5b0a0-ed58-4ba1-bd23-ed24f315620d"),
                        "Signature",
                        null,
                        obj => obj.Signature,
                        (obj, val) => obj.Signature = val,
						obj => OnSignature_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, DateTime>(
                        lazyCtx,
                        new Guid("b8d29d74-eb31-47d4-bca1-a4c4c0f93c1c"),
                        "ValidFrom",
                        null,
                        obj => obj.ValidFrom,
                        (obj, val) => obj.ValidFrom = val,
						obj => OnValidFrom_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<License, DateTime>(
                        lazyCtx,
                        new Guid("75a9ef4f-b914-47e2-ad0a-f2f63fd8c60f"),
                        "ValidThru",
                        null,
                        obj => obj.ValidThru,
                        (obj, val) => obj.ValidThru = val,
						obj => OnValidThru_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_License")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_License != null)
            {
                OnToString_License(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<License> OnToString_License;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_License")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_License != null)
            {
                OnObjectIsValid_License(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<License> OnObjectIsValid_License;

        [EventBasedMethod("OnNotifyPreSave_License")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchValidFromOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_License != null) OnNotifyPreSave_License(this);
        }
        public static event ObjectEventHandler<License> OnNotifyPreSave_License;

        [EventBasedMethod("OnNotifyPostSave_License")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_License != null) OnNotifyPostSave_License(this);
        }
        public static event ObjectEventHandler<License> OnNotifyPostSave_License;

        [EventBasedMethod("OnNotifyCreated_License")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("LicenseData");
            SetNotInitializedProperty("Licensee");
            SetNotInitializedProperty("LicenseSubject");
            SetNotInitializedProperty("Licensor");
            SetNotInitializedProperty("Signature");
            SetNotInitializedProperty("ValidThru");
            base.NotifyCreated();
            if (OnNotifyCreated_License != null) OnNotifyCreated_License(this);
        }
        public static event ObjectEventHandler<License> OnNotifyCreated_License;

        [EventBasedMethod("OnNotifyDeleting_License")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_License != null) OnNotifyDeleting_License(this);

            // FK_License_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_License_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }

            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<License> OnNotifyDeleting_License;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class LicenseProxy
            : IProxyObject, ISortKey<int>
        {
            public LicenseProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(LicenseNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(LicenseProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual string LicenseData { get; set; }

            public virtual string Licensee { get; set; }

            public virtual int? LicenseSubject { get; set; }

            public virtual string Licensor { get; set; }

            public virtual string Signature { get; set; }

            public virtual DateTime ValidFrom { get; set; }

            public virtual DateTime ValidThru { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this.Proxy.Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.LicenseData);
            binStream.Write(this.Proxy.Licensee);
            binStream.Write(this.Proxy.LicenseSubject);
            binStream.Write(this.Proxy.Licensor);
            binStream.Write(this.Proxy.Signature);
            binStream.Write(this._isValidFromSet);
            if (this._isValidFromSet) {
                binStream.Write(this.Proxy.ValidFrom);
            }
            binStream.Write(this.Proxy.ValidThru);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this.Proxy.Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this.Proxy.LicenseData = binStream.ReadString();
            this.Proxy.Licensee = binStream.ReadString();
            this.Proxy.LicenseSubject = binStream.ReadNullableInt32();
            this.Proxy.Licensor = binStream.ReadString();
            this.Proxy.Signature = binStream.ReadString();
            this._isValidFromSet = binStream.ReadBoolean();
            if (this._isValidFromSet) {
                this.Proxy.ValidFrom = binStream.ReadDateTime();
            }
            this.Proxy.ValidThru = binStream.ReadDateTime();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.LicenseData, xml, "LicenseData", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.Licensee, xml, "Licensee", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.LicenseSubject, xml, "LicenseSubject", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.Licensor, xml, "Licensor", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.Signature, xml, "Signature", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.ValidFrom, xml, "ValidFrom", "Zetbox.App.LicenseManagement");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.LicenseManagement")) XmlStreamer.ToStream(this.Proxy.ValidThru, xml, "ValidThru", "Zetbox.App.LicenseManagement");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.LicenseManagement|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.LicenseManagement|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.LicenseManagement|Description":
                this.Proxy.Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.LicenseManagement|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.LicenseManagement|LicenseData":
                this.Proxy.LicenseData = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.LicenseManagement|Licensee":
                this.Proxy.Licensee = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.LicenseManagement|LicenseSubject":
                this.Proxy.LicenseSubject = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.LicenseManagement|Licensor":
                this.Proxy.Licensor = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.LicenseManagement|Signature":
                this.Proxy.Signature = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.LicenseManagement|ValidFrom":
                // Import must have default value set
                this.Proxy.ValidFrom = XmlStreamer.ReadDateTime(xml);
                this._isValidFromSet = true;
                break;
            case "Zetbox.App.LicenseManagement|ValidThru":
                this.Proxy.ValidThru = XmlStreamer.ReadDateTime(xml);
                break;
            }
        }

        #endregion

    }
}
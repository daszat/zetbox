// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Metadefinition Object for ObjectClasses.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ObjectClass")]
    public class ObjectClassNHibernateImpl : Zetbox.App.Base.DataTypeNHibernateImpl, ObjectClass
    {
        private static readonly Guid _objectClassID = new Guid("20888dfc-1fbc-47c8-9f3c-c6a30a5c0048");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public ObjectClassNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ObjectClassNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ObjectClassProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ObjectClassNHibernateImpl(Func<IFrozenContext> lazyCtx, ObjectClassProxy proxy)
            : base(lazyCtx, proxy) // pass proxy to parent
        {
            this.Proxy = proxy;
            _isIsAbstractSet = Proxy.ID > 0;
            _isIsCreatedProgrammaticallySet = Proxy.ID > 0;
            _isIsFrozenObjectSet = Proxy.ID > 0;
            _isIsSimpleObjectSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal new readonly ObjectClassProxy Proxy;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.AccessControl> AccessControlList
        {
            get
            {
                if (_AccessControlList == null)
                {
                    _AccessControlList = new OneNRelationList<Zetbox.App.Base.AccessControl>(
                        "ObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("AccessControlList", null, null),
                        () => { this.NotifyPropertyChanged("AccessControlList", null, null); if(OnAccessControlList_PostSetter != null && IsAttached) OnAccessControlList_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Base.AccessControlNHibernateImpl.AccessControlProxy, Zetbox.App.Base.AccessControl>(
                            () => Proxy.AccessControlList,
                            p => (Zetbox.App.Base.AccessControl)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Base.AccessControlNHibernateImpl.AccessControlProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _AccessControlList;
            }
        }
    
        private OneNRelationList<Zetbox.App.Base.AccessControl> _AccessControlList;

        public Zetbox.API.Async.ZbTask TriggerFetchAccessControlListAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.AccessControl>>(this.AccessControlList);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnAccessControlList_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnAccessControlList_IsValid;

        /// <summary>
        /// Pointer auf die Basisklasse
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
        // fkBackingName=this.Proxy.BaseObjectClass; fkGuidBackingName=_fk_guid_BaseObjectClass;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=SubClasses; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.ObjectClass BaseObjectClass
        {
            get
            {
                Zetbox.App.Base.ObjectClassNHibernateImpl __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseObjectClass);

                if (OnBaseObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(__value);
                    OnBaseObjectClass_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.BaseObjectClass == null)
                {
                    SetInitializedProperty("BaseObjectClass");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseObjectClass);
                var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("BaseObjectClass");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BaseObjectClass", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("SubClasses", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("SubClasses", null, null);
                }

                if (OnBaseObjectClass_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.BaseObjectClass = null;
                }
                else
                {
                    this.Proxy.BaseObjectClass = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.SubClasses as IRelationListSync<Zetbox.App.Base.ObjectClass>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.SubClasses as IRelationListSync<Zetbox.App.Base.ObjectClass>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("BaseObjectClass", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnBaseObjectClass_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for BaseObjectClass's id, used on dehydration only</summary>
        private int? _fk_BaseObjectClass = null;

        /// <summary>ForeignKey Property for BaseObjectClass's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_BaseObjectClass
		{
			get { return BaseObjectClass != null ? BaseObjectClass.ID : (int?)null; }
			set { _fk_BaseObjectClass = value; }
		}

        /// <summary>Backing store for BaseObjectClass's guid, used on import only</summary>
        private Guid? _fk_guid_BaseObjectClass = null;

    public Zetbox.API.Async.ZbTask TriggerFetchBaseObjectClassAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(this.BaseObjectClass);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnBaseObjectClass_IsValid;

        /// <summary>
        /// Provides a code template for default methods
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string CodeTemplate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCodeTemplateOrDefault();
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.CodeTemplate != value)
                {
                    var __oldValue = Proxy.CodeTemplate;
                    var __newValue = value;
                    NotifyPropertyChanging("CodeTemplate", __oldValue, __newValue);
                    Proxy.CodeTemplate = __newValue;
                    NotifyPropertyChanged("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate_IsDirty = false;

                }
                else
                {
                    SetInitializedProperty("CodeTemplate");
                }
            }
        }
        private bool _CodeTemplate_IsDirty = false;


        private string FetchCodeTemplateOrDefault()
        {
           var __result = Proxy.CodeTemplate;
            if (_CodeTemplate_IsDirty && OnCodeTemplate_Getter != null)
            {
                var __e = new PropertyGetterEventArgs<string>(__result);
                OnCodeTemplate_Getter(this, __e);
                _CodeTemplate_IsDirty = false;
                __result = Proxy.CodeTemplate = __e.Result;
            }
            return __result;
        }

        private bool _isCodeTemplateSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, string> OnCodeTemplate_Getter;

        /// <summary>
        /// The default ViewModel to use for this ObjectClass
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
        // fkBackingName=this.Proxy.DefaultViewModelDescriptor; fkGuidBackingName=_fk_guid_DefaultViewModelDescriptor;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.ViewModelDescriptor DefaultViewModelDescriptor
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl __value = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultViewModelDescriptor);

                if (OnDefaultViewModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__value);
                    OnDefaultViewModelDescriptor_Getter(this, e);
                    __value = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultViewModelDescriptor == null)
                {
                    SetInitializedProperty("DefaultViewModelDescriptor");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultViewModelDescriptor);
                var __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("DefaultViewModelDescriptor");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultViewModelDescriptor", __oldValue, __newValue);

                if (OnDefaultViewModelDescriptor_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultViewModelDescriptor = null;
                }
                else
                {
                    this.Proxy.DefaultViewModelDescriptor = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultViewModelDescriptor", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultViewModelDescriptor_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultViewModelDescriptor's id, used on dehydration only</summary>
        private int? _fk_DefaultViewModelDescriptor = null;

        /// <summary>ForeignKey Property for DefaultViewModelDescriptor's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultViewModelDescriptor
		{
			get { return DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null; }
			set { _fk_DefaultViewModelDescriptor = value; }
		}

        /// <summary>Backing store for DefaultViewModelDescriptor's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultViewModelDescriptor = null;

    public Zetbox.API.Async.ZbTask TriggerFetchDefaultViewModelDescriptorAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ViewModelDescriptor>(this.DefaultViewModelDescriptor);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnDefaultViewModelDescriptor_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration> FilterConfigurations
        {
            get
            {
                if (_FilterConfigurations == null)
                {
                    _FilterConfigurations = new OneNRelationList<Zetbox.App.GUI.ObjectClassFilterConfiguration>(
                        "ObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("FilterConfigurations", null, null),
                        () => { this.NotifyPropertyChanged("FilterConfigurations", null, null); if(OnFilterConfigurations_PostSetter != null && IsAttached) OnFilterConfigurations_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.GUI.ObjectClassFilterConfigurationNHibernateImpl.ObjectClassFilterConfigurationProxy, Zetbox.App.GUI.ObjectClassFilterConfiguration>(
                            () => Proxy.FilterConfigurations,
                            p => (Zetbox.App.GUI.ObjectClassFilterConfiguration)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.GUI.ObjectClassFilterConfigurationNHibernateImpl.ObjectClassFilterConfigurationProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _FilterConfigurations;
            }
        }
    
        private OneNRelationList<Zetbox.App.GUI.ObjectClassFilterConfiguration> _FilterConfigurations;

        public Zetbox.API.Async.ZbTask TriggerFetchFilterConfigurationsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration>>(this.FilterConfigurations);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnFilterConfigurations_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnFilterConfigurations_IsValid;

        /// <summary>
        /// Class is abstract
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsAbstract
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsAbstractOrDefault();
                if (OnIsAbstract_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAbstract_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsAbstractSet = true;
                if (Proxy.IsAbstract != value)
                {
                    var __oldValue = Proxy.IsAbstract;
                    var __newValue = value;
                    if (OnIsAbstract_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAbstract", __oldValue, __newValue);
                    Proxy.IsAbstract = __newValue;
                    NotifyPropertyChanged("IsAbstract", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsAbstract_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsAbstract");
                }
            }
        }


        private bool FetchIsAbstractOrDefault()
        {
            var __result = Proxy.IsAbstract;
                if (!_isIsAbstractSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("e9d1402e-3580-4084-8836-c44844683191"));
                    if (__p != null) {
                        _isIsAbstractSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsAbstract = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.ObjectClass.IsAbstract'");
                    }
                }
            return __result;
        }

        private bool _isIsAbstractSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsAbstract_IsValid;

        /// <summary>
        /// Indicated that the type will be created programmatically
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsCreatedProgrammatically
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsCreatedProgrammaticallyOrDefault();
                if (OnIsCreatedProgrammatically_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsCreatedProgrammatically_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsCreatedProgrammaticallySet = true;
                if (Proxy.IsCreatedProgrammatically != value)
                {
                    var __oldValue = Proxy.IsCreatedProgrammatically;
                    var __newValue = value;
                    if (OnIsCreatedProgrammatically_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsCreatedProgrammatically_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsCreatedProgrammatically", __oldValue, __newValue);
                    Proxy.IsCreatedProgrammatically = __newValue;
                    NotifyPropertyChanged("IsCreatedProgrammatically", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsCreatedProgrammatically_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsCreatedProgrammatically_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsCreatedProgrammatically");
                }
            }
        }


        private bool FetchIsCreatedProgrammaticallyOrDefault()
        {
            var __result = Proxy.IsCreatedProgrammatically;
                if (!_isIsCreatedProgrammaticallySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("176073eb-d188-40ee-9ae6-860c532da0bd"));
                    if (__p != null) {
                        _isIsCreatedProgrammaticallySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsCreatedProgrammatically = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.ObjectClass.IsCreatedProgrammatically'");
                    }
                }
            return __result;
        }

        private bool _isIsCreatedProgrammaticallySet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsCreatedProgrammatically_IsValid;

        /// <summary>
        /// if true then all Instances appear in FozenContext.
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsFrozenObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsFrozenObjectOrDefault();
                if (OnIsFrozenObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsFrozenObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsFrozenObjectSet = true;
                if (Proxy.IsFrozenObject != value)
                {
                    var __oldValue = Proxy.IsFrozenObject;
                    var __newValue = value;
                    if (OnIsFrozenObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsFrozenObject", __oldValue, __newValue);
                    Proxy.IsFrozenObject = __newValue;
                    NotifyPropertyChanged("IsFrozenObject", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsFrozenObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsFrozenObject");
                }
            }
        }


        private bool FetchIsFrozenObjectOrDefault()
        {
            var __result = Proxy.IsFrozenObject;
                if (!_isIsFrozenObjectSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"));
                    if (__p != null) {
                        _isIsFrozenObjectSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsFrozenObject = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.ObjectClass.IsFrozenObject'");
                    }
                }
            return __result;
        }

        private bool _isIsFrozenObjectSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsFrozenObject_IsValid;

        /// <summary>
        /// Setting this to true marks the instances of this class as &amp;quot;simple.&amp;quot; At first this will only mean that they&apos;ll be displayed inline.
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsSimpleObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsSimpleObjectOrDefault();
                if (OnIsSimpleObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsSimpleObject_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsSimpleObjectSet = true;
                if (Proxy.IsSimpleObject != value)
                {
                    var __oldValue = Proxy.IsSimpleObject;
                    var __newValue = value;
                    if (OnIsSimpleObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsSimpleObject", __oldValue, __newValue);
                    Proxy.IsSimpleObject = __newValue;
                    NotifyPropertyChanged("IsSimpleObject", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsSimpleObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsSimpleObject");
                }
            }
        }


        private bool FetchIsSimpleObjectOrDefault()
        {
            var __result = Proxy.IsSimpleObject;
                if (!_isIsSimpleObjectSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"));
                    if (__p != null) {
                        _isIsSimpleObjectSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsSimpleObject = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.ObjectClass.IsSimpleObject'");
                    }
                }
            return __result;
        }

        private bool _isIsSimpleObjectSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsSimpleObject_IsValid;

        /// <summary>
        /// Liste der vererbten Klassen
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClasses == null)
                {
                    _SubClasses = new OneNRelationList<Zetbox.App.Base.ObjectClass>(
                        "BaseObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("SubClasses", null, null),
                        () => { this.NotifyPropertyChanged("SubClasses", null, null); if(OnSubClasses_PostSetter != null && IsAttached) OnSubClasses_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy, Zetbox.App.Base.ObjectClass>(
                            () => Proxy.SubClasses,
                            p => (Zetbox.App.Base.ObjectClass)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _SubClasses;
            }
        }
    
        private OneNRelationList<Zetbox.App.Base.ObjectClass> _SubClasses;

        public Zetbox.API.Async.ZbTask TriggerFetchSubClassesAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.ObjectClass>>(this.SubClasses);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnSubClasses_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnSubClasses_IsValid;

        /// <summary>
        /// Kind of table mapping. Only valid on base classes. Default is TPT.
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Zetbox.App.Base.TableMapping? TableMapping
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TableMapping;
                if (OnTableMapping_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.TableMapping?>(__result);
                    OnTableMapping_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TableMapping != value)
                {
                    var __oldValue = Proxy.TableMapping;
                    var __newValue = value;
                    if (OnTableMapping_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.TableMapping?>(__oldValue, __newValue);
                        OnTableMapping_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableMapping", __oldValue, __newValue);
                    Proxy.TableMapping = __newValue;
                    NotifyPropertyChanged("TableMapping", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTableMapping_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.TableMapping?>(__oldValue, __newValue);
                        OnTableMapping_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TableMapping");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnTableMapping_IsValid;

        /// <summary>
        /// Tabellenname in der Datenbank
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string TableName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.TableName;
                if (OnTableName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTableName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.TableName != value)
                {
                    var __oldValue = Proxy.TableName;
                    var __newValue = value;
                    if (OnTableName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableName", __oldValue, __newValue);
                    Proxy.TableName = __newValue;
                    NotifyPropertyChanged("TableName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTableName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TableName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnTableName_IsValid;

        /// <summary>
        /// Property wizard
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAddProperty_ObjectClass")]
        public override Zetbox.App.Base.Property AddProperty()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Property>();
            if (OnAddProperty_ObjectClass != null)
            {
                OnAddProperty_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.AddProperty();
            }
            return e.Result;
        }
        public static event AddProperty_Handler<ObjectClass> OnAddProperty_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnAddProperty_ObjectClass_CanExec;

        [EventBasedMethod("OnAddProperty_ObjectClass_CanExec")]
        public override bool AddPropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAddProperty_ObjectClass_CanExec != null)
				{
					OnAddProperty_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.AddPropertyCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnAddProperty_ObjectClass_CanExecReason;

        [EventBasedMethod("OnAddProperty_ObjectClass_CanExecReason")]
        public override string AddPropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAddProperty_ObjectClass_CanExecReason != null)
				{
					OnAddProperty_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.AddPropertyCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateMethod_ObjectClass")]
        public virtual Zetbox.App.Base.Method CreateMethod()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Method>();
            if (OnCreateMethod_ObjectClass != null)
            {
                OnCreateMethod_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateMethod");
            }
            return e.Result;
        }
        public delegate void CreateMethod_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Method> ret);
        public static event CreateMethod_Handler<ObjectClass> OnCreateMethod_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExec")]
        public virtual bool CreateMethodCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateMethod_ObjectClass_CanExec != null)
				{
					OnCreateMethod_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExecReason")]
        public virtual string CreateMethodCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateMethod_ObjectClass_CanExecReason != null)
				{
					OnCreateMethod_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements the &quot;Create new Relation&quot; use case
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateRelation_ObjectClass")]
        public virtual Zetbox.App.Base.Relation CreateRelation()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Relation>();
            if (OnCreateRelation_ObjectClass != null)
            {
                OnCreateRelation_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateRelation");
            }
            return e.Result;
        }
        public delegate void CreateRelation_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Relation> ret);
        public static event CreateRelation_Handler<ObjectClass> OnCreateRelation_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExec")]
        public virtual bool CreateRelationCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateRelation_ObjectClass_CanExec != null)
				{
					OnCreateRelation_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExecReason")]
        public virtual string CreateRelationCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateRelation_ObjectClass_CanExecReason != null)
				{
					OnCreateRelation_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_ObjectClass")]
        public override System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_ObjectClass != null)
            {
                OnGetDataType_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
        public static event GetDataType_Handler<ObjectClass> OnGetDataType_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExec")]
        public override bool GetDataTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataType_ObjectClass_CanExec != null)
				{
					OnGetDataType_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExecReason")]
        public override string GetDataTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataType_ObjectClass_CanExecReason != null)
				{
					OnGetDataType_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_ObjectClass")]
        public override string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_ObjectClass != null)
            {
                OnGetDataTypeString_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
        public static event GetDataTypeString_Handler<ObjectClass> OnGetDataTypeString_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExec")]
        public override bool GetDataTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataTypeString_ObjectClass_CanExec != null)
				{
					OnGetDataTypeString_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExecReason")]
        public override string GetDataTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataTypeString_ObjectClass_CanExecReason != null)
				{
					OnGetDataTypeString_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetInheritedMethods_ObjectClass")]
        public virtual IEnumerable<Zetbox.App.Base.Method> GetInheritedMethods()
        {
            var e = new MethodReturnEventArgs<IEnumerable<Zetbox.App.Base.Method>>();
            if (OnGetInheritedMethods_ObjectClass != null)
            {
                OnGetInheritedMethods_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetInheritedMethods");
            }
            return e.Result;
        }
        public delegate void GetInheritedMethods_Handler<T>(T obj, MethodReturnEventArgs<IEnumerable<Zetbox.App.Base.Method>> ret);
        public static event GetInheritedMethods_Handler<ObjectClass> OnGetInheritedMethods_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExec;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExec")]
        public virtual bool GetInheritedMethodsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetInheritedMethods_ObjectClass_CanExec != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExecReason")]
        public virtual string GetInheritedMethodsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetInheritedMethods_ObjectClass_CanExecReason != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ObjectClass")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ObjectClass != null)
            {
                OnGetName_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ObjectClass> OnGetName_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExec;

        [EventBasedMethod("OnGetName_ObjectClass_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ObjectClass_CanExec != null)
				{
					OnGetName_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetName_ObjectClass_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ObjectClass_CanExecReason != null)
				{
					OnGetName_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnImplementInterfaces_ObjectClass")]
        public override void ImplementInterfaces()
        {
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_ObjectClass != null)
            {
                OnImplementInterfaces_ObjectClass(this);
            }
            else
            {
                base.ImplementInterfaces();
            }
        }
        public static event ImplementInterfaces_Handler<ObjectClass> OnImplementInterfaces_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExec;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExec")]
        public override bool ImplementInterfacesCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnImplementInterfaces_ObjectClass_CanExec != null)
				{
					OnImplementInterfaces_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExecReason;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExecReason")]
        public override string ImplementInterfacesCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnImplementInterfaces_ObjectClass_CanExecReason != null)
				{
					OnImplementInterfaces_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Replaces all references of the given object with the target object. Does not change any other properties and will not delete the source object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnReplaceObject_ObjectClass")]
        public virtual void ReplaceObject(Zetbox.API.IDataObject target, Zetbox.API.IDataObject source)
        {
            // base.ReplaceObject();
            if (OnReplaceObject_ObjectClass != null)
            {
                OnReplaceObject_ObjectClass(this, target, source);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method ObjectClass.ReplaceObject");
            }
        }
        public delegate void ReplaceObject_Handler<T>(T obj, Zetbox.API.IDataObject target, Zetbox.API.IDataObject source);
        public static event ReplaceObject_Handler<ObjectClass> OnReplaceObject_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnReplaceObject_ObjectClass_CanExec;

        [EventBasedMethod("OnReplaceObject_ObjectClass_CanExec")]
        public virtual bool ReplaceObjectCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnReplaceObject_ObjectClass_CanExec != null)
				{
					OnReplaceObject_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnReplaceObject_ObjectClass_CanExecReason;

        [EventBasedMethod("OnReplaceObject_ObjectClass_CanExecReason")]
        public virtual string ReplaceObjectCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnReplaceObject_ObjectClass_CanExecReason != null)
				{
					OnReplaceObject_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectClass);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectClass)obj;
            var otherImpl = (ObjectClassNHibernateImpl)obj;
            var me = (ObjectClass)this;

            me.IsAbstract = other.IsAbstract;
            me.IsCreatedProgrammatically = other.IsCreatedProgrammatically;
            me.IsFrozenObject = other.IsFrozenObject;
            me.IsSimpleObject = other.IsSimpleObject;
            me.TableMapping = other.TableMapping;
            me.TableName = other.TableName;
            this._fk_BaseObjectClass = otherImpl._fk_BaseObjectClass;
            this._fk_DefaultViewModelDescriptor = otherImpl._fk_DefaultViewModelDescriptor;
        }
        public override void SetNew()
        {
            base.SetNew();
            _CodeTemplate_IsDirty = true;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "BaseObjectClass":
                    {
                        var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseObjectClass);
                        var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)parentObj;
                        NotifyPropertyChanging("BaseObjectClass", __oldValue, __newValue);
                        this.Proxy.BaseObjectClass = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("BaseObjectClass", __oldValue, __newValue);
                    }
                    break;
                case "DefaultViewModelDescriptor":
                    {
                        var __oldValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultViewModelDescriptor);
                        var __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultViewModelDescriptor", __oldValue, __newValue);
                        this.Proxy.DefaultViewModelDescriptor = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultViewModelDescriptor", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "BaseObjectClass":
                case "DefaultViewModelDescriptor":
                case "IsAbstract":
                case "IsCreatedProgrammatically":
                case "IsFrozenObject":
                case "IsSimpleObject":
                case "TableMapping":
                case "TableName":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CodeTemplate":
                    NotifyPropertyChanging(property, null, null);
                    _CodeTemplate_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "AccessControlList":
                case "FilterConfigurations":
                case "SubClasses":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "AccessControlList":
                return TriggerFetchAccessControlListAsync();
            case "BaseObjectClass":
                return TriggerFetchBaseObjectClassAsync();
            case "DefaultViewModelDescriptor":
                return TriggerFetchDefaultViewModelDescriptorAsync();
            case "FilterConfigurations":
                return TriggerFetchFilterConfigurationsAsync();
            case "SubClasses":
                return TriggerFetchSubClassesAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_BaseObjectClass.HasValue)
                this.BaseObjectClass = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_BaseObjectClass.Value));
            else
            if (_fk_BaseObjectClass.HasValue)
                this.BaseObjectClass = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_BaseObjectClass.Value));
            else
                this.BaseObjectClass = null;

            if (_fk_guid_DefaultViewModelDescriptor.HasValue)
                this.DefaultViewModelDescriptor = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_DefaultViewModelDescriptor.Value));
            else
            if (_fk_DefaultViewModelDescriptor.HasValue)
                this.DefaultViewModelDescriptor = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_DefaultViewModelDescriptor.Value));
            else
                this.DefaultViewModelDescriptor = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<ObjectClass, ICollection<Zetbox.App.Base.AccessControl>>(
                        lazyCtx,
                        new Guid("4514093c-0a1f-4644-b4a6-3389f1ca7aa8"),
                        "AccessControlList",
                        null,
                        obj => obj.AccessControlList,
                        null, // lists are read-only properties
                        obj => OnAccessControlList_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("ad060d41-bc7a-41b8-a3e3-ec9302c8c714"),
                        "BaseObjectClass",
                        null,
                        obj => obj.BaseObjectClass,
                        (obj, val) => obj.BaseObjectClass = val,
						obj => OnBaseObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, string>(
                        lazyCtx,
                        new Guid("7afdb672-f364-4b05-ad5d-ea6d59dc3553"),
                        "CodeTemplate",
                        null,
                        obj => obj.CodeTemplate,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, Zetbox.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("11adedb9-d32a-4da9-b986-0534e65df760"),
                        "DefaultViewModelDescriptor",
                        null,
                        obj => obj.DefaultViewModelDescriptor,
                        (obj, val) => obj.DefaultViewModelDescriptor = val,
						obj => OnDefaultViewModelDescriptor_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<ObjectClass, ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration>>(
                        lazyCtx,
                        new Guid("bd526c1f-a6ac-40b6-8f81-66aaf553129f"),
                        "FilterConfigurations",
                        null,
                        obj => obj.FilterConfigurations,
                        null, // lists are read-only properties
                        obj => OnFilterConfigurations_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("e9d1402e-3580-4084-8836-c44844683191"),
                        "IsAbstract",
                        null,
                        obj => obj.IsAbstract,
                        (obj, val) => obj.IsAbstract = val,
						obj => OnIsAbstract_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("176073eb-d188-40ee-9ae6-860c532da0bd"),
                        "IsCreatedProgrammatically",
                        null,
                        obj => obj.IsCreatedProgrammatically,
                        (obj, val) => obj.IsCreatedProgrammatically = val,
						obj => OnIsCreatedProgrammatically_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"),
                        "IsFrozenObject",
                        null,
                        obj => obj.IsFrozenObject,
                        (obj, val) => obj.IsFrozenObject = val,
						obj => OnIsFrozenObject_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"),
                        "IsSimpleObject",
                        null,
                        obj => obj.IsSimpleObject,
                        (obj, val) => obj.IsSimpleObject = val,
						obj => OnIsSimpleObject_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<ObjectClass, ICollection<Zetbox.App.Base.ObjectClass>>(
                        lazyCtx,
                        new Guid("0914de6e-966c-46fc-9359-e4da6c3608b1"),
                        "SubClasses",
                        null,
                        obj => obj.SubClasses,
                        null, // lists are read-only properties
                        obj => OnSubClasses_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, Zetbox.App.Base.TableMapping?>(
                        lazyCtx,
                        new Guid("8002bbe3-68b6-475b-b929-398744cc2398"),
                        "TableMapping",
                        null,
                        obj => obj.TableMapping,
                        (obj, val) => obj.TableMapping = val,
						obj => OnTableMapping_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectClass, string>(
                        lazyCtx,
                        new Guid("2a5e5111-199c-4dce-8369-ce35ee741568"),
                        "TableName",
                        null,
                        obj => obj.TableName,
                        (obj, val) => obj.TableName = val,
						obj => OnTableName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ObjectClass")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ObjectClass> OnToString_ObjectClass;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ObjectClass")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ObjectClass != null)
            {
                OnObjectIsValid_ObjectClass(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ObjectClass> OnObjectIsValid_ObjectClass;

        [EventBasedMethod("OnNotifyPreSave_ObjectClass")]
        public override void NotifyPreSave()
        {
            FetchCodeTemplateOrDefault();
            FetchIsAbstractOrDefault();
            FetchIsCreatedProgrammaticallyOrDefault();
            FetchIsFrozenObjectOrDefault();
            FetchIsSimpleObjectOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_ObjectClass != null) OnNotifyPreSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyPreSave_ObjectClass;

        [EventBasedMethod("OnNotifyPostSave_ObjectClass")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ObjectClass != null) OnNotifyPostSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyPostSave_ObjectClass;

        [EventBasedMethod("OnNotifyCreated_ObjectClass")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("BaseObjectClass");
            SetNotInitializedProperty("DefaultViewModelDescriptor");
            SetNotInitializedProperty("TableMapping");
            SetNotInitializedProperty("TableName");
            _CodeTemplate_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_ObjectClass != null) OnNotifyCreated_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyCreated_ObjectClass;

        [EventBasedMethod("OnNotifyDeleting_ObjectClass")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ObjectClass != null) OnNotifyDeleting_ObjectClass(this);

            // FK_BaseObjectClass_has_SubClasses ZeroOrMore
            foreach(NHibernatePersistenceObject x in SubClasses) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // should fetch && remember parent for CalculatedReference_references_ReferencedClass_RelationEntry
            // should fetch && remember parent for LstCfg_has_Type_RelationEntry
            // FK_ObjectClass_has_AccessControlList ZeroOrMore
            foreach(NHibernatePersistenceObject x in AccessControlList) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_ObjectClass_Has_FilterConfigurations ZeroOrMore
            foreach(NHibernatePersistenceObject x in FilterConfigurations) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // should fetch && remember parent for ObjectParameter_has_ObjectClass_RelationEntry
            // should fetch && remember parent for ObjRefPlaceholderProp_ofType_ReferencedClass_RelationEntry
            // FK_Presentable_has_DefaultViewModelDescriptor
            if (DefaultViewModelDescriptor != null) {
                ((NHibernatePersistenceObject)DefaultViewModelDescriptor).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)DefaultViewModelDescriptor);
            }
            // should fetch && remember parent for RelationEnd_has_Type_RelationEntry
            // should fetch && remember parent for SearchScreen_of_Type_RelationEntry
            // should fetch && remember children for SourceTable_created_ObjectClass_RelationEntry

            AccessControlList.Clear();
            FilterConfigurations.Clear();
            SubClasses.Clear();
            BaseObjectClass = null;
            DefaultViewModelDescriptor = null;
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyDeleting_ObjectClass;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class ObjectClassProxy
            : Zetbox.App.Base.DataTypeNHibernateImpl.DataTypeProxy
        {
            public ObjectClassProxy()
            {
                AccessControlList = new Collection<Zetbox.App.Base.AccessControlNHibernateImpl.AccessControlProxy>();
                FilterConfigurations = new Collection<Zetbox.App.GUI.ObjectClassFilterConfigurationNHibernateImpl.ObjectClassFilterConfigurationProxy>();
                SubClasses = new Collection<Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy>();
            }

            public override Type ZetboxWrapper { get { return typeof(ObjectClassNHibernateImpl); } }

            public override Type ZetboxProxy { get { return typeof(ObjectClassProxy); } }

            public virtual ICollection<Zetbox.App.Base.AccessControlNHibernateImpl.AccessControlProxy> AccessControlList { get; set; }

            public virtual Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy BaseObjectClass { get; set; }

            public virtual string CodeTemplate { get; set; }

            public virtual Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl.ViewModelDescriptorProxy DefaultViewModelDescriptor { get; set; }

            public virtual ICollection<Zetbox.App.GUI.ObjectClassFilterConfigurationNHibernateImpl.ObjectClassFilterConfigurationProxy> FilterConfigurations { get; set; }

            public virtual bool IsAbstract { get; set; }

            public virtual bool IsCreatedProgrammatically { get; set; }

            public virtual bool IsFrozenObject { get; set; }

            public virtual bool IsSimpleObject { get; set; }

            public virtual ICollection<Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy> SubClasses { get; set; }

            public virtual Zetbox.App.Base.TableMapping? TableMapping { get; set; }

            public virtual string TableName { get; set; }

        }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.BaseObjectClass != null ? OurContext.GetIdFromProxy(this.Proxy.BaseObjectClass) : (int?)null);
            binStream.Write(this.Proxy.CodeTemplate);
            binStream.Write(this.Proxy.DefaultViewModelDescriptor != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultViewModelDescriptor) : (int?)null);
            binStream.Write(this._isIsAbstractSet);
            if (this._isIsAbstractSet) {
                binStream.Write(this.Proxy.IsAbstract);
            }
            binStream.Write(this._isIsCreatedProgrammaticallySet);
            if (this._isIsCreatedProgrammaticallySet) {
                binStream.Write(this.Proxy.IsCreatedProgrammatically);
            }
            binStream.Write(this._isIsFrozenObjectSet);
            if (this._isIsFrozenObjectSet) {
                binStream.Write(this.Proxy.IsFrozenObject);
            }
            binStream.Write(this._isIsSimpleObjectSet);
            if (this._isIsSimpleObjectSet) {
                binStream.Write(this.Proxy.IsSimpleObject);
            }
            binStream.Write((int?)Proxy.TableMapping);
            binStream.Write(this.Proxy.TableName);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_BaseObjectClass);
            this.Proxy.CodeTemplate = binStream.ReadString();
            binStream.Read(out this._fk_DefaultViewModelDescriptor);
            this._isIsAbstractSet = binStream.ReadBoolean();
            if (this._isIsAbstractSet) {
                this.Proxy.IsAbstract = binStream.ReadBoolean();
            }
            this._isIsCreatedProgrammaticallySet = binStream.ReadBoolean();
            if (this._isIsCreatedProgrammaticallySet) {
                this.Proxy.IsCreatedProgrammatically = binStream.ReadBoolean();
            }
            this._isIsFrozenObjectSet = binStream.ReadBoolean();
            if (this._isIsFrozenObjectSet) {
                this.Proxy.IsFrozenObject = binStream.ReadBoolean();
            }
            this._isIsSimpleObjectSet = binStream.ReadBoolean();
            if (this._isIsSimpleObjectSet) {
                this.Proxy.IsSimpleObject = binStream.ReadBoolean();
            }
            Proxy.TableMapping = (Zetbox.App.Base.TableMapping?)binStream.ReadNullableInt32();
            this.Proxy.TableName = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.BaseObjectClass != null ? this.Proxy.BaseObjectClass.ExportGuid : (Guid?)null, xml, "BaseObjectClass", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.CodeTemplate, xml, "CodeTemplate", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultViewModelDescriptor != null ? this.Proxy.DefaultViewModelDescriptor.ExportGuid : (Guid?)null, xml, "DefaultViewModelDescriptor", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.IsAbstract, xml, "IsAbstract", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.IsCreatedProgrammatically, xml, "IsCreatedProgrammatically", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.IsFrozenObject, xml, "IsFrozenObject", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.IsSimpleObject, xml, "IsSimpleObject", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)Proxy.TableMapping, xml, "TableMapping", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.TableName, xml, "TableName", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|BaseObjectClass":
                this._fk_guid_BaseObjectClass = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|CodeTemplate":
                this.Proxy.CodeTemplate = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|DefaultViewModelDescriptor":
                this._fk_guid_DefaultViewModelDescriptor = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|IsAbstract":
                // Import must have default value set
                this.Proxy.IsAbstract = XmlStreamer.ReadBoolean(xml);
                this._isIsAbstractSet = true;
                break;
            case "Zetbox.App.Base|IsCreatedProgrammatically":
                // Import must have default value set
                this.Proxy.IsCreatedProgrammatically = XmlStreamer.ReadBoolean(xml);
                this._isIsCreatedProgrammaticallySet = true;
                break;
            case "Zetbox.App.Base|IsFrozenObject":
                // Import must have default value set
                this.Proxy.IsFrozenObject = XmlStreamer.ReadBoolean(xml);
                this._isIsFrozenObjectSet = true;
                break;
            case "Zetbox.App.GUI|IsSimpleObject":
                // Import must have default value set
                this.Proxy.IsSimpleObject = XmlStreamer.ReadBoolean(xml);
                this._isIsSimpleObjectSet = true;
                break;
            case "Zetbox.App.Base|TableMapping":
                Proxy.TableMapping = (Zetbox.App.Base.TableMapping?)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.Base|TableName":
                this.Proxy.TableName = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
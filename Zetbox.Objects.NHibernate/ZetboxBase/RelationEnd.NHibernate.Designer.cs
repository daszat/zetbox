// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Describes one end of a relation between two object classes
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("RelationEnd")]
    public class RelationEndNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, RelationEnd, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("07817322-d4b9-4dd8-8464-bcb6745fef34");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public RelationEndNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public RelationEndNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new RelationEndProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public RelationEndNHibernateImpl(Func<IFrozenContext> lazyCtx, RelationEndProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
            _isHasPersistentOrderSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly RelationEndProxy Proxy;

        /// <summary>
        /// The Relation using this RelationEnd as A
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for AParent
        // fkBackingName=this.Proxy.AParent; fkGuidBackingName=_fk_guid_AParent;
        // referencedInterface=Zetbox.App.Base.Relation; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=A; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Relation AParent
        {
            get
            {
                Zetbox.App.Base.RelationNHibernateImpl __value = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.AParent);

                if (OnAParent_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Relation>(__value);
                    OnAParent_Getter(this, e);
                    __value = (Zetbox.App.Base.RelationNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.AParent == null)
                {
                    SetInitializedProperty("AParent");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.AParent);
                var __newValue = (Zetbox.App.Base.RelationNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("AParent");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("AParent", __oldValue, __newValue);

                if (OnAParent_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Relation>(__oldValue, __newValue);
                    OnAParent_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.RelationNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.AParent = null;
                }
                else
                {
                    this.Proxy.AParent = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.A = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.A = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("AParent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnAParent_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Relation>(__oldValue, __newValue);
                    OnAParent_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for AParent's id, used on dehydration only</summary>
        private int? _fk_AParent = null;

        /// <summary>ForeignKey Property for AParent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_AParent
		{
			get { return AParent != null ? AParent.ID : (int?)null; }
			set { _fk_AParent = value; }
		}

        /// <summary>Backing store for AParent's guid, used on import only</summary>
        private Guid? _fk_guid_AParent = null;

    public Zetbox.API.Async.ZbTask TriggerFetchAParentAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Relation>(this.AParent);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for AParent
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnAParent_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnAParent_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnAParent_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnAParent_IsValid;

        /// <summary>
        /// The Relation using this RelationEnd as B
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BParent
        // fkBackingName=this.Proxy.BParent; fkGuidBackingName=_fk_guid_BParent;
        // referencedInterface=Zetbox.App.Base.Relation; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=B; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Relation BParent
        {
            get
            {
                Zetbox.App.Base.RelationNHibernateImpl __value = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BParent);

                if (OnBParent_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Relation>(__value);
                    OnBParent_Getter(this, e);
                    __value = (Zetbox.App.Base.RelationNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.BParent == null)
                {
                    SetInitializedProperty("BParent");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.RelationNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BParent);
                var __newValue = (Zetbox.App.Base.RelationNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("BParent");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BParent", __oldValue, __newValue);

                if (OnBParent_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Relation>(__oldValue, __newValue);
                    OnBParent_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.RelationNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.BParent = null;
                }
                else
                {
                    this.Proxy.BParent = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.B = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.B = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("BParent", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnBParent_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Relation>(__oldValue, __newValue);
                    OnBParent_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for BParent's id, used on dehydration only</summary>
        private int? _fk_BParent = null;

        /// <summary>ForeignKey Property for BParent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_BParent
		{
			get { return BParent != null ? BParent.ID : (int?)null; }
			set { _fk_BParent = value; }
		}

        /// <summary>Backing store for BParent's guid, used on import only</summary>
        private Guid? _fk_guid_BParent = null;

    public Zetbox.API.Async.ZbTask TriggerFetchBParentAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Relation>(this.BParent);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BParent
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnBParent_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnBParent_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnBParent_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnBParent_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("7bd41ad1-05c8-4822-a620-0883eb62516d"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.RelationEnd.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("ea92fd80-01b6-49b9-8426-77257b2bd37b"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.RelationEnd.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("4bbe4a44-dc99-4455-9c03-ae78903fcee2"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.RelationEnd.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnExportGuid_IsValid;

        /// <summary>
        /// Is true, if this RelationEnd persists the order of its elements
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool HasPersistentOrder
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchHasPersistentOrderOrDefault();
                if (OnHasPersistentOrder_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnHasPersistentOrder_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isHasPersistentOrderSet = true;
                if (Proxy.HasPersistentOrder != value)
                {
                    var __oldValue = Proxy.HasPersistentOrder;
                    var __newValue = value;
                    if (OnHasPersistentOrder_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnHasPersistentOrder_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("HasPersistentOrder", __oldValue, __newValue);
                    Proxy.HasPersistentOrder = __newValue;
                    NotifyPropertyChanged("HasPersistentOrder", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnHasPersistentOrder_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnHasPersistentOrder_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("HasPersistentOrder");
                }
            }
        }


        private bool FetchHasPersistentOrderOrDefault()
        {
            var __result = Proxy.HasPersistentOrder;
                if (!_isHasPersistentOrderSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("edd8d122-7b58-4bbb-bf00-33caa8b69cc2"));
                    if (__p != null) {
                        _isHasPersistentOrderSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.HasPersistentOrder = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.RelationEnd.HasPersistentOrder'");
                    }
                }
            return __result;
        }

        private bool _isHasPersistentOrderSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, bool> OnHasPersistentOrder_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, bool> OnHasPersistentOrder_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, bool> OnHasPersistentOrder_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnHasPersistentOrder_IsValid;

        /// <summary>
        /// Specifies how many instances may occur on this end of the relation.
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Zetbox.App.Base.Multiplicity Multiplicity
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Multiplicity;
                if (OnMultiplicity_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.Multiplicity>(__result);
                    OnMultiplicity_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Multiplicity != value)
                {
                    var __oldValue = Proxy.Multiplicity;
                    var __newValue = value;
                    if (OnMultiplicity_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Multiplicity>(__oldValue, __newValue);
                        OnMultiplicity_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Multiplicity", __oldValue, __newValue);
                    Proxy.Multiplicity = __newValue;
                    NotifyPropertyChanged("Multiplicity", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnMultiplicity_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Multiplicity>(__oldValue, __newValue);
                        OnMultiplicity_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Multiplicity");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Multiplicity> OnMultiplicity_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Multiplicity> OnMultiplicity_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Multiplicity> OnMultiplicity_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnMultiplicity_IsValid;

        /// <summary>
        /// The ORP to navigate FROM this end of the relation. MAY be null.
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Navigator
        // fkBackingName=this.Proxy.Navigator; fkGuidBackingName=_fk_guid_Navigator;
        // referencedInterface=Zetbox.App.Base.ObjectReferenceProperty; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=RelationEnd; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.ObjectReferenceProperty Navigator
        {
            get
            {
                Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl __value = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Navigator);

                if (OnNavigator_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectReferenceProperty>(__value);
                    OnNavigator_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Navigator == null)
                {
                    SetInitializedProperty("Navigator");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Navigator);
                var __newValue = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Navigator");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Navigator", __oldValue, __newValue);

                if (OnNavigator_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectReferenceProperty>(__oldValue, __newValue);
                    OnNavigator_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Navigator = null;
                }
                else
                {
                    this.Proxy.Navigator = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.RelationEnd = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.RelationEnd = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Navigator", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnNavigator_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectReferenceProperty>(__oldValue, __newValue);
                    OnNavigator_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Navigator's id, used on dehydration only</summary>
        private int? _fk_Navigator = null;

        /// <summary>ForeignKey Property for Navigator's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Navigator
		{
			get { return Navigator != null ? Navigator.ID : (int?)null; }
			set { _fk_Navigator = value; }
		}

        /// <summary>Backing store for Navigator's guid, used on import only</summary>
        private Guid? _fk_guid_Navigator = null;

    public Zetbox.API.Async.ZbTask TriggerFetchNavigatorAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectReferenceProperty>(this.Navigator);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Navigator
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectReferenceProperty> OnNavigator_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectReferenceProperty> OnNavigator_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectReferenceProperty> OnNavigator_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnNavigator_IsValid;

        /// <summary>
        /// the parent relation
        /// </summary>
        // calculated  property
        // BEGIN Zetbox.Generator.Templates.Properties.CalculatedProperty
        public Zetbox.App.Base.Relation Parent
        {
            get
            {
                if (OnParent_Getter == null)
                {
                    throw new NotImplementedException("No handler registered on calculated property Zetbox.App.Base.RelationEnd.Parent");
                }
                if (_Parent_IsDirty)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Relation>(default(Zetbox.App.Base.Relation));
                    OnParent_Getter(this, e);
                    Parent_Store = e.Result;
                    _Parent_IsDirty = false;
                }
                return Parent_Store;
            }
        }
        Zetbox.App.Base.Relation Parent_Store;
        private bool _Parent_IsDirty = true; // Always true as it will not be stored in the database (yet)
        // END Zetbox.Generator.Templates.Properties.CalculatedProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.Relation> OnParent_Getter;

        /// <summary>
        /// This end&amp;apos;s role name in the relation
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string RoleName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.RoleName;
                if (OnRoleName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnRoleName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.RoleName != value)
                {
                    var __oldValue = Proxy.RoleName;
                    var __newValue = value;
                    if (OnRoleName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnRoleName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("RoleName", __oldValue, __newValue);
                    Proxy.RoleName = __newValue;
                    NotifyPropertyChanged("RoleName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnRoleName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnRoleName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("RoleName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, string> OnRoleName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, string> OnRoleName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, string> OnRoleName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnRoleName_IsValid;

        /// <summary>
        /// Specifies which type this End of the relation has. MUST NOT be null.
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
        // fkBackingName=this.Proxy.Type; fkGuidBackingName=_fk_guid_Type;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.ObjectClass Type
        {
            get
            {
                Zetbox.App.Base.ObjectClassNHibernateImpl __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Type);

                if (OnType_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(__value);
                    OnType_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Type == null)
                {
                    SetInitializedProperty("Type");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Type);
                var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Type");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Type", __oldValue, __newValue);

                if (OnType_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Type = null;
                }
                else
                {
                    this.Proxy.Type = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Type", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnType_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Type's id, used on dehydration only</summary>
        private int? _fk_Type = null;

        /// <summary>ForeignKey Property for Type's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Type
		{
			get { return Type != null ? Type.ID : (int?)null; }
			set { _fk_Type = value; }
		}

        /// <summary>Backing store for Type's guid, used on import only</summary>
        private Guid? _fk_guid_Type = null;

    public Zetbox.API.Async.ZbTask TriggerFetchTypeAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(this.Type);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
		public static event PropertyGetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectClass> OnType_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectClass> OnType_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RelationEnd, Zetbox.App.Base.ObjectClass> OnType_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.RelationEnd> OnType_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateNavigator_RelationEnd")]
        public virtual Zetbox.App.Base.ObjectReferenceProperty CreateNavigator()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.ObjectReferenceProperty>();
            if (OnCreateNavigator_RelationEnd != null)
            {
                OnCreateNavigator_RelationEnd(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RelationEnd.CreateNavigator");
            }
            return e.Result;
        }
        public delegate void CreateNavigator_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.ObjectReferenceProperty> ret);
        public static event CreateNavigator_Handler<RelationEnd> OnCreateNavigator_RelationEnd;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<RelationEnd> OnCreateNavigator_RelationEnd_CanExec;

        [EventBasedMethod("OnCreateNavigator_RelationEnd_CanExec")]
        public virtual bool CreateNavigatorCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateNavigator_RelationEnd_CanExec != null)
				{
					OnCreateNavigator_RelationEnd_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<RelationEnd> OnCreateNavigator_RelationEnd_CanExecReason;

        [EventBasedMethod("OnCreateNavigator_RelationEnd_CanExecReason")]
        public virtual string CreateNavigatorCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateNavigator_RelationEnd_CanExecReason != null)
				{
					OnCreateNavigator_RelationEnd_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(RelationEnd);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (RelationEnd)obj;
            var otherImpl = (RelationEndNHibernateImpl)obj;
            var me = (RelationEnd)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.HasPersistentOrder = other.HasPersistentOrder;
            me.Multiplicity = other.Multiplicity;
            me.RoleName = other.RoleName;
            this._fk_AParent = otherImpl._fk_AParent;
            this._fk_BParent = otherImpl._fk_BParent;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Navigator = otherImpl._fk_Navigator;
            this._fk_Type = otherImpl._fk_Type;
        }
        public override void SetNew()
        {
            base.SetNew();
            _Parent_IsDirty = true;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Type":
                    {
                        var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Type);
                        var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Type", __oldValue, __newValue);
                        this.Proxy.Type = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Type", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "AParent":
                case "BParent":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "HasPersistentOrder":
                case "Multiplicity":
                case "Navigator":
                case "RoleName":
                case "Type":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "Parent":
                    NotifyPropertyChanging(property, null, null);
                    _Parent_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "AParent":
                case "BParent":
                case "Navigator":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "AParent":
                return TriggerFetchAParentAsync();
            case "BParent":
                return TriggerFetchBParentAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Navigator":
                return TriggerFetchNavigatorAsync();
            case "Type":
                return TriggerFetchTypeAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_AParent.HasValue)
                this.AParent = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_guid_AParent.Value));
            else
            if (_fk_AParent.HasValue)
                this.AParent = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_AParent.Value));
            else
                this.AParent = null;

            if (_fk_guid_BParent.HasValue)
                this.BParent = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_guid_BParent.Value));
            else
            if (_fk_BParent.HasValue)
                this.BParent = ((Zetbox.App.Base.RelationNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_BParent.Value));
            else
                this.BParent = null;

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_guid_Navigator.HasValue)
                this.Navigator = ((Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectReferenceProperty>(_fk_guid_Navigator.Value));
            else
            if (_fk_Navigator.HasValue)
                this.Navigator = ((Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectReferenceProperty>(_fk_Navigator.Value));
            else
                this.Navigator = null;

            if (_fk_guid_Type.HasValue)
                this.Type = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_Type.Value));
            else
            if (_fk_Type.HasValue)
                this.Type = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_Type.Value));
            else
                this.Type = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Relation>(
                        lazyCtx,
                        new Guid("dd6057d0-78bb-4242-9670-ec6c09bd4d92"),
                        "AParent",
                        null,
                        obj => obj.AParent,
                        (obj, val) => obj.AParent = val,
						obj => OnAParent_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Relation>(
                        lazyCtx,
                        new Guid("521ea0ba-ae3b-4a60-ae28-f366b3ee78f1"),
                        "BParent",
                        null,
                        obj => obj.BParent,
                        (obj, val) => obj.BParent = val,
						obj => OnBParent_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c399fef1-ad60-47a1-9639-76cec4ee8ca2"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, DateTime>(
                        lazyCtx,
                        new Guid("7bd41ad1-05c8-4822-a620-0883eb62516d"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("21b529c8-f295-4950-be49-a17c88ce6d8d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, DateTime>(
                        lazyCtx,
                        new Guid("ea92fd80-01b6-49b9-8426-77257b2bd37b"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Guid>(
                        lazyCtx,
                        new Guid("4bbe4a44-dc99-4455-9c03-ae78903fcee2"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, bool>(
                        lazyCtx,
                        new Guid("edd8d122-7b58-4bbb-bf00-33caa8b69cc2"),
                        "HasPersistentOrder",
                        null,
                        obj => obj.HasPersistentOrder,
                        (obj, val) => obj.HasPersistentOrder = val,
						obj => OnHasPersistentOrder_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Multiplicity>(
                        lazyCtx,
                        new Guid("cdbcada8-4deb-4c4f-a7a4-24716b0a0ccd"),
                        "Multiplicity",
                        null,
                        obj => obj.Multiplicity,
                        (obj, val) => obj.Multiplicity = val,
						obj => OnMultiplicity_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.ObjectReferenceProperty>(
                        lazyCtx,
                        new Guid("6b25eaab-f746-47ec-a91e-f92ec6fccada"),
                        "Navigator",
                        null,
                        obj => obj.Navigator,
                        (obj, val) => obj.Navigator = val,
						obj => OnNavigator_IsValid), 
                    // property is CalculatedObjectReferenceProperty
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.Relation>(
                        lazyCtx,
                        new Guid("3273a95a-1156-4ce2-b0d6-8957b4637320"),
                        "Parent",
                        null,
                        obj => obj.Parent,
                        null, // CalculatedObjectReferenceProperty is a read-only property
						null), // no constraints on calculated properties 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, string>(
                        lazyCtx,
                        new Guid("b32efbfc-5212-44e7-b25f-f4724b63cbee"),
                        "RoleName",
                        null,
                        obj => obj.RoleName,
                        (obj, val) => obj.RoleName = val,
						obj => OnRoleName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<RelationEnd, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("d4bfc4e0-6b57-49f0-91fd-b0de428484e0"),
                        "Type",
                        null,
                        obj => obj.Type,
                        (obj, val) => obj.Type = val,
						obj => OnType_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_RelationEnd")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_RelationEnd != null)
            {
                OnToString_RelationEnd(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<RelationEnd> OnToString_RelationEnd;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_RelationEnd")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_RelationEnd != null)
            {
                OnObjectIsValid_RelationEnd(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<RelationEnd> OnObjectIsValid_RelationEnd;

        [EventBasedMethod("OnNotifyPreSave_RelationEnd")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchHasPersistentOrderOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_RelationEnd != null) OnNotifyPreSave_RelationEnd(this);
        }
        public static event ObjectEventHandler<RelationEnd> OnNotifyPreSave_RelationEnd;

        [EventBasedMethod("OnNotifyPostSave_RelationEnd")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_RelationEnd != null) OnNotifyPostSave_RelationEnd(this);
        }
        public static event ObjectEventHandler<RelationEnd> OnNotifyPostSave_RelationEnd;

        [EventBasedMethod("OnNotifyCreated_RelationEnd")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("AParent");
            SetNotInitializedProperty("BParent");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Multiplicity");
            SetNotInitializedProperty("Navigator");
            SetNotInitializedProperty("RoleName");
            SetNotInitializedProperty("Type");
            _Parent_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_RelationEnd != null) OnNotifyCreated_RelationEnd(this);
        }
        public static event ObjectEventHandler<RelationEnd> OnNotifyCreated_RelationEnd;

        [EventBasedMethod("OnNotifyDeleting_RelationEnd")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_RelationEnd != null) OnNotifyDeleting_RelationEnd(this);

            // FK_Relation_hasA_A
            if (AParent != null) {
                ((NHibernatePersistenceObject)AParent).ParentsToDelete.Add(this);
                ChildrenToDelete.Add((NHibernatePersistenceObject)AParent);
            }
            // FK_Relation_hasB_B
            if (BParent != null) {
                ((NHibernatePersistenceObject)BParent).ParentsToDelete.Add(this);
                ChildrenToDelete.Add((NHibernatePersistenceObject)BParent);
            }
            // FK_RelationEnd_has_Navigator
            if (Navigator != null) {
                ((NHibernatePersistenceObject)Navigator).ParentsToDelete.Add(this);
                ChildrenToDelete.Add((NHibernatePersistenceObject)Navigator);
            }
            // FK_RelationEnd_has_Type
            if (Type != null) {
                ((NHibernatePersistenceObject)Type).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Type);
            }
            // FK_RelationEnd_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_RelationEnd_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }

            AParent = null;
            BParent = null;
            ChangedBy = null;
            CreatedBy = null;
            Navigator = null;
            Type = null;
        }
        public static event ObjectEventHandler<RelationEnd> OnNotifyDeleting_RelationEnd;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class RelationEndProxy
            : IProxyObject, ISortKey<int>
        {
            public RelationEndProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(RelationEndNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(RelationEndProxy); } }

            public virtual Zetbox.App.Base.RelationNHibernateImpl.RelationProxy AParent { get; set; }

            public virtual Zetbox.App.Base.RelationNHibernateImpl.RelationProxy BParent { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual bool HasPersistentOrder { get; set; }

            public virtual Zetbox.App.Base.Multiplicity Multiplicity { get; set; }

            public virtual Zetbox.App.Base.ObjectReferencePropertyNHibernateImpl.ObjectReferencePropertyProxy Navigator { get; set; }

            public virtual Zetbox.App.Base.Relation Parent { get; set; }

            public virtual string RoleName { get; set; }

            public virtual Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy Type { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.AParent != null ? OurContext.GetIdFromProxy(this.Proxy.AParent) : (int?)null);
            binStream.Write(this.Proxy.BParent != null ? OurContext.GetIdFromProxy(this.Proxy.BParent) : (int?)null);
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this._isHasPersistentOrderSet);
            if (this._isHasPersistentOrderSet) {
                binStream.Write(this.Proxy.HasPersistentOrder);
            }
            binStream.Write((int?)Proxy.Multiplicity);
            binStream.Write(this.Proxy.Navigator != null ? OurContext.GetIdFromProxy(this.Proxy.Navigator) : (int?)null);
            binStream.Write(this.Proxy.RoleName);
            binStream.Write(this.Proxy.Type != null ? OurContext.GetIdFromProxy(this.Proxy.Type) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_AParent);
            binStream.Read(out this._fk_BParent);
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this._isHasPersistentOrderSet = binStream.ReadBoolean();
            if (this._isHasPersistentOrderSet) {
                this.Proxy.HasPersistentOrder = binStream.ReadBoolean();
            }
            Proxy.Multiplicity = (Zetbox.App.Base.Multiplicity)binStream.ReadNullableInt32();
            binStream.Read(out this._fk_Navigator);
            this.Proxy.RoleName = binStream.ReadString();
            binStream.Read(out this._fk_Type);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.AParent != null ? this.Proxy.AParent.ExportGuid : (Guid?)null, xml, "AParent", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.BParent != null ? this.Proxy.BParent.ExportGuid : (Guid?)null, xml, "BParent", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.HasPersistentOrder, xml, "HasPersistentOrder", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)Proxy.Multiplicity, xml, "Multiplicity", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Navigator != null ? this.Proxy.Navigator.ExportGuid : (Guid?)null, xml, "Navigator", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.RoleName, xml, "RoleName", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Type != null ? this.Proxy.Type.ExportGuid : (Guid?)null, xml, "Type", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|AParent":
                this._fk_guid_AParent = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|BParent":
                this._fk_guid_BParent = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|HasPersistentOrder":
                // Import must have default value set
                this.Proxy.HasPersistentOrder = XmlStreamer.ReadBoolean(xml);
                this._isHasPersistentOrderSet = true;
                break;
            case "Zetbox.App.Base|Multiplicity":
                Proxy.Multiplicity = (Zetbox.App.Base.Multiplicity)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.Base|Navigator":
                this._fk_guid_Navigator = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|RoleName":
                this.Proxy.RoleName = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Type":
                this._fk_guid_Type = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

    }
}
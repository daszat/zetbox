// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// A placeholder for data object references in interfaces
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("ObjectReferencePlaceholderProperty")]
    public class ObjectReferencePlaceholderPropertyNHibernateImpl : Zetbox.App.Base.PropertyNHibernateImpl, ObjectReferencePlaceholderProperty
    {
        private static readonly Guid _objectClassID = new Guid("93241989-0bb0-435f-b6e5-06fdbbf19e5d");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public ObjectReferencePlaceholderPropertyNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ObjectReferencePlaceholderPropertyNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ObjectReferencePlaceholderPropertyProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ObjectReferencePlaceholderPropertyNHibernateImpl(Func<IFrozenContext> lazyCtx, ObjectReferencePlaceholderPropertyProxy proxy)
            : base(lazyCtx, proxy) // pass proxy to parent
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal new readonly ObjectReferencePlaceholderPropertyProxy Proxy;

        /// <summary>
        /// Whether or not the list has a persistent ordering of elements
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool HasPersistentOrder
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.HasPersistentOrder;
                if (OnHasPersistentOrder_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnHasPersistentOrder_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.HasPersistentOrder != value)
                {
                    var __oldValue = Proxy.HasPersistentOrder;
                    var __newValue = value;
                    if (OnHasPersistentOrder_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnHasPersistentOrder_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("HasPersistentOrder", __oldValue, __newValue);
                    Proxy.HasPersistentOrder = __newValue;
                    NotifyPropertyChanged("HasPersistentOrder", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnHasPersistentOrder_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnHasPersistentOrder_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("HasPersistentOrder");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnHasPersistentOrder_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnHasPersistentOrder_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnHasPersistentOrder_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnHasPersistentOrder_IsValid;

        /// <summary>
        /// Suggested implementors role name. If empty, class name will be used
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string ImplementorRoleName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ImplementorRoleName;
                if (OnImplementorRoleName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnImplementorRoleName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ImplementorRoleName != value)
                {
                    var __oldValue = Proxy.ImplementorRoleName;
                    var __newValue = value;
                    if (OnImplementorRoleName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnImplementorRoleName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ImplementorRoleName", __oldValue, __newValue);
                    Proxy.ImplementorRoleName = __newValue;
                    NotifyPropertyChanged("ImplementorRoleName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnImplementorRoleName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnImplementorRoleName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ImplementorRoleName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnImplementorRoleName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnImplementorRoleName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnImplementorRoleName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnImplementorRoleName_IsValid;

        /// <summary>
        /// Whether or not this property placeholder is list valued
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsList
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.IsList;
                if (OnIsList_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsList_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.IsList != value)
                {
                    var __oldValue = Proxy.IsList;
                    var __newValue = value;
                    if (OnIsList_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsList_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsList", __oldValue, __newValue);
                    Proxy.IsList = __newValue;
                    NotifyPropertyChanged("IsList", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsList_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsList_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsList");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnIsList_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnIsList_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, bool> OnIsList_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnIsList_IsValid;

        /// <summary>
        /// Suggested role name for the referenced item
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string ItemRoleName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.ItemRoleName;
                if (OnItemRoleName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnItemRoleName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.ItemRoleName != value)
                {
                    var __oldValue = Proxy.ItemRoleName;
                    var __newValue = value;
                    if (OnItemRoleName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnItemRoleName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ItemRoleName", __oldValue, __newValue);
                    Proxy.ItemRoleName = __newValue;
                    NotifyPropertyChanged("ItemRoleName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnItemRoleName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnItemRoleName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ItemRoleName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnItemRoleName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnItemRoleName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnItemRoleName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnItemRoleName_IsValid;

        /// <summary>
        /// The ObjectClass that is referenced by this placeholder
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ReferencedObjectClass
        // fkBackingName=this.Proxy.ReferencedObjectClass; fkGuidBackingName=_fk_guid_ReferencedObjectClass;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.ObjectClass ReferencedObjectClass
        {
            get
            {
                Zetbox.App.Base.ObjectClassNHibernateImpl __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ReferencedObjectClass);

                if (OnReferencedObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(__value);
                    OnReferencedObjectClass_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ReferencedObjectClass == null)
                {
                    SetInitializedProperty("ReferencedObjectClass");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ReferencedObjectClass);
                var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ReferencedObjectClass");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ReferencedObjectClass", __oldValue, __newValue);

                if (OnReferencedObjectClass_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnReferencedObjectClass_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ReferencedObjectClass = null;
                }
                else
                {
                    this.Proxy.ReferencedObjectClass = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ReferencedObjectClass", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnReferencedObjectClass_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnReferencedObjectClass_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ReferencedObjectClass's id, used on dehydration only</summary>
        private int? _fk_ReferencedObjectClass = null;

        /// <summary>ForeignKey Property for ReferencedObjectClass's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ReferencedObjectClass
		{
			get { return ReferencedObjectClass != null ? ReferencedObjectClass.ID : (int?)null; }
			set { _fk_ReferencedObjectClass = value; }
		}

        /// <summary>Backing store for ReferencedObjectClass's guid, used on import only</summary>
        private Guid? _fk_guid_ReferencedObjectClass = null;

    public Zetbox.API.Async.ZbTask TriggerFetchReferencedObjectClassAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(this.ReferencedObjectClass);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ReferencedObjectClass
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, Zetbox.App.Base.ObjectClass> OnReferencedObjectClass_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, Zetbox.App.Base.ObjectClass> OnReferencedObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, Zetbox.App.Base.ObjectClass> OnReferencedObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnReferencedObjectClass_IsValid;

        /// <summary>
        /// Suggested verb for the new relation
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Verb
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Verb;
                if (OnVerb_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnVerb_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Verb != value)
                {
                    var __oldValue = Proxy.Verb;
                    var __newValue = value;
                    if (OnVerb_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnVerb_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Verb", __oldValue, __newValue);
                    Proxy.Verb = __newValue;
                    NotifyPropertyChanged("Verb", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnVerb_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnVerb_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Verb");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnVerb_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnVerb_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty, string> OnVerb_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectReferencePlaceholderProperty> OnVerb_IsValid;

        /// <summary>
        /// Returns the translated description
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDescription_ObjectReferencePlaceholderProperty")]
        public override string GetDescription()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDescription_ObjectReferencePlaceholderProperty != null)
            {
                OnGetDescription_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetDescription();
            }
            return e.Result;
        }
        public static event GetDescription_Handler<ObjectReferencePlaceholderProperty> OnGetDescription_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetDescription_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetDescription_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetDescriptionCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDescription_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetDescription_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDescriptionCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetDescription_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetDescription_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetDescriptionCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDescription_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetDescription_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDescriptionCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// The element type for multi-valued properties. The property type string in all other cases.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetElementTypeString_ObjectReferencePlaceholderProperty")]
        public override string GetElementTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetElementTypeString_ObjectReferencePlaceholderProperty != null)
            {
                OnGetElementTypeString_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetElementTypeString();
            }
            return e.Result;
        }
        public static event GetElementTypeString_Handler<ObjectReferencePlaceholderProperty> OnGetElementTypeString_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetElementTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetElementTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetElementTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetElementTypeString_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetElementTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_ObjectReferencePlaceholderProperty")]
        public override string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_ObjectReferencePlaceholderProperty != null)
            {
                OnGetLabel_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetLabel();
            }
            return e.Result;
        }
        public static event GetLabel_Handler<ObjectReferencePlaceholderProperty> OnGetLabel_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetLabel_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetLabel_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetLabel_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetLabelCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetLabel_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetLabel_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetLabel_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetLabelCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ObjectReferencePlaceholderProperty")]
        public override string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ObjectReferencePlaceholderProperty != null)
            {
                OnGetName_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetName();
            }
            return e.Result;
        }
        public static event GetName_Handler<ObjectReferencePlaceholderProperty> OnGetName_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetName_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetName_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetName_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetNameCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetName_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetName_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetName_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetNameCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyType_ObjectReferencePlaceholderProperty")]
        public override System.Type GetPropertyType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_ObjectReferencePlaceholderProperty != null)
            {
                OnGetPropertyType_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyType();
            }
            return e.Result;
        }
        public static event GetPropertyType_Handler<ObjectReferencePlaceholderProperty> OnGetPropertyType_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetPropertyTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetPropertyTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetPropertyType_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyTypeString_ObjectReferencePlaceholderProperty")]
        public override string GetPropertyTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_ObjectReferencePlaceholderProperty != null)
            {
                OnGetPropertyTypeString_ObjectReferencePlaceholderProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyTypeString();
            }
            return e.Result;
        }
        public static event GetPropertyTypeString_Handler<ObjectReferencePlaceholderProperty> OnGetPropertyTypeString_ObjectReferencePlaceholderProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExec;

        [EventBasedMethod("OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExec")]
        public override bool GetPropertyTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExec != null)
				{
					OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectReferencePlaceholderProperty> OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExecReason;

        [EventBasedMethod("OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExecReason")]
        public override string GetPropertyTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExecReason != null)
				{
					OnGetPropertyTypeString_ObjectReferencePlaceholderProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectReferencePlaceholderProperty);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectReferencePlaceholderProperty)obj;
            var otherImpl = (ObjectReferencePlaceholderPropertyNHibernateImpl)obj;
            var me = (ObjectReferencePlaceholderProperty)this;

            me.HasPersistentOrder = other.HasPersistentOrder;
            me.ImplementorRoleName = other.ImplementorRoleName;
            me.IsList = other.IsList;
            me.ItemRoleName = other.ItemRoleName;
            me.Verb = other.Verb;
            this._fk_ReferencedObjectClass = otherImpl._fk_ReferencedObjectClass;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ReferencedObjectClass":
                    {
                        var __oldValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ReferencedObjectClass);
                        var __newValue = (Zetbox.App.Base.ObjectClassNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ReferencedObjectClass", __oldValue, __newValue);
                        this.Proxy.ReferencedObjectClass = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ReferencedObjectClass", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "HasPersistentOrder":
                case "ImplementorRoleName":
                case "IsList":
                case "ItemRoleName":
                case "ReferencedObjectClass":
                case "Verb":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ReferencedObjectClass":
                return TriggerFetchReferencedObjectClassAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_ReferencedObjectClass.HasValue)
                this.ReferencedObjectClass = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_ReferencedObjectClass.Value));
            else
            if (_fk_ReferencedObjectClass.HasValue)
                this.ReferencedObjectClass = ((Zetbox.App.Base.ObjectClassNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_ReferencedObjectClass.Value));
            else
                this.ReferencedObjectClass = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, bool>(
                        lazyCtx,
                        new Guid("7e52aa2a-aa3a-4f5b-8171-c6c2f364108b"),
                        "HasPersistentOrder",
                        null,
                        obj => obj.HasPersistentOrder,
                        (obj, val) => obj.HasPersistentOrder = val,
						obj => OnHasPersistentOrder_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, string>(
                        lazyCtx,
                        new Guid("b5fa31d8-ad30-4aeb-b5a0-8b4b117b1d29"),
                        "ImplementorRoleName",
                        null,
                        obj => obj.ImplementorRoleName,
                        (obj, val) => obj.ImplementorRoleName = val,
						obj => OnImplementorRoleName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, bool>(
                        lazyCtx,
                        new Guid("52692870-0bd4-47b6-99dc-eb8bf4238f24"),
                        "IsList",
                        null,
                        obj => obj.IsList,
                        (obj, val) => obj.IsList = val,
						obj => OnIsList_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, string>(
                        lazyCtx,
                        new Guid("06d56d44-bc5f-428b-a6b5-4348573425f9"),
                        "ItemRoleName",
                        null,
                        obj => obj.ItemRoleName,
                        (obj, val) => obj.ItemRoleName = val,
						obj => OnItemRoleName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("41da7ae6-aff7-44cf-83be-6150bf7578fd"),
                        "ReferencedObjectClass",
                        null,
                        obj => obj.ReferencedObjectClass,
                        (obj, val) => obj.ReferencedObjectClass = val,
						obj => OnReferencedObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<ObjectReferencePlaceholderProperty, string>(
                        lazyCtx,
                        new Guid("dd98c4f1-bf83-4d9a-8885-546457fc6591"),
                        "Verb",
                        null,
                        obj => obj.Verb,
                        (obj, val) => obj.Verb = val,
						obj => OnVerb_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ObjectReferencePlaceholderProperty")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectReferencePlaceholderProperty != null)
            {
                OnToString_ObjectReferencePlaceholderProperty(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ObjectReferencePlaceholderProperty> OnToString_ObjectReferencePlaceholderProperty;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ObjectReferencePlaceholderProperty")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ObjectReferencePlaceholderProperty != null)
            {
                OnObjectIsValid_ObjectReferencePlaceholderProperty(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ObjectReferencePlaceholderProperty> OnObjectIsValid_ObjectReferencePlaceholderProperty;

        [EventBasedMethod("OnNotifyPreSave_ObjectReferencePlaceholderProperty")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_ObjectReferencePlaceholderProperty != null) OnNotifyPreSave_ObjectReferencePlaceholderProperty(this);
        }
        public static event ObjectEventHandler<ObjectReferencePlaceholderProperty> OnNotifyPreSave_ObjectReferencePlaceholderProperty;

        [EventBasedMethod("OnNotifyPostSave_ObjectReferencePlaceholderProperty")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ObjectReferencePlaceholderProperty != null) OnNotifyPostSave_ObjectReferencePlaceholderProperty(this);
        }
        public static event ObjectEventHandler<ObjectReferencePlaceholderProperty> OnNotifyPostSave_ObjectReferencePlaceholderProperty;

        [EventBasedMethod("OnNotifyCreated_ObjectReferencePlaceholderProperty")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("HasPersistentOrder");
            SetNotInitializedProperty("ImplementorRoleName");
            SetNotInitializedProperty("IsList");
            SetNotInitializedProperty("ItemRoleName");
            SetNotInitializedProperty("ReferencedObjectClass");
            SetNotInitializedProperty("Verb");
            base.NotifyCreated();
            if (OnNotifyCreated_ObjectReferencePlaceholderProperty != null) OnNotifyCreated_ObjectReferencePlaceholderProperty(this);
        }
        public static event ObjectEventHandler<ObjectReferencePlaceholderProperty> OnNotifyCreated_ObjectReferencePlaceholderProperty;

        [EventBasedMethod("OnNotifyDeleting_ObjectReferencePlaceholderProperty")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ObjectReferencePlaceholderProperty != null) OnNotifyDeleting_ObjectReferencePlaceholderProperty(this);

            // FK_ObjRefPlaceholderProp_ofType_ReferencedClass
            if (ReferencedObjectClass != null) {
                ((NHibernatePersistenceObject)ReferencedObjectClass).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ReferencedObjectClass);
            }

            ReferencedObjectClass = null;
        }
        public static event ObjectEventHandler<ObjectReferencePlaceholderProperty> OnNotifyDeleting_ObjectReferencePlaceholderProperty;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class ObjectReferencePlaceholderPropertyProxy
            : Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy
        {
            public ObjectReferencePlaceholderPropertyProxy()
            {
            }

            public override Type ZetboxWrapper { get { return typeof(ObjectReferencePlaceholderPropertyNHibernateImpl); } }

            public override Type ZetboxProxy { get { return typeof(ObjectReferencePlaceholderPropertyProxy); } }

            public virtual bool HasPersistentOrder { get; set; }

            public virtual string ImplementorRoleName { get; set; }

            public virtual bool IsList { get; set; }

            public virtual string ItemRoleName { get; set; }

            public virtual Zetbox.App.Base.ObjectClassNHibernateImpl.ObjectClassProxy ReferencedObjectClass { get; set; }

            public virtual string Verb { get; set; }

        }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.HasPersistentOrder);
            binStream.Write(this.Proxy.ImplementorRoleName);
            binStream.Write(this.Proxy.IsList);
            binStream.Write(this.Proxy.ItemRoleName);
            binStream.Write(this.Proxy.ReferencedObjectClass != null ? OurContext.GetIdFromProxy(this.Proxy.ReferencedObjectClass) : (int?)null);
            binStream.Write(this.Proxy.Verb);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.HasPersistentOrder = binStream.ReadBoolean();
            this.Proxy.ImplementorRoleName = binStream.ReadString();
            this.Proxy.IsList = binStream.ReadBoolean();
            this.Proxy.ItemRoleName = binStream.ReadString();
            binStream.Read(out this._fk_ReferencedObjectClass);
            this.Proxy.Verb = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.HasPersistentOrder, xml, "HasPersistentOrder", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ImplementorRoleName, xml, "ImplementorRoleName", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.IsList, xml, "IsList", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ItemRoleName, xml, "ItemRoleName", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ReferencedObjectClass != null ? this.Proxy.ReferencedObjectClass.ExportGuid : (Guid?)null, xml, "ReferencedObjectClass", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Verb, xml, "Verb", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|HasPersistentOrder":
                this.Proxy.HasPersistentOrder = XmlStreamer.ReadBoolean(xml);
                break;
            case "Zetbox.App.Base|ImplementorRoleName":
                this.Proxy.ImplementorRoleName = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|IsList":
                this.Proxy.IsList = XmlStreamer.ReadBoolean(xml);
                break;
            case "Zetbox.App.Base|ItemRoleName":
                this.Proxy.ItemRoleName = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ReferencedObjectClass":
                this._fk_guid_ReferencedObjectClass = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Verb":
                this.Proxy.Verb = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// A WorkSchedule describing recurrent working hours
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("WorkSchedule")]
    public class WorkScheduleNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, WorkSchedule, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("901a2ddd-1330-4129-b8a2-92b8e655d168");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public WorkScheduleNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public WorkScheduleNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new WorkScheduleProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public WorkScheduleNHibernateImpl(Func<IFrozenContext> lazyCtx, WorkScheduleProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly WorkScheduleProxy Proxy;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseWorkSchedule
        // fkBackingName=this.Proxy.BaseWorkSchedule; fkGuidBackingName=_fk_guid_BaseWorkSchedule;
        // referencedInterface=Zetbox.App.Calendar.WorkSchedule; moduleNamespace=Zetbox.App.Calendar;
        // inverse Navigator=ChildWorkSchedule; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Calendar.WorkSchedule BaseWorkSchedule
        {
            get
            {
                Zetbox.App.Calendar.WorkScheduleNHibernateImpl __value = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseWorkSchedule);

                if (OnBaseWorkSchedule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__value);
                    OnBaseWorkSchedule_Getter(this, e);
                    __value = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.BaseWorkSchedule == null)
                {
                    SetInitializedProperty("BaseWorkSchedule");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseWorkSchedule);
                var __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("BaseWorkSchedule");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BaseWorkSchedule", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("ChildWorkSchedule", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("ChildWorkSchedule", null, null);
                }

                if (OnBaseWorkSchedule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnBaseWorkSchedule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.BaseWorkSchedule = null;
                }
                else
                {
                    this.Proxy.BaseWorkSchedule = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.ChildWorkSchedule as IRelationListSync<Zetbox.App.Calendar.WorkSchedule>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.ChildWorkSchedule as IRelationListSync<Zetbox.App.Calendar.WorkSchedule>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("BaseWorkSchedule", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnBaseWorkSchedule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnBaseWorkSchedule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for BaseWorkSchedule's id, used on dehydration only</summary>
        private int? _fk_BaseWorkSchedule = null;

        /// <summary>ForeignKey Property for BaseWorkSchedule's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_BaseWorkSchedule
		{
			get { return BaseWorkSchedule != null ? BaseWorkSchedule.ID : (int?)null; }
			set { _fk_BaseWorkSchedule = value; }
		}

        /// <summary>Backing store for BaseWorkSchedule's guid, used on import only</summary>
        private Guid? _fk_guid_BaseWorkSchedule = null;

    public Zetbox.API.Async.ZbTask TriggerFetchBaseWorkScheduleAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.WorkSchedule>(this.BaseWorkSchedule);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseWorkSchedule
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("486810c7-c031-4c86-ad86-7b88530008ca"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.WorkSchedule.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Calendar.WorkSchedule> ChildWorkSchedule
        {
            get
            {
                if (_ChildWorkSchedule == null)
                {
                    _ChildWorkSchedule = new OneNRelationList<Zetbox.App.Calendar.WorkSchedule>(
                        "BaseWorkSchedule",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("ChildWorkSchedule", null, null),
                        () => { this.NotifyPropertyChanged("ChildWorkSchedule", null, null); if(OnChildWorkSchedule_PostSetter != null && IsAttached) OnChildWorkSchedule_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy, Zetbox.App.Calendar.WorkSchedule>(
                            () => Proxy.ChildWorkSchedule,
                            p => (Zetbox.App.Calendar.WorkSchedule)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _ChildWorkSchedule;
            }
        }
    
        private OneNRelationList<Zetbox.App.Calendar.WorkSchedule> _ChildWorkSchedule;

        public Zetbox.API.Async.ZbTask TriggerFetchChildWorkScheduleAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Calendar.WorkSchedule>>(this.ChildWorkSchedule);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.WorkSchedule> OnChildWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChildWorkSchedule_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("b81a61fa-b991-4928-8390-d529abc42e72"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.WorkSchedule.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("45599fa5-a838-4a1e-b9f1-4031dea7f4e7"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.WorkSchedule.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnExportGuid_IsValid;

        /// <summary>
        /// Optional member of a module
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Module Module
        {
            get
            {
                Zetbox.App.Base.ModuleNHibernateImpl __value = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

    public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Calendar.WorkScheduleRule> WorkScheduleRules
        {
            get
            {
                if (_WorkScheduleRules == null)
                {
                    _WorkScheduleRules = new OneNRelationList<Zetbox.App.Calendar.WorkScheduleRule>(
                        "WorkSchedule",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("WorkScheduleRules", null, null),
                        () => { this.NotifyPropertyChanged("WorkScheduleRules", null, null); if(OnWorkScheduleRules_PostSetter != null && IsAttached) OnWorkScheduleRules_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Calendar.WorkScheduleRuleNHibernateImpl.WorkScheduleRuleProxy, Zetbox.App.Calendar.WorkScheduleRule>(
                            () => Proxy.WorkScheduleRules,
                            p => (Zetbox.App.Calendar.WorkScheduleRule)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Calendar.WorkScheduleRuleNHibernateImpl.WorkScheduleRuleProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _WorkScheduleRules;
            }
        }
    
        private OneNRelationList<Zetbox.App.Calendar.WorkScheduleRule> _WorkScheduleRules;

        public Zetbox.API.Async.ZbTask TriggerFetchWorkScheduleRulesAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Calendar.WorkScheduleRule>>(this.WorkScheduleRules);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.WorkSchedule> OnWorkScheduleRules_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnWorkScheduleRules_IsValid;

        /// <summary>
        /// Duplicates this work schedule
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnDuplicate_WorkSchedule")]
        public virtual Zetbox.App.Calendar.WorkSchedule Duplicate()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Calendar.WorkSchedule>();
            if (OnDuplicate_WorkSchedule != null)
            {
                OnDuplicate_WorkSchedule(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.Duplicate");
            }
            return e.Result;
        }
        public delegate void Duplicate_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Calendar.WorkSchedule> ret);
        public static event Duplicate_Handler<WorkSchedule> OnDuplicate_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnDuplicate_WorkSchedule_CanExec;

        [EventBasedMethod("OnDuplicate_WorkSchedule_CanExec")]
        public virtual bool DuplicateCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnDuplicate_WorkSchedule_CanExec != null)
				{
					OnDuplicate_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnDuplicate_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnDuplicate_WorkSchedule_CanExecReason")]
        public virtual string DuplicateCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnDuplicate_WorkSchedule_CanExecReason != null)
				{
					OnDuplicate_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Gets the number of holidays between two dates. A Holiday is defined as every yearly rule, that is not a working day. All other rules are ignored.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetHolidays_WorkSchedule")]
        public virtual int GetHolidays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetHolidays_WorkSchedule != null)
            {
                OnGetHolidays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetHolidays");
            }
            return e.Result;
        }
        public delegate void GetHolidays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetHolidays_Handler<WorkSchedule> OnGetHolidays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetHolidays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetHolidays_WorkSchedule_CanExec")]
        public virtual bool GetHolidaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetHolidays_WorkSchedule_CanExec != null)
				{
					OnGetHolidays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetHolidays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetHolidays_WorkSchedule_CanExecReason")]
        public virtual string GetHolidaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetHolidays_WorkSchedule_CanExecReason != null)
				{
					OnGetHolidays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Gets the number of free days between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetOffDays_WorkSchedule")]
        public virtual int GetOffDays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetOffDays_WorkSchedule != null)
            {
                OnGetOffDays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetOffDays");
            }
            return e.Result;
        }
        public delegate void GetOffDays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetOffDays_Handler<WorkSchedule> OnGetOffDays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetOffDays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetOffDays_WorkSchedule_CanExec")]
        public virtual bool GetOffDaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetOffDays_WorkSchedule_CanExec != null)
				{
					OnGetOffDays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetOffDays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetOffDays_WorkSchedule_CanExecReason")]
        public virtual string GetOffDaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetOffDays_WorkSchedule_CanExecReason != null)
				{
					OnGetOffDays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Get the number of working days between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetWorkingDays_WorkSchedule")]
        public virtual int GetWorkingDays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetWorkingDays_WorkSchedule != null)
            {
                OnGetWorkingDays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetWorkingDays");
            }
            return e.Result;
        }
        public delegate void GetWorkingDays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetWorkingDays_Handler<WorkSchedule> OnGetWorkingDays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetWorkingDays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetWorkingDays_WorkSchedule_CanExec")]
        public virtual bool GetWorkingDaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetWorkingDays_WorkSchedule_CanExec != null)
				{
					OnGetWorkingDays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetWorkingDays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetWorkingDays_WorkSchedule_CanExecReason")]
        public virtual string GetWorkingDaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetWorkingDays_WorkSchedule_CanExecReason != null)
				{
					OnGetWorkingDays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the amount of working hours between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetWorkingHours_WorkSchedule")]
        public virtual decimal GetWorkingHours(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<decimal>();
            if (OnGetWorkingHours_WorkSchedule != null)
            {
                OnGetWorkingHours_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetWorkingHours");
            }
            return e.Result;
        }
        public delegate void GetWorkingHours_Handler<T>(T obj, MethodReturnEventArgs<decimal> ret, DateTime from, DateTime until);
        public static event GetWorkingHours_Handler<WorkSchedule> OnGetWorkingHours_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetWorkingHours_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetWorkingHours_WorkSchedule_CanExec")]
        public virtual bool GetWorkingHoursCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetWorkingHours_WorkSchedule_CanExec != null)
				{
					OnGetWorkingHours_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetWorkingHours_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetWorkingHours_WorkSchedule_CanExecReason")]
        public virtual string GetWorkingHoursCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetWorkingHours_WorkSchedule_CanExecReason != null)
				{
					OnGetWorkingHours_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(WorkSchedule);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (WorkSchedule)obj;
            var otherImpl = (WorkScheduleNHibernateImpl)obj;
            var me = (WorkSchedule)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            this._fk_BaseWorkSchedule = otherImpl._fk_BaseWorkSchedule;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "BaseWorkSchedule":
                    {
                        var __oldValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.BaseWorkSchedule);
                        var __newValue = (Zetbox.App.Calendar.WorkScheduleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("BaseWorkSchedule", __oldValue, __newValue);
                        this.Proxy.BaseWorkSchedule = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("BaseWorkSchedule", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "BaseWorkSchedule":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "Module":
                case "Name":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "ChildWorkSchedule":
                case "WorkScheduleRules":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "BaseWorkSchedule":
                return TriggerFetchBaseWorkScheduleAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "ChildWorkSchedule":
                return TriggerFetchChildWorkScheduleAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "WorkScheduleRules":
                return TriggerFetchWorkScheduleRulesAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_BaseWorkSchedule.HasValue)
                this.BaseWorkSchedule = ((Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.WorkSchedule>(_fk_guid_BaseWorkSchedule.Value));
            else
            if (_fk_BaseWorkSchedule.HasValue)
                this.BaseWorkSchedule = ((Zetbox.App.Calendar.WorkScheduleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.WorkSchedule>(_fk_BaseWorkSchedule.Value));
            else
                this.BaseWorkSchedule = null;

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_guid_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value));
            else
            if (_fk_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_Module.Value));
            else
                this.Module = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, Zetbox.App.Calendar.WorkSchedule>(
                        lazyCtx,
                        new Guid("17a8fbd3-5a42-4cf6-9517-0adf4142f4fe"),
                        "BaseWorkSchedule",
                        null,
                        obj => obj.BaseWorkSchedule,
                        (obj, val) => obj.BaseWorkSchedule = val,
						obj => OnBaseWorkSchedule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("34eb524b-3f24-4972-b0e5-a64c9f27838a"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, DateTime>(
                        lazyCtx,
                        new Guid("486810c7-c031-4c86-ad86-7b88530008ca"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, ICollection<Zetbox.App.Calendar.WorkSchedule>>(
                        lazyCtx,
                        new Guid("c2fc6792-bc1f-42bb-b6c3-451ab99ddbef"),
                        "ChildWorkSchedule",
                        null,
                        obj => obj.ChildWorkSchedule,
                        null, // lists are read-only properties
                        obj => OnChildWorkSchedule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d567d5a4-3be0-44f1-af91-046180218a38"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, DateTime>(
                        lazyCtx,
                        new Guid("b81a61fa-b991-4928-8390-d529abc42e72"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, Guid>(
                        lazyCtx,
                        new Guid("45599fa5-a838-4a1e-b9f1-4031dea7f4e7"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("82affab5-a5b2-45ca-a29c-6b7dc0f31190"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, string>(
                        lazyCtx,
                        new Guid("49cdf3fb-639f-4c20-b9ca-9af1bbe0d4d7"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<WorkSchedule, ICollection<Zetbox.App.Calendar.WorkScheduleRule>>(
                        lazyCtx,
                        new Guid("b16c20d8-ac72-45e8-883c-52c6f28571f2"),
                        "WorkScheduleRules",
                        null,
                        obj => obj.WorkScheduleRules,
                        null, // lists are read-only properties
                        obj => OnWorkScheduleRules_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_WorkSchedule")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_WorkSchedule != null)
            {
                OnToString_WorkSchedule(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<WorkSchedule> OnToString_WorkSchedule;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_WorkSchedule")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_WorkSchedule != null)
            {
                OnObjectIsValid_WorkSchedule(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<WorkSchedule> OnObjectIsValid_WorkSchedule;

        [EventBasedMethod("OnNotifyPreSave_WorkSchedule")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_WorkSchedule != null) OnNotifyPreSave_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyPreSave_WorkSchedule;

        [EventBasedMethod("OnNotifyPostSave_WorkSchedule")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_WorkSchedule != null) OnNotifyPostSave_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyPostSave_WorkSchedule;

        [EventBasedMethod("OnNotifyCreated_WorkSchedule")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("BaseWorkSchedule");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            base.NotifyCreated();
            if (OnNotifyCreated_WorkSchedule != null) OnNotifyCreated_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyCreated_WorkSchedule;

        [EventBasedMethod("OnNotifyDeleting_WorkSchedule")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_WorkSchedule != null) OnNotifyDeleting_WorkSchedule(this);

            // FK_BaseWorkSchedule_has_ChildWorkSchedules ZeroOrMore
            foreach(NHibernatePersistenceObject x in ChildWorkSchedule) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // should fetch && remember parent for SyncAccount_of_WorkSchedule_RelationEntry
            // FK_WorkSchedule_has_Module
            if (Module != null) {
                ((NHibernatePersistenceObject)Module).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Module);
            }
            // FK_WorkSchedule_has_WorkScheduleRules ZeroOrMore
            foreach(NHibernatePersistenceObject x in WorkScheduleRules) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_WorkSchedule_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_WorkSchedule_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }

            ChildWorkSchedule.Clear();
            WorkScheduleRules.Clear();
            BaseWorkSchedule = null;
            ChangedBy = null;
            CreatedBy = null;
            Module = null;
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyDeleting_WorkSchedule;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class WorkScheduleProxy
            : IProxyObject, ISortKey<int>
        {
            public WorkScheduleProxy()
            {
                ChildWorkSchedule = new Collection<Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy>();
                WorkScheduleRules = new Collection<Zetbox.App.Calendar.WorkScheduleRuleNHibernateImpl.WorkScheduleRuleProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(WorkScheduleNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(WorkScheduleProxy); } }

            public virtual Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy BaseWorkSchedule { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.WorkScheduleNHibernateImpl.WorkScheduleProxy> ChildWorkSchedule { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual Zetbox.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

            public virtual string Name { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.WorkScheduleRuleNHibernateImpl.WorkScheduleRuleProxy> WorkScheduleRules { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.BaseWorkSchedule != null ? OurContext.GetIdFromProxy(this.Proxy.BaseWorkSchedule) : (int?)null);
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null);
            binStream.Write(this.Proxy.Name);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_BaseWorkSchedule);
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_Module);
            this.Proxy.Name = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.BaseWorkSchedule != null ? this.Proxy.BaseWorkSchedule.ExportGuid : (Guid?)null, xml, "BaseWorkSchedule", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|BaseWorkSchedule":
                this._fk_guid_BaseWorkSchedule = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
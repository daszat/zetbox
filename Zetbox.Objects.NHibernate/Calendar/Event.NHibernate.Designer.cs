// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// A calendar event
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Event")]
    public class EventNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, Event, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("fd0b9bf4-0891-4317-9d2e-d08a410d5c4c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public EventNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public EventNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new EventProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public EventNHibernateImpl(Func<IFrozenContext> lazyCtx, EventProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            if (this.Proxy.Recurrence == null)
            {
                this.Proxy.Recurrence = new Zetbox.App.Base.RecurrenceRuleNHibernateImpl(this, "Recurrence", lazyCtx, null);
            }
            else
            {
                this.Proxy.Recurrence.AttachToObject(this, "Recurrence");
            }

            if (this.Proxy.Source == null)
            {
                this.Proxy.Source = new Zetbox.App.Base.AnyReferenceNHibernateImpl(this, "Source", lazyCtx, null);
            }
            else
            {
                this.Proxy.Source.AttachToObject(this, "Source");
            }

            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
            _isIsAllDaySet = Proxy.ID > 0;
            _isIsViewReadOnlySet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly EventProxy Proxy;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Body
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Body;
                if (OnBody_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnBody_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Body != value)
                {
                    var __oldValue = Proxy.Body;
                    var __newValue = value;
                    if (OnBody_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnBody_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Body", __oldValue, __newValue);
                    Proxy.Body = __newValue;
                    NotifyPropertyChanged("Body", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBody_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnBody_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Body");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnBody_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnBody_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnBody_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnBody_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
        // fkBackingName=this.Proxy.Calendar; fkGuidBackingName=_fk_guid_Calendar;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Calendar.CalendarBook Calendar
        {
            get
            {
                Zetbox.App.Calendar.CalendarBookNHibernateImpl __value = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);

                if (OnCalendar_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.CalendarBook>(__value);
                    OnCalendar_Getter(this, e);
                    __value = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Calendar == null)
                {
                    SetInitializedProperty("Calendar");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);
                var __newValue = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Calendar");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Calendar", __oldValue, __newValue);

                if (OnCalendar_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.CalendarBook>(__oldValue, __newValue);
                    OnCalendar_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Calendar = null;
                }
                else
                {
                    this.Proxy.Calendar = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCalendar_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.CalendarBook>(__oldValue, __newValue);
                    OnCalendar_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Calendar's id, used on dehydration only</summary>
        private int? _fk_Calendar = null;

        /// <summary>ForeignKey Property for Calendar's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Calendar
		{
			get { return Calendar != null ? Calendar.ID : (int?)null; }
			set { _fk_Calendar = value; }
		}

        /// <summary>Backing store for Calendar's guid, used on import only</summary>
        private Guid? _fk_guid_Calendar = null;

    public Zetbox.API.Async.ZbTask TriggerFetchCalendarAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(this.Calendar);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCalendar_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("36344f62-2391-4961-b707-fb7b96018cb9"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.Event.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9a88ae72-e738-4cba-a2cf-54df69f1e221"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.Event.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime EndDate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.EndDate;
                if (OnEndDate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnEndDate_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.EndDate != value)
                {
                    var __oldValue = Proxy.EndDate;
                    var __newValue = value;
                    if (OnEndDate_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnEndDate_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("EndDate", __oldValue, __newValue);
                    Proxy.EndDate = __newValue;
                    NotifyPropertyChanged("EndDate", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnEndDate_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnEndDate_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("EndDate");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnEndDate_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9e8ad42a-67fa-4ee6-8923-2563fd2e069c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.Event.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsAllDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsAllDayOrDefault();
                if (OnIsAllDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAllDay_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsAllDaySet = true;
                if (Proxy.IsAllDay != value)
                {
                    var __oldValue = Proxy.IsAllDay;
                    var __newValue = value;
                    if (OnIsAllDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAllDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAllDay", __oldValue, __newValue);
                    Proxy.IsAllDay = __newValue;
                    NotifyPropertyChanged("IsAllDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsAllDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAllDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsAllDay");
                }
            }
        }


        private bool FetchIsAllDayOrDefault()
        {
            var __result = Proxy.IsAllDay;
                if (!_isIsAllDaySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d8ddeb5c-7c5d-4780-8540-857932cb3813"));
                    if (__p != null) {
                        _isIsAllDaySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsAllDay = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.Event.IsAllDay'");
                    }
                }
            return __result;
        }

        private bool _isIsAllDaySet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnIsAllDay_IsValid;

        /// <summary>
        /// The current event is read only. This property is set by code.
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsViewReadOnly
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsViewReadOnlyOrDefault();
                if (OnIsViewReadOnly_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsViewReadOnly_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsViewReadOnlySet = true;
                if (Proxy.IsViewReadOnly != value)
                {
                    var __oldValue = Proxy.IsViewReadOnly;
                    var __newValue = value;
                    if (OnIsViewReadOnly_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsViewReadOnly_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsViewReadOnly", __oldValue, __newValue);
                    Proxy.IsViewReadOnly = __newValue;
                    NotifyPropertyChanged("IsViewReadOnly", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsViewReadOnly_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsViewReadOnly_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsViewReadOnly");
                }
            }
        }


        private bool FetchIsViewReadOnlyOrDefault()
        {
            var __result = Proxy.IsViewReadOnly;
                if (!_isIsViewReadOnlySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("15534345-ecd4-407b-a605-236375eafa66"));
                    if (__p != null) {
                        _isIsViewReadOnlySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsViewReadOnly = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.Event.IsViewReadOnly'");
                    }
                }
            return __result;
        }

        private bool _isIsViewReadOnlySet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnIsViewReadOnly_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Location
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Location;
                if (OnLocation_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLocation_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Location != value)
                {
                    var __oldValue = Proxy.Location;
                    var __newValue = value;
                    if (OnLocation_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLocation_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Location", __oldValue, __newValue);
                    Proxy.Location = __newValue;
                    NotifyPropertyChanged("Location", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLocation_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLocation_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Location");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnLocation_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Base.RecurrenceRule Recurrence
        {
            get { return RecurrenceImpl; }
            set { RecurrenceImpl = (Zetbox.App.Base.RecurrenceRuleNHibernateImpl)value; }
        }

        /// <summary>backing property for Recurrence, takes care of attaching/detaching the values</summary>
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.RecurrenceRuleNHibernateImpl RecurrenceImpl
        {
            get
            {
                return this.Proxy.Recurrence;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.Recurrence, value))
                {
                    var __oldValue = this.Proxy.Recurrence;
                    var __newValue = value;

                    NotifyPropertyChanging("Recurrence", __oldValue, __newValue);

                    if (this.Proxy.Recurrence != null)
                    {
                        this.Proxy.Recurrence.DetachFromObject(this, "Recurrence");
                    }
                    __newValue = (Zetbox.App.Base.RecurrenceRuleNHibernateImpl)__newValue.Clone();
                    this.Proxy.Recurrence = __newValue;
                    this.Proxy.Recurrence.AttachToObject(this, "Recurrence");

                    NotifyPropertyChanged("Recurrence", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnRecurrence_IsValid;

        /// <summary>
        /// A attached data item
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Base.AnyReference Source
        {
            get { return SourceImpl; }
            set { SourceImpl = (Zetbox.App.Base.AnyReferenceNHibernateImpl)value; }
        }

        /// <summary>backing property for Source, takes care of attaching/detaching the values</summary>
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.AnyReferenceNHibernateImpl SourceImpl
        {
            get
            {
                return this.Proxy.Source;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.Source, value))
                {
                    var __oldValue = this.Proxy.Source;
                    var __newValue = value;

                    NotifyPropertyChanging("Source", __oldValue, __newValue);

                    if (this.Proxy.Source != null)
                    {
                        this.Proxy.Source.DetachFromObject(this, "Source");
                    }
                    __newValue = (Zetbox.App.Base.AnyReferenceNHibernateImpl)__newValue.Clone();
                    this.Proxy.Source = __newValue;
                    this.Proxy.Source.AttachToObject(this, "Source");

                    NotifyPropertyChanged("Source", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSource_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime StartDate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.StartDate;
                if (OnStartDate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnStartDate_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.StartDate != value)
                {
                    var __oldValue = Proxy.StartDate;
                    var __newValue = value;
                    if (OnStartDate_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnStartDate_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("StartDate", __oldValue, __newValue);
                    Proxy.StartDate = __newValue;
                    NotifyPropertyChanged("StartDate", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnStartDate_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnStartDate_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("StartDate");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnStartDate_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Summary
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Summary;
                if (OnSummary_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSummary_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Summary != value)
                {
                    var __oldValue = Proxy.Summary;
                    var __newValue = value;
                    if (OnSummary_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSummary_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Summary", __oldValue, __newValue);
                    Proxy.Summary = __newValue;
                    NotifyPropertyChanged("Summary", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSummary_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSummary_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Summary");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSummary_IsValid;

        /// <summary>
        /// A hash used by a sync provider
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string SyncHash
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.SyncHash;
                if (OnSyncHash_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSyncHash_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.SyncHash != value)
                {
                    var __oldValue = Proxy.SyncHash;
                    var __newValue = value;
                    if (OnSyncHash_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSyncHash_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("SyncHash", __oldValue, __newValue);
                    Proxy.SyncHash = __newValue;
                    NotifyPropertyChanged("SyncHash", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSyncHash_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSyncHash_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("SyncHash");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSyncHash_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Event);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Event)obj;
            var otherImpl = (EventNHibernateImpl)obj;
            var me = (Event)this;

            me.Body = other.Body;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.EndDate = other.EndDate;
            me.ExportGuid = other.ExportGuid;
            me.IsAllDay = other.IsAllDay;
            me.IsViewReadOnly = other.IsViewReadOnly;
            me.Location = other.Location;
            me.StartDate = other.StartDate;
            me.Summary = other.Summary;
            me.SyncHash = other.SyncHash;
            if (me.Recurrence == null && other.Recurrence != null) {
                me.Recurrence = (Zetbox.App.Base.RecurrenceRule)other.Recurrence.Clone();
            } else if (me.Recurrence != null && other.Recurrence == null) {
                me.Recurrence = null;
            } else if (me.Recurrence != null && other.Recurrence != null) {
                me.Recurrence.ApplyChangesFrom(other.Recurrence);
            }
            if (me.Source == null && other.Source != null) {
                me.Source = (Zetbox.App.Base.AnyReference)other.Source.Clone();
            } else if (me.Source != null && other.Source == null) {
                me.Source = null;
            } else if (me.Source != null && other.Source != null) {
                me.Source.ApplyChangesFrom(other.Source);
            }
            this._fk_Calendar = otherImpl._fk_Calendar;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Calendar":
                    {
                        var __oldValue = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Calendar);
                        var __newValue = (Zetbox.App.Calendar.CalendarBookNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Calendar", __oldValue, __newValue);
                        this.Proxy.Calendar = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Body":
                case "Calendar":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "EndDate":
                case "ExportGuid":
                case "IsAllDay":
                case "IsViewReadOnly":
                case "Location":
                case "Recurrence":
                case "Source":
                case "StartDate":
                case "Summary":
                case "SyncHash":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Calendar":
                return TriggerFetchCalendarAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_Calendar.HasValue)
                this.Calendar = ((Zetbox.App.Calendar.CalendarBookNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.CalendarBook>(_fk_guid_Calendar.Value));
            else
            if (_fk_Calendar.HasValue)
                this.Calendar = ((Zetbox.App.Calendar.CalendarBookNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Calendar.CalendarBook>(_fk_Calendar.Value));
            else
                this.Calendar = null;

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, string>(
                        lazyCtx,
                        new Guid("db075997-89bd-4b98-bf60-40eecebfc664"),
                        "Body",
                        null,
                        obj => obj.Body,
                        (obj, val) => obj.Body = val,
						obj => OnBody_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Zetbox.App.Calendar.CalendarBook>(
                        lazyCtx,
                        new Guid("d80b3380-9cc2-4237-960c-9cd409d793e3"),
                        "Calendar",
                        null,
                        obj => obj.Calendar,
                        (obj, val) => obj.Calendar = val,
						obj => OnCalendar_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("664e51f9-1091-458b-accc-72ccb50900ce"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("36344f62-2391-4961-b707-fb7b96018cb9"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("15d27941-fbe2-40cf-a431-d9d417b883ec"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("9a88ae72-e738-4cba-a2cf-54df69f1e221"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("b8dd3910-ffaa-49dd-8e00-e80575e15cab"),
                        "EndDate",
                        null,
                        obj => obj.EndDate,
                        (obj, val) => obj.EndDate = val,
						obj => OnEndDate_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Guid>(
                        lazyCtx,
                        new Guid("9e8ad42a-67fa-4ee6-8923-2563fd2e069c"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, bool>(
                        lazyCtx,
                        new Guid("d8ddeb5c-7c5d-4780-8540-857932cb3813"),
                        "IsAllDay",
                        null,
                        obj => obj.IsAllDay,
                        (obj, val) => obj.IsAllDay = val,
						obj => OnIsAllDay_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, bool>(
                        lazyCtx,
                        new Guid("15534345-ecd4-407b-a605-236375eafa66"),
                        "IsViewReadOnly",
                        null,
                        obj => obj.IsViewReadOnly,
                        (obj, val) => obj.IsViewReadOnly = val,
						obj => OnIsViewReadOnly_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, string>(
                        lazyCtx,
                        new Guid("3c517754-f4a4-459e-8a24-3b85e1949b21"),
                        "Location",
                        null,
                        obj => obj.Location,
                        (obj, val) => obj.Location = val,
						obj => OnLocation_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Zetbox.App.Base.RecurrenceRule>(
                        lazyCtx,
                        new Guid("2eb0c6f4-c5bc-4b9a-8677-ec2598c74beb"),
                        "Recurrence",
                        null,
                        obj => obj.Recurrence,
                        (obj, val) => obj.Recurrence = val,
						obj => OnRecurrence_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, Zetbox.App.Base.AnyReference>(
                        lazyCtx,
                        new Guid("086bf775-297d-49bf-be32-95b19f5eda8a"),
                        "Source",
                        null,
                        obj => obj.Source,
                        (obj, val) => obj.Source = val,
						obj => OnSource_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("93bf17bd-4dfb-468d-84d4-75fce8214fa3"),
                        "StartDate",
                        null,
                        obj => obj.StartDate,
                        (obj, val) => obj.StartDate = val,
						obj => OnStartDate_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, string>(
                        lazyCtx,
                        new Guid("e0cbb876-3119-4e90-afc5-6e97b67e2005"),
                        "Summary",
                        null,
                        obj => obj.Summary,
                        (obj, val) => obj.Summary = val,
						obj => OnSummary_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Event, string>(
                        lazyCtx,
                        new Guid("b9095bc6-a8cb-422e-8320-e1c07c8c6252"),
                        "SyncHash",
                        null,
                        obj => obj.SyncHash,
                        (obj, val) => obj.SyncHash = val,
						obj => OnSyncHash_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Event")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Event != null)
            {
                OnToString_Event(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Event> OnToString_Event;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Event")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Event != null)
            {
                OnObjectIsValid_Event(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Event> OnObjectIsValid_Event;

        [EventBasedMethod("OnNotifyPreSave_Event")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchIsAllDayOrDefault();
            FetchIsViewReadOnlyOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Event != null) OnNotifyPreSave_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyPreSave_Event;

        [EventBasedMethod("OnNotifyPostSave_Event")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Event != null) OnNotifyPostSave_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyPostSave_Event;

        [EventBasedMethod("OnNotifyCreated_Event")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Body");
            SetNotInitializedProperty("Calendar");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("EndDate");
            SetNotInitializedProperty("Location");
            SetNotInitializedProperty("StartDate");
            SetNotInitializedProperty("Summary");
            SetNotInitializedProperty("SyncHash");
            base.NotifyCreated();
            if (OnNotifyCreated_Event != null) OnNotifyCreated_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyCreated_Event;

        [EventBasedMethod("OnNotifyDeleting_Event")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Event != null) OnNotifyDeleting_Event(this);

            // FK_Event_of_Calendar
            if (Calendar != null) {
                ((NHibernatePersistenceObject)Calendar).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Calendar);
            }
            // FK_Event_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_Event_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }
            // should fetch && remember parent for Test_of_Event_RelationEntry

            Calendar = null;
            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Event> OnNotifyDeleting_Event;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class EventProxy
            : IProxyObject, ISortKey<int>
        {
            public EventProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(EventNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(EventProxy); } }

            public virtual string Body { get; set; }

            public virtual Zetbox.App.Calendar.CalendarBookNHibernateImpl.CalendarBookProxy Calendar { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual DateTime EndDate { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual bool IsAllDay { get; set; }

            public virtual bool IsViewReadOnly { get; set; }

            public virtual string Location { get; set; }

            public virtual Zetbox.App.Base.RecurrenceRuleNHibernateImpl Recurrence { get; set; }

            public virtual Zetbox.App.Base.AnyReferenceNHibernateImpl Source { get; set; }

            public virtual DateTime StartDate { get; set; }

            public virtual string Summary { get; set; }

            public virtual string SyncHash { get; set; }

            public virtual ICollection<Event_RightsNHibernateImpl> SecurityRightsCollectionImpl { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        private Zetbox.API.AccessRights? __currentAccessRights;
        public override Zetbox.API.AccessRights CurrentAccessRights
        {
           get { 
             if(Context == null) return Zetbox.API.AccessRights.Full;
             if(__currentAccessRights == null) { 
                 __currentAccessRights = base.CurrentAccessRights; 
                 var secRight = this.Proxy.SecurityRightsCollectionImpl != null ? this.Proxy.SecurityRightsCollectionImpl.SingleOrDefault(i => i.Identity == Context.Internals().IdentityID) : null;
                 __currentAccessRights |= secRight != null ? (Zetbox.API.AccessRights)secRight.Right : Zetbox.API.AccessRights.None; 
             } 
             return __currentAccessRights.Value; }
        }

        protected override void ResetCurrentAccessRights()
        {
                base.ResetCurrentAccessRights();
                __currentAccessRights = null;
        }


        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Body);
            binStream.Write(this.Proxy.Calendar != null ? OurContext.GetIdFromProxy(this.Proxy.Calendar) : (int?)null);
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this.Proxy.EndDate);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this._isIsAllDaySet);
            if (this._isIsAllDaySet) {
                binStream.Write(this.Proxy.IsAllDay);
            }
            binStream.Write(this._isIsViewReadOnlySet);
            if (this._isIsViewReadOnlySet) {
                binStream.Write(this.Proxy.IsViewReadOnly);
            }
            binStream.Write(this.Proxy.Location);
            binStream.Write(this.Recurrence);
            binStream.Write(this.Source);
            binStream.Write(this.Proxy.StartDate);
            binStream.Write(this.Proxy.Summary);
            binStream.Write(this.Proxy.SyncHash);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.Body = binStream.ReadString();
            binStream.Read(out this._fk_Calendar);
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this.Proxy.EndDate = binStream.ReadDateTime();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this._isIsAllDaySet = binStream.ReadBoolean();
            if (this._isIsAllDaySet) {
                this.Proxy.IsAllDay = binStream.ReadBoolean();
            }
            this._isIsViewReadOnlySet = binStream.ReadBoolean();
            if (this._isIsViewReadOnlySet) {
                this.Proxy.IsViewReadOnly = binStream.ReadBoolean();
            }
            this.Proxy.Location = binStream.ReadString();
            {
                // use backing store to avoid notifications
                this.RecurrenceImpl = binStream.ReadCompoundObject<Zetbox.App.Base.RecurrenceRuleNHibernateImpl>();
                this.RecurrenceImpl.AttachToObject(this, "Recurrence");
            }
            {
                // use backing store to avoid notifications
                this.SourceImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AnyReferenceNHibernateImpl>();
                this.SourceImpl.AttachToObject(this, "Source");
            }
            this.Proxy.StartDate = binStream.ReadDateTime();
            this.Proxy.Summary = binStream.ReadString();
            this.Proxy.SyncHash = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Body, xml, "Body", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Calendar != null ? this.Proxy.Calendar.ExportGuid : (Guid?)null, xml, "Calendar", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.EndDate, xml, "EndDate", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.IsAllDay, xml, "IsAllDay", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.IsViewReadOnly, xml, "IsViewReadOnly", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Location, xml, "Location", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ExportCompoundObject(this.Recurrence, xml, "Recurrence", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ExportCompoundObject(this.Source, xml, "Source", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.StartDate, xml, "StartDate", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Summary, xml, "Summary", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.SyncHash, xml, "SyncHash", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|Body":
                this.Proxy.Body = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|Calendar":
                this._fk_guid_Calendar = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|EndDate":
                this.Proxy.EndDate = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|IsAllDay":
                // Import must have default value set
                this.Proxy.IsAllDay = XmlStreamer.ReadBoolean(xml);
                this._isIsAllDaySet = true;
                break;
            case "Zetbox.App.Calendar|IsViewReadOnly":
                // Import must have default value set
                this.Proxy.IsViewReadOnly = XmlStreamer.ReadBoolean(xml);
                this._isIsViewReadOnlySet = true;
                break;
            case "Zetbox.App.Calendar|Location":
                this.Proxy.Location = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|Recurrence":
                XmlStreamer.MergeImportCompoundObject(this.RecurrenceImpl, xml);
                break;
            case "Zetbox.App.Calendar|Source":
                XmlStreamer.MergeImportCompoundObject(this.SourceImpl, xml);
                break;
            case "Zetbox.App.Calendar|StartDate":
                this.Proxy.StartDate = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Calendar|Summary":
                this.Proxy.Summary = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|SyncHash":
                this.Proxy.SyncHash = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }

        public class Event_RightsNHibernateImpl
        {
            public Event_RightsNHibernateImpl()
            {
            }

            public virtual int ID { get; set; }
            public virtual int Identity { get; set; }
            public virtual int Right { get; set; }
        }
}
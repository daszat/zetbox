// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// A container (book) for events
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("CalendarBook")]
    public class CalendarBookNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, CalendarBook, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("1450be5f-2266-4367-8a56-1f0bee5699c4");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public CalendarBookNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public CalendarBookNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new CalendarBookProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public CalendarBookNHibernateImpl(Func<IFrozenContext> lazyCtx, CalendarBookProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
            _isIsDeactivatedSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly CalendarBookProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("eab5c36d-7583-4e2f-8907-989ea0de6944"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.CalendarBook.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("cd5dfdf4-22ac-4a5d-831e-442f2a9349a5"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.CalendarBook.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("a14ab2a0-8621-42ed-81d0-b82e55621831"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.CalendarBook.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Base.Group> GroupReaders
		{
			get
			{
				if (_GroupReaders == null)
				{
					_GroupReaders 
						= new NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Group, Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl.Calendar_shared_r_GroupReaders_RelationEntryProxy, Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl>(
                                () => this.Proxy.GroupReaders,
                                p => (Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl.Calendar_shared_r_GroupReaders_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _GroupReaders.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("GroupReaders", null, null); if(OnGroupReaders_PostSetter != null && IsAttached) OnGroupReaders_PostSetter(this); };
                    if (GroupReaders_was_eagerLoaded) { GroupReaders_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Base.Group>)_GroupReaders;
			}
		}

		private NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Group, Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl> _GroupReaders;
		// ignored, but required for Serialization
        private bool GroupReaders_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchGroupReadersAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Group>>(this.GroupReaders);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.CalendarBook> OnGroupReaders_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnGroupReaders_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Base.Group> GroupWriters
		{
			get
			{
				if (_GroupWriters == null)
				{
					_GroupWriters 
						= new NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Group, Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl.Calendar_shared_w_GroupWriters_RelationEntryProxy, Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl>(
                                () => this.Proxy.GroupWriters,
                                p => (Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl.Calendar_shared_w_GroupWriters_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _GroupWriters.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("GroupWriters", null, null); if(OnGroupWriters_PostSetter != null && IsAttached) OnGroupWriters_PostSetter(this); };
                    if (GroupWriters_was_eagerLoaded) { GroupWriters_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Base.Group>)_GroupWriters;
			}
		}

		private NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Group, Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl> _GroupWriters;
		// ignored, but required for Serialization
        private bool GroupWriters_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchGroupWritersAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Group>>(this.GroupWriters);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.CalendarBook> OnGroupWriters_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnGroupWriters_IsValid;

        /// <summary>
        /// If true, the item will be hidden in any search
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool IsDeactivated
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchIsDeactivatedOrDefault();
                if (OnIsDeactivated_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsDeactivated_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsDeactivatedSet = true;
                if (Proxy.IsDeactivated != value)
                {
                    var __oldValue = Proxy.IsDeactivated;
                    var __newValue = value;
                    if (OnIsDeactivated_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDeactivated_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsDeactivated", __oldValue, __newValue);
                    Proxy.IsDeactivated = __newValue;
                    NotifyPropertyChanged("IsDeactivated", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsDeactivated_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDeactivated_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsDeactivated");
                }
            }
        }


        private bool FetchIsDeactivatedOrDefault()
        {
            var __result = Proxy.IsDeactivated;
                if (!_isIsDeactivatedSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("31fc6dbe-e1ad-4853-9aaf-01f9055cef67"));
                    if (__p != null) {
                        _isIsDeactivatedSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.IsDeactivated = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Calendar.CalendarBook.IsDeactivated'");
                    }
                }
            return __result;
        }

        private bool _isIsDeactivatedSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, bool> OnIsDeactivated_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, bool> OnIsDeactivated_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, bool> OnIsDeactivated_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnIsDeactivated_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Owner
        // fkBackingName=this.Proxy.Owner; fkGuidBackingName=_fk_guid_Owner;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity Owner
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Owner);

                if (OnOwner_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnOwner_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Owner == null)
                {
                    SetInitializedProperty("Owner");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Owner);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Owner");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Owner", __oldValue, __newValue);

                if (OnOwner_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnOwner_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Owner = null;
                }
                else
                {
                    this.Proxy.Owner = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Owner", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnOwner_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnOwner_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Owner's id, used on dehydration only</summary>
        private int? _fk_Owner = null;

        /// <summary>ForeignKey Property for Owner's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Owner
		{
			get { return Owner != null ? Owner.ID : (int?)null; }
			set { _fk_Owner = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchOwnerAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.Owner);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Owner
		public static event PropertyGetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnOwner_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnOwner_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity> OnOwner_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnOwner_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Base.Identity> Readers
		{
			get
			{
				if (_Readers == null)
				{
					_Readers 
						= new NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity, Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl.Calendar_shared_r_Readers_RelationEntryProxy, Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl>(
                                () => this.Proxy.Readers,
                                p => (Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl.Calendar_shared_r_Readers_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _Readers.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("Readers", null, null); if(OnReaders_PostSetter != null && IsAttached) OnReaders_PostSetter(this); };
                    if (Readers_was_eagerLoaded) { Readers_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Base.Identity>)_Readers;
			}
		}

		private NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity, Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl> _Readers;
		// ignored, but required for Serialization
        private bool Readers_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchReadersAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Identity>>(this.Readers);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.CalendarBook> OnReaders_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnReaders_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Base.Identity> Writers
		{
			get
			{
				if (_Writers == null)
				{
					_Writers 
						= new NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity, Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl.Calendar_shared_w_Writers_RelationEntryProxy, Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl>(
                                () => this.Proxy.Writers,
                                p => (Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl.Calendar_shared_w_Writers_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _Writers.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("Writers", null, null); if(OnWriters_PostSetter != null && IsAttached) OnWriters_PostSetter(this); };
                    if (Writers_was_eagerLoaded) { Writers_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Base.Identity>)_Writers;
			}
		}

		private NHibernateBSideCollectionWrapper<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Base.Identity, Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl> _Writers;
		// ignored, but required for Serialization
        private bool Writers_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchWritersAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Identity>>(this.Writers);
        }

public static event PropertyListChangedHandler<Zetbox.App.Calendar.CalendarBook> OnWriters_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.CalendarBook> OnWriters_IsValid;

        /// <summary>
        /// Gets a list of ViewModels that can create a new event. Multiple implementations can support different kind of events
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetNewEventViewModels_CalendarBook")]
        public virtual void GetNewEventViewModels(System.Object args)
        {
            // base.GetNewEventViewModels();
            if (OnGetNewEventViewModels_CalendarBook != null)
            {
                OnGetNewEventViewModels_CalendarBook(this, args);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method CalendarBook.GetNewEventViewModels");
            }
        }
        public delegate void GetNewEventViewModels_Handler<T>(T obj, System.Object args);
        public static event GetNewEventViewModels_Handler<CalendarBook> OnGetNewEventViewModels_CalendarBook;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<CalendarBook> OnGetNewEventViewModels_CalendarBook_CanExec;

        [EventBasedMethod("OnGetNewEventViewModels_CalendarBook_CanExec")]
        public virtual bool GetNewEventViewModelsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetNewEventViewModels_CalendarBook_CanExec != null)
				{
					OnGetNewEventViewModels_CalendarBook_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<CalendarBook> OnGetNewEventViewModels_CalendarBook_CanExecReason;

        [EventBasedMethod("OnGetNewEventViewModels_CalendarBook_CanExecReason")]
        public virtual string GetNewEventViewModelsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetNewEventViewModels_CalendarBook_CanExecReason != null)
				{
					OnGetNewEventViewModels_CalendarBook_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(CalendarBook);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (CalendarBook)obj;
            var otherImpl = (CalendarBookNHibernateImpl)obj;
            var me = (CalendarBook)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.IsDeactivated = other.IsDeactivated;
            me.Name = other.Name;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Owner = otherImpl._fk_Owner;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Owner":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Owner);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Owner", __oldValue, __newValue);
                        this.Proxy.Owner = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Owner", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "IsDeactivated":
                case "Name":
                case "Owner":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "GroupReaders":
                case "GroupWriters":
                case "Readers":
                case "Writers":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "GroupReaders":
                return TriggerFetchGroupReadersAsync();
            case "GroupWriters":
                return TriggerFetchGroupWritersAsync();
            case "Owner":
                return TriggerFetchOwnerAsync();
            case "Readers":
                return TriggerFetchReadersAsync();
            case "Writers":
                return TriggerFetchWritersAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_Owner.HasValue)
                this.Owner = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_Owner.Value));
            else
                this.Owner = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c74f0224-1302-4fc2-8629-837d7c96db34"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, DateTime>(
                        lazyCtx,
                        new Guid("eab5c36d-7583-4e2f-8907-989ea0de6944"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d86a1fd0-5bb1-4ce9-bdcb-9516bb09a401"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, DateTime>(
                        lazyCtx,
                        new Guid("cd5dfdf4-22ac-4a5d-831e-442f2a9349a5"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, Guid>(
                        lazyCtx,
                        new Guid("a14ab2a0-8621-42ed-81d0-b82e55621831"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<CalendarBook, ICollection<Zetbox.App.Base.Group>>(
                        lazyCtx,
                        new Guid("5ae7dd37-9789-47a6-b679-3ccaecbbb75d"),
                        "GroupReaders",
                        null,
                        obj => obj.GroupReaders,
                        null, // lists are read-only properties
                        obj => OnGroupReaders_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<CalendarBook, ICollection<Zetbox.App.Base.Group>>(
                        lazyCtx,
                        new Guid("d960ba8e-1605-4a70-b950-4e12c4c1ae75"),
                        "GroupWriters",
                        null,
                        obj => obj.GroupWriters,
                        null, // lists are read-only properties
                        obj => OnGroupWriters_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, bool>(
                        lazyCtx,
                        new Guid("31fc6dbe-e1ad-4853-9aaf-01f9055cef67"),
                        "IsDeactivated",
                        null,
                        obj => obj.IsDeactivated,
                        (obj, val) => obj.IsDeactivated = val,
						obj => OnIsDeactivated_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, string>(
                        lazyCtx,
                        new Guid("e1647548-92ee-4fae-9155-faad7d7e9187"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<CalendarBook, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("7e39185f-5826-481f-b0fd-bc0ffd1400ad"),
                        "Owner",
                        null,
                        obj => obj.Owner,
                        (obj, val) => obj.Owner = val,
						obj => OnOwner_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<CalendarBook, ICollection<Zetbox.App.Base.Identity>>(
                        lazyCtx,
                        new Guid("ebd1fd99-f1c9-4260-832d-5ef5c48e7660"),
                        "Readers",
                        null,
                        obj => obj.Readers,
                        null, // lists are read-only properties
                        obj => OnReaders_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<CalendarBook, ICollection<Zetbox.App.Base.Identity>>(
                        lazyCtx,
                        new Guid("e52271a9-ca1a-486d-95c0-795a502af48e"),
                        "Writers",
                        null,
                        obj => obj.Writers,
                        null, // lists are read-only properties
                        obj => OnWriters_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_CalendarBook")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_CalendarBook != null)
            {
                OnToString_CalendarBook(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<CalendarBook> OnToString_CalendarBook;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_CalendarBook")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_CalendarBook != null)
            {
                OnObjectIsValid_CalendarBook(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<CalendarBook> OnObjectIsValid_CalendarBook;

        [EventBasedMethod("OnNotifyPreSave_CalendarBook")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchIsDeactivatedOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_CalendarBook != null) OnNotifyPreSave_CalendarBook(this);
        }
        public static event ObjectEventHandler<CalendarBook> OnNotifyPreSave_CalendarBook;

        [EventBasedMethod("OnNotifyPostSave_CalendarBook")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_CalendarBook != null) OnNotifyPostSave_CalendarBook(this);
        }
        public static event ObjectEventHandler<CalendarBook> OnNotifyPostSave_CalendarBook;

        [EventBasedMethod("OnNotifyCreated_CalendarBook")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Owner");
            base.NotifyCreated();
            if (OnNotifyCreated_CalendarBook != null) OnNotifyCreated_CalendarBook(this);
        }
        public static event ObjectEventHandler<CalendarBook> OnNotifyCreated_CalendarBook;

        [EventBasedMethod("OnNotifyDeleting_CalendarBook")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_CalendarBook != null) OnNotifyDeleting_CalendarBook(this);

            // FK_Calendar_has_Owner
            if (Owner != null) {
                ((NHibernatePersistenceObject)Owner).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Owner);
            }
            // FK_Calendar_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_Calendar_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }
            // should fetch && remember parent for Event_of_Calendar_RelationEntry
            // should fetch && remember parent for SyncAccount_for_Calendar_RelationEntry

            GroupReaders.Clear();
            GroupWriters.Clear();
            Readers.Clear();
            Writers.Clear();
            ChangedBy = null;
            CreatedBy = null;
            Owner = null;
        }
        public static event ObjectEventHandler<CalendarBook> OnNotifyDeleting_CalendarBook;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class CalendarBookProxy
            : IProxyObject, ISortKey<int>
        {
            public CalendarBookProxy()
            {
                GroupReaders = new Collection<Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl.Calendar_shared_r_GroupReaders_RelationEntryProxy>();
                GroupWriters = new Collection<Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl.Calendar_shared_w_GroupWriters_RelationEntryProxy>();
                Readers = new Collection<Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl.Calendar_shared_r_Readers_RelationEntryProxy>();
                Writers = new Collection<Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl.Calendar_shared_w_Writers_RelationEntryProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(CalendarBookNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(CalendarBookProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.Calendar_shared_r_GroupReaders_RelationEntryNHibernateImpl.Calendar_shared_r_GroupReaders_RelationEntryProxy> GroupReaders { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.Calendar_shared_w_GroupWriters_RelationEntryNHibernateImpl.Calendar_shared_w_GroupWriters_RelationEntryProxy> GroupWriters { get; set; }

            public virtual bool IsDeactivated { get; set; }

            public virtual string Name { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy Owner { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.Calendar_shared_r_Readers_RelationEntryNHibernateImpl.Calendar_shared_r_Readers_RelationEntryProxy> Readers { get; set; }

            public virtual ICollection<Zetbox.App.Calendar.Calendar_shared_w_Writers_RelationEntryNHibernateImpl.Calendar_shared_w_Writers_RelationEntryProxy> Writers { get; set; }

            public virtual ICollection<CalendarBook_RightsNHibernateImpl> SecurityRightsCollectionImpl { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        private Zetbox.API.AccessRights? __currentAccessRights;
        public override Zetbox.API.AccessRights CurrentAccessRights
        {
           get { 
             if(Context == null) return Zetbox.API.AccessRights.Full;
             if(__currentAccessRights == null) { 
                 __currentAccessRights = base.CurrentAccessRights; 
                 var secRight = this.Proxy.SecurityRightsCollectionImpl != null ? this.Proxy.SecurityRightsCollectionImpl.SingleOrDefault(i => i.Identity == Context.Internals().IdentityID) : null;
                 __currentAccessRights |= secRight != null ? (Zetbox.API.AccessRights)secRight.Right : Zetbox.API.AccessRights.None; 
             } 
             return __currentAccessRights.Value; }
        }

        protected override void ResetCurrentAccessRights()
        {
                base.ResetCurrentAccessRights();
                __currentAccessRights = null;
        }


        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this._isIsDeactivatedSet);
            if (this._isIsDeactivatedSet) {
                binStream.Write(this.Proxy.IsDeactivated);
            }
            binStream.Write(this.Proxy.Name);
            binStream.Write(this.Proxy.Owner != null ? OurContext.GetIdFromProxy(this.Proxy.Owner) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this._isIsDeactivatedSet = binStream.ReadBoolean();
            if (this._isIsDeactivatedSet) {
                this.Proxy.IsDeactivated = binStream.ReadBoolean();
            }
            this.Proxy.Name = binStream.ReadString();
            binStream.Read(out this._fk_Owner);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.IsDeactivated, xml, "IsDeactivated", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|IsDeactivated":
                // Import must have default value set
                this.Proxy.IsDeactivated = XmlStreamer.ReadBoolean(xml);
                this._isIsDeactivatedSet = true;
                break;
            case "Zetbox.App.Calendar|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }

        public class CalendarBook_RightsNHibernateImpl
        {
            public CalendarBook_RightsNHibernateImpl()
            {
            }

            public virtual int ID { get; set; }
            public virtual int Identity { get; set; }
            public virtual int Right { get; set; }
        }
}
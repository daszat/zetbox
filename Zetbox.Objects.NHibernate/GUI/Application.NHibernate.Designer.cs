// <autogenerated/>

namespace Zetbox.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Represents a Zetbox Application
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Application")]
    public class ApplicationNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, Application, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("896187c2-2714-4430-8adb-6532612d7e0f");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public ApplicationNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ApplicationNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ApplicationProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ApplicationNHibernateImpl(Func<IFrozenContext> lazyCtx, ApplicationProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ApplicationProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("fc8b67d5-ab20-41bd-93f5-3833b72a51d4"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.GUI.Application.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("2bc68e86-956a-4f34-b875-6d99eea35129"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.GUI.Application.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("533c27c0-9fac-44e9-a7a1-60c10cf35bdc"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.GUI.Application.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Icon
        // fkBackingName=this.Proxy.Icon; fkGuidBackingName=_fk_guid_Icon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.Icon Icon
        {
            get
            {
                Zetbox.App.GUI.IconNHibernateImpl __value = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Icon);

                if (OnIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(__value);
                    OnIcon_Getter(this, e);
                    __value = (Zetbox.App.GUI.IconNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Icon == null)
                {
                    SetInitializedProperty("Icon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Icon);
                var __newValue = (Zetbox.App.GUI.IconNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Icon");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Icon", __oldValue, __newValue);

                if (OnIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Icon = null;
                }
                else
                {
                    this.Proxy.Icon = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Icon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnIcon_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Icon's id, used on dehydration only</summary>
        private int? _fk_Icon = null;

        /// <summary>ForeignKey Property for Icon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Icon
		{
			get { return Icon != null ? Icon.ID : (int?)null; }
			set { _fk_Icon = value; }
		}

        /// <summary>Backing store for Icon's guid, used on import only</summary>
        private Guid? _fk_guid_Icon = null;

    public Zetbox.API.Async.ZbTask TriggerFetchIconAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(this.Icon);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Icon
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.Icon> OnIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.Icon> OnIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.Icon> OnIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnIcon_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Module Module
        {
            get
            {
                Zetbox.App.Base.ModuleNHibernateImpl __value = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

    public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RootScreen
        // fkBackingName=this.Proxy.RootScreen; fkGuidBackingName=_fk_guid_RootScreen;
        // referencedInterface=Zetbox.App.GUI.NavigationScreen; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.NavigationScreen RootScreen
        {
            get
            {
                Zetbox.App.GUI.NavigationScreenNHibernateImpl __value = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RootScreen);

                if (OnRootScreen_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.NavigationScreen>(__value);
                    OnRootScreen_Getter(this, e);
                    __value = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.RootScreen == null)
                {
                    SetInitializedProperty("RootScreen");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RootScreen);
                var __newValue = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("RootScreen");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RootScreen", __oldValue, __newValue);

                if (OnRootScreen_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.NavigationScreen>(__oldValue, __newValue);
                    OnRootScreen_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.RootScreen = null;
                }
                else
                {
                    this.Proxy.RootScreen = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RootScreen", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnRootScreen_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.NavigationScreen>(__oldValue, __newValue);
                    OnRootScreen_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for RootScreen's id, used on dehydration only</summary>
        private int? _fk_RootScreen = null;

        /// <summary>ForeignKey Property for RootScreen's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RootScreen
		{
			get { return RootScreen != null ? RootScreen.ID : (int?)null; }
			set { _fk_RootScreen = value; }
		}

        /// <summary>Backing store for RootScreen's guid, used on import only</summary>
        private Guid? _fk_guid_RootScreen = null;

    public Zetbox.API.Async.ZbTask TriggerFetchRootScreenAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.NavigationScreen>(this.RootScreen);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RootScreen
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.NavigationScreen> OnRootScreen_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.NavigationScreen> OnRootScreen_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.NavigationScreen> OnRootScreen_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnRootScreen_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkspaceViewModel
        // fkBackingName=this.Proxy.WorkspaceViewModel; fkGuidBackingName=_fk_guid_WorkspaceViewModel;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.ViewModelDescriptor WorkspaceViewModel
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl __value = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkspaceViewModel);

                if (OnWorkspaceViewModel_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__value);
                    OnWorkspaceViewModel_Getter(this, e);
                    __value = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.WorkspaceViewModel == null)
                {
                    SetInitializedProperty("WorkspaceViewModel");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkspaceViewModel);
                var __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("WorkspaceViewModel");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("WorkspaceViewModel", __oldValue, __newValue);

                if (OnWorkspaceViewModel_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnWorkspaceViewModel_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.WorkspaceViewModel = null;
                }
                else
                {
                    this.Proxy.WorkspaceViewModel = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("WorkspaceViewModel", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnWorkspaceViewModel_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnWorkspaceViewModel_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for WorkspaceViewModel's id, used on dehydration only</summary>
        private int? _fk_WorkspaceViewModel = null;

        /// <summary>ForeignKey Property for WorkspaceViewModel's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_WorkspaceViewModel
		{
			get { return WorkspaceViewModel != null ? WorkspaceViewModel.ID : (int?)null; }
			set { _fk_WorkspaceViewModel = value; }
		}

        /// <summary>Backing store for WorkspaceViewModel's guid, used on import only</summary>
        private Guid? _fk_guid_WorkspaceViewModel = null;

    public Zetbox.API.Async.ZbTask TriggerFetchWorkspaceViewModelAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ViewModelDescriptor>(this.WorkspaceViewModel);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkspaceViewModel
		public static event PropertyGetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.ViewModelDescriptor> OnWorkspaceViewModel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.ViewModelDescriptor> OnWorkspaceViewModel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.Application, Zetbox.App.GUI.ViewModelDescriptor> OnWorkspaceViewModel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.Application> OnWorkspaceViewModel_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Application);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Application)obj;
            var otherImpl = (ApplicationNHibernateImpl)obj;
            var me = (Application)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Icon = otherImpl._fk_Icon;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_RootScreen = otherImpl._fk_RootScreen;
            this._fk_WorkspaceViewModel = otherImpl._fk_WorkspaceViewModel;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Icon":
                    {
                        var __oldValue = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Icon);
                        var __newValue = (Zetbox.App.GUI.IconNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Icon", __oldValue, __newValue);
                        this.Proxy.Icon = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Icon", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "RootScreen":
                    {
                        var __oldValue = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RootScreen);
                        var __newValue = (Zetbox.App.GUI.NavigationScreenNHibernateImpl)parentObj;
                        NotifyPropertyChanging("RootScreen", __oldValue, __newValue);
                        this.Proxy.RootScreen = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("RootScreen", __oldValue, __newValue);
                    }
                    break;
                case "WorkspaceViewModel":
                    {
                        var __oldValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.WorkspaceViewModel);
                        var __newValue = (Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)parentObj;
                        NotifyPropertyChanging("WorkspaceViewModel", __oldValue, __newValue);
                        this.Proxy.WorkspaceViewModel = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("WorkspaceViewModel", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "ExportGuid":
                case "Icon":
                case "Module":
                case "Name":
                case "RootScreen":
                case "WorkspaceViewModel":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Icon":
                return TriggerFetchIconAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "RootScreen":
                return TriggerFetchRootScreenAsync();
            case "WorkspaceViewModel":
                return TriggerFetchWorkspaceViewModelAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_guid_Icon.HasValue)
                this.Icon = ((Zetbox.App.GUI.IconNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_Icon.Value));
            else
            if (_fk_Icon.HasValue)
                this.Icon = ((Zetbox.App.GUI.IconNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_Icon.Value));
            else
                this.Icon = null;

            if (_fk_guid_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value));
            else
            if (_fk_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_Module.Value));
            else
                this.Module = null;

            if (_fk_guid_RootScreen.HasValue)
                this.RootScreen = ((Zetbox.App.GUI.NavigationScreenNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.NavigationScreen>(_fk_guid_RootScreen.Value));
            else
            if (_fk_RootScreen.HasValue)
                this.RootScreen = ((Zetbox.App.GUI.NavigationScreenNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.NavigationScreen>(_fk_RootScreen.Value));
            else
                this.RootScreen = null;

            if (_fk_guid_WorkspaceViewModel.HasValue)
                this.WorkspaceViewModel = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_WorkspaceViewModel.Value));
            else
            if (_fk_WorkspaceViewModel.HasValue)
                this.WorkspaceViewModel = ((Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_WorkspaceViewModel.Value));
            else
                this.WorkspaceViewModel = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("3a6ec182-98d9-472d-99a1-d1db671ccbb2"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, DateTime>(
                        lazyCtx,
                        new Guid("fc8b67d5-ab20-41bd-93f5-3833b72a51d4"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("61e96002-da83-40a1-85cd-825044ba4605"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, DateTime>(
                        lazyCtx,
                        new Guid("2bc68e86-956a-4f34-b875-6d99eea35129"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, string>(
                        lazyCtx,
                        new Guid("24fabe2c-de1d-4b67-970d-748a73c5e17d"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Guid>(
                        lazyCtx,
                        new Guid("533c27c0-9fac-44e9-a7a1-60c10cf35bdc"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("0943ff5e-cc21-4f3b-b3ed-a2a13beb0c97"),
                        "Icon",
                        null,
                        obj => obj.Icon,
                        (obj, val) => obj.Icon = val,
						obj => OnIcon_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("7bff4a39-c54c-43be-b276-6ab1ff5026db"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, string>(
                        lazyCtx,
                        new Guid("70bec122-0345-457c-9426-52168e033df1"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.GUI.NavigationScreen>(
                        lazyCtx,
                        new Guid("2232a206-1192-4937-8314-701073215cdb"),
                        "RootScreen",
                        null,
                        obj => obj.RootScreen,
                        (obj, val) => obj.RootScreen = val,
						obj => OnRootScreen_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Application, Zetbox.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("25e50509-3b29-46b1-9bdb-17a0bd2963c2"),
                        "WorkspaceViewModel",
                        null,
                        obj => obj.WorkspaceViewModel,
                        (obj, val) => obj.WorkspaceViewModel = val,
						obj => OnWorkspaceViewModel_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Application")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Application != null)
            {
                OnToString_Application(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Application> OnToString_Application;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Application")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Application != null)
            {
                OnObjectIsValid_Application(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Application> OnObjectIsValid_Application;

        [EventBasedMethod("OnNotifyPreSave_Application")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Application != null) OnNotifyPreSave_Application(this);
        }
        public static event ObjectEventHandler<Application> OnNotifyPreSave_Application;

        [EventBasedMethod("OnNotifyPostSave_Application")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Application != null) OnNotifyPostSave_Application(this);
        }
        public static event ObjectEventHandler<Application> OnNotifyPostSave_Application;

        [EventBasedMethod("OnNotifyCreated_Application")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Icon");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("RootScreen");
            SetNotInitializedProperty("WorkspaceViewModel");
            base.NotifyCreated();
            if (OnNotifyCreated_Application != null) OnNotifyCreated_Application(this);
        }
        public static event ObjectEventHandler<Application> OnNotifyCreated_Application;

        [EventBasedMethod("OnNotifyDeleting_Application")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Application != null) OnNotifyDeleting_Application(this);

            // FK_App_has_Icon
            if (Icon != null) {
                ((NHibernatePersistenceObject)Icon).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Icon);
            }
            // FK_Application_has_Module
            if (Module != null) {
                ((NHibernatePersistenceObject)Module).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Module);
            }
            // FK_Application_has_RootScreen
            if (RootScreen != null) {
                ((NHibernatePersistenceObject)RootScreen).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)RootScreen);
            }
            // FK_Application_opens_a_WorkspaceViewModel
            if (WorkspaceViewModel != null) {
                ((NHibernatePersistenceObject)WorkspaceViewModel).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)WorkspaceViewModel);
            }
            // FK_Application_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_Application_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }

            ChangedBy = null;
            CreatedBy = null;
            Icon = null;
            Module = null;
            RootScreen = null;
            WorkspaceViewModel = null;
        }
        public static event ObjectEventHandler<Application> OnNotifyDeleting_Application;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class ApplicationProxy
            : IProxyObject, ISortKey<int>
        {
            public ApplicationProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ApplicationNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ApplicationProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual Zetbox.App.GUI.IconNHibernateImpl.IconProxy Icon { get; set; }

            public virtual Zetbox.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

            public virtual string Name { get; set; }

            public virtual Zetbox.App.GUI.NavigationScreenNHibernateImpl.NavigationScreenProxy RootScreen { get; set; }

            public virtual Zetbox.App.GUI.ViewModelDescriptorNHibernateImpl.ViewModelDescriptorProxy WorkspaceViewModel { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this.Proxy.Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.Icon != null ? OurContext.GetIdFromProxy(this.Proxy.Icon) : (int?)null);
            binStream.Write(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null);
            binStream.Write(this.Proxy.Name);
            binStream.Write(this.Proxy.RootScreen != null ? OurContext.GetIdFromProxy(this.Proxy.RootScreen) : (int?)null);
            binStream.Write(this.Proxy.WorkspaceViewModel != null ? OurContext.GetIdFromProxy(this.Proxy.WorkspaceViewModel) : (int?)null);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this.Proxy.Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_Icon);
            binStream.Read(out this._fk_Module);
            this.Proxy.Name = binStream.ReadString();
            binStream.Read(out this._fk_RootScreen);
            binStream.Read(out this._fk_WorkspaceViewModel);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.Icon != null ? this.Proxy.Icon.ExportGuid : (Guid?)null, xml, "Icon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.RootScreen != null ? this.Proxy.RootScreen.ExportGuid : (Guid?)null, xml, "RootScreen", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.WorkspaceViewModel != null ? this.Proxy.WorkspaceViewModel.ExportGuid : (Guid?)null, xml, "WorkspaceViewModel", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.GUI|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.GUI|Description":
                this.Proxy.Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.GUI|Icon":
                this._fk_guid_Icon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|RootScreen":
                this._fk_guid_RootScreen = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|WorkspaceViewModel":
                this._fk_guid_WorkspaceViewModel = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

    }
}
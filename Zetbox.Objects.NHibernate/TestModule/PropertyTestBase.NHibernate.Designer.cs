// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("PropertyTestBase")]
    public abstract class PropertyTestBaseNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, PropertyTestBase
    {
        private static readonly Guid _objectClassID = new Guid("895d54f8-dc2a-4d53-a719-4d69dbb361d4");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public PropertyTestBaseNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public PropertyTestBaseNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new PropertyTestBaseProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public PropertyTestBaseNHibernateImpl(Func<IFrozenContext> lazyCtx, PropertyTestBaseProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly PropertyTestBaseProxy Proxy;

        public override Type GetImplementedInterface()
        {
            return typeof(PropertyTestBase);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (PropertyTestBase)obj;
            var otherImpl = (PropertyTestBaseNHibernateImpl)obj;
            var me = (PropertyTestBase)this;

        }
        public override void SetNew()
        {
            base.SetNew();
        }

        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_PropertyTestBase")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_PropertyTestBase != null)
            {
                OnToString_PropertyTestBase(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<PropertyTestBase> OnToString_PropertyTestBase;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_PropertyTestBase")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_PropertyTestBase != null)
            {
                OnObjectIsValid_PropertyTestBase(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<PropertyTestBase> OnObjectIsValid_PropertyTestBase;

        [EventBasedMethod("OnNotifyPreSave_PropertyTestBase")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_PropertyTestBase != null) OnNotifyPreSave_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyPreSave_PropertyTestBase;

        [EventBasedMethod("OnNotifyPostSave_PropertyTestBase")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_PropertyTestBase != null) OnNotifyPostSave_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyPostSave_PropertyTestBase;

        [EventBasedMethod("OnNotifyCreated_PropertyTestBase")]
        public override void NotifyCreated()
        {
            base.NotifyCreated();
            if (OnNotifyCreated_PropertyTestBase != null) OnNotifyCreated_PropertyTestBase(this);
        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyCreated_PropertyTestBase;

        [EventBasedMethod("OnNotifyDeleting_PropertyTestBase")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_PropertyTestBase != null) OnNotifyDeleting_PropertyTestBase(this);


        }
        public static event ObjectEventHandler<PropertyTestBase> OnNotifyDeleting_PropertyTestBase;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class PropertyTestBaseProxy
            : IProxyObject, ISortKey<int>
        {
            public PropertyTestBaseProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(PropertyTestBaseNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(PropertyTestBaseProxy); } }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}
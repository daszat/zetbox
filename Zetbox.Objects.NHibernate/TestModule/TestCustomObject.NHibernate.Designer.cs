// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("TestCustomObject")]
    public class TestCustomObjectNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, TestCustomObject
    {
        private static readonly Guid _objectClassID = new Guid("de155110-79cc-4dac-89d6-0916608be1fb");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public TestCustomObjectNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public TestCustomObjectNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new TestCustomObjectProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public TestCustomObjectNHibernateImpl(Func<IFrozenContext> lazyCtx, TestCustomObjectProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            if (this.Proxy.PhoneNumberMobile == null)
            {
                this.Proxy.PhoneNumberMobile = new Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl(this, "PhoneNumberMobile", lazyCtx, null);
            }
            else
            {
                this.Proxy.PhoneNumberMobile.AttachToObject(this, "PhoneNumberMobile");
            }

            if (this.Proxy.PhoneNumberOffice == null)
            {
                this.Proxy.PhoneNumberOffice = new Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl(this, "PhoneNumberOffice", lazyCtx, null);
            }
            else
            {
                this.Proxy.PhoneNumberOffice.AttachToObject(this, "PhoneNumberOffice");
            }

        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly TestCustomObjectProxy Proxy;

        /// <summary>
        /// Happy Birthday!
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime? Birthday
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Birthday;
                if (OnBirthday_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnBirthday_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Birthday != value)
                {
                    var __oldValue = Proxy.Birthday;
                    var __newValue = value;
                    if (OnBirthday_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Birthday", __oldValue, __newValue);
                    Proxy.Birthday = __newValue;
                    NotifyPropertyChanged("Birthday", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBirthday_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBirthday_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Birthday");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.TestCustomObject, DateTime?> OnBirthday_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.TestCustomObject, DateTime?> OnBirthday_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.TestCustomObject, DateTime?> OnBirthday_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnBirthday_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Test.Muhblah> MubBlah_List_Nav
        {
            get
            {
                if (_MubBlah_List_Nav == null)
                {
                    _MubBlah_List_Nav = new OneNRelationList<Zetbox.App.Test.Muhblah>(
                        "TestCustomObjects_Nav",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("MubBlah_List_Nav", null, null),
                        () => { this.NotifyPropertyChanged("MubBlah_List_Nav", null, null); if(OnMubBlah_List_Nav_PostSetter != null && IsAttached) OnMubBlah_List_Nav_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy, Zetbox.App.Test.Muhblah>(
                            () => Proxy.MubBlah_List_Nav,
                            p => (Zetbox.App.Test.Muhblah)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _MubBlah_List_Nav;
            }
        }
    
        private OneNRelationList<Zetbox.App.Test.Muhblah> _MubBlah_List_Nav;

        public Zetbox.API.Async.ZbTask TriggerFetchMubBlah_List_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Test.Muhblah>>(this.MubBlah_List_Nav);
        }

public static event PropertyListChangedHandler<Zetbox.App.Test.TestCustomObject> OnMubBlah_List_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnMubBlah_List_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MubBlah_Nav
        // fkBackingName=this.Proxy.MubBlah_Nav; fkGuidBackingName=_fk_guid_MubBlah_Nav;
        // referencedInterface=Zetbox.App.Test.Muhblah; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=TestCustomObjects_List_Nav; is list;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Test.Muhblah MubBlah_Nav
        {
            get
            {
                Zetbox.App.Test.MuhblahNHibernateImpl __value = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.MubBlah_Nav);

                if (OnMubBlah_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.Muhblah>(__value);
                    OnMubBlah_Nav_Getter(this, e);
                    __value = (Zetbox.App.Test.MuhblahNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.MubBlah_Nav == null)
                {
                    SetInitializedProperty("MubBlah_Nav");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.MubBlah_Nav);
                var __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("MubBlah_Nav");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);

                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("TestCustomObjects_List_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("TestCustomObjects_List_Nav", null, null);
                }

                if (OnMubBlah_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMubBlah_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.MubBlah_Nav = null;
                }
                else
                {
                    this.Proxy.MubBlah_Nav = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.TestCustomObjects_List_Nav as IRelationListSync<Zetbox.App.Test.TestCustomObject>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.TestCustomObjects_List_Nav as IRelationListSync<Zetbox.App.Test.TestCustomObject>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnMubBlah_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMubBlah_Nav_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for MubBlah_Nav's id, used on dehydration only</summary>
        private int? _fk_MubBlah_Nav = null;

        /// <summary>ForeignKey Property for MubBlah_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_MubBlah_Nav
		{
			get { return MubBlah_Nav != null ? MubBlah_Nav.ID : (int?)null; }
			set { _fk_MubBlah_Nav = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchMubBlah_NavAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.Muhblah>(this.MubBlah_Nav);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MubBlah_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMubBlah_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMubBlah_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMubBlah_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnMubBlah_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Test.Muhblah> MuhBlah_ManyList_Nav
		{
			get
			{
				if (_MuhBlah_ManyList_Nav == null)
				{
					_MuhBlah_ManyList_Nav 
						= new NHibernateASideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryProxy, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl>(
                                () => this.Proxy.MuhBlah_ManyList_Nav,
                                p => (Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _MuhBlah_ManyList_Nav.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("MuhBlah_ManyList_Nav", null, null); if(OnMuhBlah_ManyList_Nav_PostSetter != null && IsAttached) OnMuhBlah_ManyList_Nav_PostSetter(this); };
                    if (MuhBlah_ManyList_Nav_was_eagerLoaded) { MuhBlah_ManyList_Nav_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Test.Muhblah>)_MuhBlah_ManyList_Nav;
			}
		}

		private NHibernateASideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl> _MuhBlah_ManyList_Nav;
		// ignored, but required for Serialization
        private bool MuhBlah_ManyList_Nav_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchMuhBlah_ManyList_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Test.Muhblah>>(this.MuhBlah_ManyList_Nav);
        }

public static event PropertyListChangedHandler<Zetbox.App.Test.TestCustomObject> OnMuhBlah_ManyList_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnMuhBlah_ManyList_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
        // fkBackingName=this.Proxy.MuhBlah_One_Nav; fkGuidBackingName=_fk_guid_MuhBlah_One_Nav;
        // referencedInterface=Zetbox.App.Test.Muhblah; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=TestCustomObjects_One_Nav; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Test.Muhblah MuhBlah_One_Nav
        {
            get
            {
                Zetbox.App.Test.MuhblahNHibernateImpl __value = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.MuhBlah_One_Nav);

                if (OnMuhBlah_One_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.Muhblah>(__value);
                    OnMuhBlah_One_Nav_Getter(this, e);
                    __value = (Zetbox.App.Test.MuhblahNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.MuhBlah_One_Nav == null)
                {
                    SetInitializedProperty("MuhBlah_One_Nav");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.MuhBlah_One_Nav);
                var __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("MuhBlah_One_Nav");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("MuhBlah_One_Nav", __oldValue, __newValue);

                if (OnMuhBlah_One_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMuhBlah_One_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.MuhBlah_One_Nav = null;
                }
                else
                {
                    this.Proxy.MuhBlah_One_Nav = __newValue.Proxy;
                }

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.TestCustomObjects_One_Nav = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.TestCustomObjects_One_Nav = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("MuhBlah_One_Nav", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnMuhBlah_One_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.Muhblah>(__oldValue, __newValue);
                    OnMuhBlah_One_Nav_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for MuhBlah_One_Nav's id, used on dehydration only</summary>
        private int? _fk_MuhBlah_One_Nav = null;

        /// <summary>ForeignKey Property for MuhBlah_One_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_MuhBlah_One_Nav
		{
			get { return MuhBlah_One_Nav != null ? MuhBlah_One_Nav.ID : (int?)null; }
			set { _fk_MuhBlah_One_Nav = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchMuhBlah_One_NavAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.Muhblah>(this.MuhBlah_One_Nav);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for MuhBlah_One_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMuhBlah_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMuhBlah_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.Muhblah> OnMuhBlah_One_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnMuhBlah_One_Nav_IsValid;

        /// <summary>
        /// Person&amp;apos;s Name
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string PersonName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.PersonName;
                if (OnPersonName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPersonName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.PersonName != value)
                {
                    var __oldValue = Proxy.PersonName;
                    var __newValue = value;
                    if (OnPersonName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("PersonName", __oldValue, __newValue);
                    Proxy.PersonName = __newValue;
                    NotifyPropertyChanged("PersonName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnPersonName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPersonName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("PersonName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.TestCustomObject, string> OnPersonName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.TestCustomObject, string> OnPersonName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.TestCustomObject, string> OnPersonName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnPersonName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestPhoneCompoundObject PhoneNumberMobile
        {
            get { return PhoneNumberMobileImpl; }
            set { PhoneNumberMobileImpl = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)value; }
        }

        /// <summary>backing property for PhoneNumberMobile, takes care of attaching/detaching the values</summary>
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl PhoneNumberMobileImpl
        {
            get
            {
                return this.Proxy.PhoneNumberMobile;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.PhoneNumberMobile, value))
                {
                    var __oldValue = this.Proxy.PhoneNumberMobile;
                    var __newValue = value;

                    NotifyPropertyChanging("PhoneNumberMobile", __oldValue, __newValue);

                    if (this.Proxy.PhoneNumberMobile != null)
                    {
                        this.Proxy.PhoneNumberMobile.DetachFromObject(this, "PhoneNumberMobile");
                    }
                    __newValue = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)__newValue.Clone();
                    this.Proxy.PhoneNumberMobile = __newValue;
                    this.Proxy.PhoneNumberMobile.AttachToObject(this, "PhoneNumberMobile");

                    NotifyPropertyChanged("PhoneNumberMobile", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnPhoneNumberMobile_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestPhoneCompoundObject PhoneNumberOffice
        {
            get { return PhoneNumberOfficeImpl; }
            set { PhoneNumberOfficeImpl = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)value; }
        }

        /// <summary>backing property for PhoneNumberOffice, takes care of attaching/detaching the values</summary>
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl PhoneNumberOfficeImpl
        {
            get
            {
                return this.Proxy.PhoneNumberOffice;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(this.Proxy.PhoneNumberOffice, value))
                {
                    var __oldValue = this.Proxy.PhoneNumberOffice;
                    var __newValue = value;

                    NotifyPropertyChanging("PhoneNumberOffice", __oldValue, __newValue);

                    if (this.Proxy.PhoneNumberOffice != null)
                    {
                        this.Proxy.PhoneNumberOffice.DetachFromObject(this, "PhoneNumberOffice");
                    }
                    __newValue = (Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl)__newValue.Clone();
                    this.Proxy.PhoneNumberOffice = __newValue;
                    this.Proxy.PhoneNumberOffice.AttachToObject(this, "PhoneNumberOffice");

                    NotifyPropertyChanged("PhoneNumberOffice", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnPhoneNumberOffice_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject list property

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty
        public ICollection<Zetbox.App.Test.TestPhoneCompoundObject> PhoneNumbersOther
        {
            get
            {
                if (_PhoneNumbersOther == null)
                {
                    _PhoneNumbersOther = new ClientValueCollectionWrapper<TestCustomObject, Zetbox.App.Test.TestPhoneCompoundObject, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntry, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl, ICollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl>>(
                            this.Context,
                            this,
                            () => { this.NotifyPropertyChanged("PhoneNumbersOther", null, null); if(OnPhoneNumbersOther_PostSetter != null && IsAttached) OnPhoneNumbersOther_PostSetter(this); },
                            PhoneNumbersOtherCollection);
                }
                return _PhoneNumbersOther;
            }
        }

        private ProjectedCollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl> PhoneNumbersOtherCollection
        {
            get {
                if (_PhoneNumbersOtherCollection == null)
                {
                    _PhoneNumbersOtherCollection = new ProjectedCollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl>(
                        () => this.Proxy.PhoneNumbersOther,
                        p => (Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                        d => (Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy)((NHibernatePersistenceObject)d).NHibernateProxy);
                }
                return _PhoneNumbersOtherCollection;
            }
        }

        private ClientValueCollectionWrapper<TestCustomObject, Zetbox.App.Test.TestPhoneCompoundObject, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntry, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl, ICollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl>> _PhoneNumbersOther;
        private ProjectedCollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy, Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl> _PhoneNumbersOtherCollection;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ValueCollectionProperty
public static event PropertyListChangedHandler<Zetbox.App.Test.TestCustomObject> OnPhoneNumbersOther_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.TestCustomObject> OnPhoneNumbersOther_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestCustomObject)obj;
            var otherImpl = (TestCustomObjectNHibernateImpl)obj;
            var me = (TestCustomObject)this;

            me.Birthday = other.Birthday;
            me.PersonName = other.PersonName;
            if (me.PhoneNumberMobile == null && other.PhoneNumberMobile != null) {
                me.PhoneNumberMobile = (Zetbox.App.Test.TestPhoneCompoundObject)other.PhoneNumberMobile.Clone();
            } else if (me.PhoneNumberMobile != null && other.PhoneNumberMobile == null) {
                me.PhoneNumberMobile = null;
            } else if (me.PhoneNumberMobile != null && other.PhoneNumberMobile != null) {
                me.PhoneNumberMobile.ApplyChangesFrom(other.PhoneNumberMobile);
            }
            if (me.PhoneNumberOffice == null && other.PhoneNumberOffice != null) {
                me.PhoneNumberOffice = (Zetbox.App.Test.TestPhoneCompoundObject)other.PhoneNumberOffice.Clone();
            } else if (me.PhoneNumberOffice != null && other.PhoneNumberOffice == null) {
                me.PhoneNumberOffice = null;
            } else if (me.PhoneNumberOffice != null && other.PhoneNumberOffice != null) {
                me.PhoneNumberOffice.ApplyChangesFrom(other.PhoneNumberOffice);
            }
            this._fk_MubBlah_Nav = otherImpl._fk_MubBlah_Nav;
            this._fk_MuhBlah_One_Nav = otherImpl._fk_MuhBlah_One_Nav;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "MubBlah_Nav":
                    {
                        var __oldValue = (Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.MubBlah_Nav);
                        var __newValue = (Zetbox.App.Test.MuhblahNHibernateImpl)parentObj;
                        NotifyPropertyChanging("MubBlah_Nav", __oldValue, __newValue);
                        this.Proxy.MubBlah_Nav = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("MubBlah_Nav", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Birthday":
                case "MubBlah_Nav":
                case "MuhBlah_One_Nav":
                case "PersonName":
                case "PhoneNumberMobile":
                case "PhoneNumberOffice":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "MubBlah_List_Nav":
                case "MuhBlah_ManyList_Nav":
                case "MuhBlah_One_Nav":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "MubBlah_List_Nav":
                return TriggerFetchMubBlah_List_NavAsync();
            case "MubBlah_Nav":
                return TriggerFetchMubBlah_NavAsync();
            case "MuhBlah_ManyList_Nav":
                return TriggerFetchMuhBlah_ManyList_NavAsync();
            case "MuhBlah_One_Nav":
                return TriggerFetchMuhBlah_One_NavAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_MubBlah_Nav.HasValue)
                this.MubBlah_Nav = ((Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.Muhblah>(_fk_MubBlah_Nav.Value));
            else
                this.MubBlah_Nav = null;

            if (_fk_MuhBlah_One_Nav.HasValue)
                this.MuhBlah_One_Nav = ((Zetbox.App.Test.MuhblahNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Test.Muhblah>(_fk_MuhBlah_One_Nav.Value));
            else
                this.MuhBlah_One_Nav = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, DateTime?>(
                        lazyCtx,
                        new Guid("bdcf86b8-4c47-4c50-b340-d9323344c7f0"),
                        "Birthday",
                        null,
                        obj => obj.Birthday,
                        (obj, val) => obj.Birthday = val,
						obj => OnBirthday_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, ICollection<Zetbox.App.Test.Muhblah>>(
                        lazyCtx,
                        new Guid("4a929ef5-f211-47b4-92c3-4961da6d5173"),
                        "MubBlah_List_Nav",
                        null,
                        obj => obj.MubBlah_List_Nav,
                        null, // lists are read-only properties
                        obj => OnMubBlah_List_Nav_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, Zetbox.App.Test.Muhblah>(
                        lazyCtx,
                        new Guid("3251497d-5214-4e42-976e-f36c3d9541de"),
                        "MubBlah_Nav",
                        null,
                        obj => obj.MubBlah_Nav,
                        (obj, val) => obj.MubBlah_Nav = val,
						obj => OnMubBlah_Nav_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, ICollection<Zetbox.App.Test.Muhblah>>(
                        lazyCtx,
                        new Guid("9c4217f2-47d8-47b5-a324-7601ecabc7b0"),
                        "MuhBlah_ManyList_Nav",
                        null,
                        obj => obj.MuhBlah_ManyList_Nav,
                        null, // lists are read-only properties
                        obj => OnMuhBlah_ManyList_Nav_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, Zetbox.App.Test.Muhblah>(
                        lazyCtx,
                        new Guid("e7b207d3-5d25-4716-85b3-564f10eac210"),
                        "MuhBlah_One_Nav",
                        null,
                        obj => obj.MuhBlah_One_Nav,
                        (obj, val) => obj.MuhBlah_One_Nav = val,
						obj => OnMuhBlah_One_Nav_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, string>(
                        lazyCtx,
                        new Guid("bd501a1f-a0a3-4ddf-b6c2-8fdc9ffdfabd"),
                        "PersonName",
                        null,
                        obj => obj.PersonName,
                        (obj, val) => obj.PersonName = val,
						obj => OnPersonName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, Zetbox.App.Test.TestPhoneCompoundObject>(
                        lazyCtx,
                        new Guid("05e41070-e88a-4270-ab1c-94cd2e7d41d1"),
                        "PhoneNumberMobile",
                        null,
                        obj => obj.PhoneNumberMobile,
                        (obj, val) => obj.PhoneNumberMobile = val,
						obj => OnPhoneNumberMobile_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, Zetbox.App.Test.TestPhoneCompoundObject>(
                        lazyCtx,
                        new Guid("465e10ec-4e5e-4e8f-831f-44562dd0d68b"),
                        "PhoneNumberOffice",
                        null,
                        obj => obj.PhoneNumberOffice,
                        (obj, val) => obj.PhoneNumberOffice = val,
						obj => OnPhoneNumberOffice_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<TestCustomObject, ICollection<Zetbox.App.Test.TestPhoneCompoundObject>>(
                        lazyCtx,
                        new Guid("0c0c1101-118a-4ce2-806c-d30a03b19dde"),
                        "PhoneNumbersOther",
                        null,
                        obj => obj.PhoneNumbersOther,
                        null, // lists are read-only properties
                        obj => OnPhoneNumbersOther_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_TestCustomObject")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_TestCustomObject != null)
            {
                OnToString_TestCustomObject(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<TestCustomObject> OnToString_TestCustomObject;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_TestCustomObject")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_TestCustomObject != null)
            {
                OnObjectIsValid_TestCustomObject(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<TestCustomObject> OnObjectIsValid_TestCustomObject;

        [EventBasedMethod("OnNotifyPreSave_TestCustomObject")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_TestCustomObject != null) OnNotifyPreSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyPreSave_TestCustomObject;

        [EventBasedMethod("OnNotifyPostSave_TestCustomObject")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_TestCustomObject != null) OnNotifyPostSave_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyPostSave_TestCustomObject;

        [EventBasedMethod("OnNotifyCreated_TestCustomObject")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Birthday");
            SetNotInitializedProperty("MubBlah_Nav");
            SetNotInitializedProperty("MuhBlah_One_Nav");
            SetNotInitializedProperty("PersonName");
            base.NotifyCreated();
            if (OnNotifyCreated_TestCustomObject != null) OnNotifyCreated_TestCustomObject(this);
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyCreated_TestCustomObject;

        [EventBasedMethod("OnNotifyDeleting_TestCustomObject")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_TestCustomObject != null) OnNotifyDeleting_TestCustomObject(this);
            foreach(NHibernatePersistenceObject x in PhoneNumbersOtherCollection) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }

            // FK_MB_Lst_Role_hasOther_TCO_Role ZeroOrMore
            foreach(NHibernatePersistenceObject x in MubBlah_List_Nav) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_MB_One_Role_loves_TCO_One_Role
            if (MuhBlah_One_Nav != null) {
                ((NHibernatePersistenceObject)MuhBlah_One_Nav).ParentsToDelete.Add(this);
                ChildrenToDelete.Add((NHibernatePersistenceObject)MuhBlah_One_Nav);
            }
            // FK_MB_Role_has_TCO_Lst_Role
            if (MubBlah_Nav != null) {
                ((NHibernatePersistenceObject)MubBlah_Nav).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)MubBlah_Nav);
            }

            MubBlah_List_Nav.Clear();
            MuhBlah_ManyList_Nav.Clear();
            PhoneNumbersOther.Clear();
            MubBlah_Nav = null;
            MuhBlah_One_Nav = null;
        }
        public static event ObjectEventHandler<TestCustomObject> OnNotifyDeleting_TestCustomObject;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class TestCustomObjectProxy
            : IProxyObject, ISortKey<int>
        {
            public TestCustomObjectProxy()
            {
                MubBlah_List_Nav = new Collection<Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy>();
                MuhBlah_ManyList_Nav = new Collection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryProxy>();
                PhoneNumbersOther = new Collection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(TestCustomObjectNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(TestCustomObjectProxy); } }

            public virtual DateTime? Birthday { get; set; }

            public virtual ICollection<Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy> MubBlah_List_Nav { get; set; }

            public virtual Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy MubBlah_Nav { get; set; }

            public virtual ICollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryNHibernateImpl.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryProxy> MuhBlah_ManyList_Nav { get; set; }

            public virtual Zetbox.App.Test.MuhblahNHibernateImpl.MuhblahProxy MuhBlah_One_Nav { get; set; }

            public virtual string PersonName { get; set; }

            public virtual Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl PhoneNumberMobile { get; set; }

            public virtual Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl PhoneNumberOffice { get; set; }

            public virtual ICollection<Zetbox.App.Test.TestCustomObject_PhoneNumbersOther_CollectionEntryNHibernateImpl.TestCustomObject_PhoneNumbersOther_CollectionEntryProxy> PhoneNumbersOther { get; set; }

            public virtual int? PhoneNumbersOther_pos { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.Birthday);
            binStream.Write(this.Proxy.MubBlah_Nav != null ? OurContext.GetIdFromProxy(this.Proxy.MubBlah_Nav) : (int?)null);
            binStream.Write(this.Proxy.MuhBlah_One_Nav != null ? OurContext.GetIdFromProxy(this.Proxy.MuhBlah_One_Nav) : (int?)null);
            binStream.Write(this.Proxy.PersonName);
            binStream.Write(this.PhoneNumberMobile);
            binStream.Write(this.PhoneNumberOffice);
            binStream.WriteCollectionEntries(this.PhoneNumbersOtherCollection);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this.Proxy.Birthday = binStream.ReadNullableDateTime();
            binStream.Read(out this._fk_MubBlah_Nav);
            binStream.Read(out this._fk_MuhBlah_One_Nav);
            this.Proxy.PersonName = binStream.ReadString();
            {
                // use backing store to avoid notifications
                this.PhoneNumberMobileImpl = binStream.ReadCompoundObject<Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl>();
                this.PhoneNumberMobileImpl.AttachToObject(this, "PhoneNumberMobile");
            }
            {
                // use backing store to avoid notifications
                this.PhoneNumberOfficeImpl = binStream.ReadCompoundObject<Zetbox.App.Test.TestPhoneCompoundObjectNHibernateImpl>();
                this.PhoneNumberOfficeImpl.AttachToObject(this, "PhoneNumberOffice");
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}
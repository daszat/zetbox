// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Metadefinition Object for Modules.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Module")]
    public class ModuleNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, Module, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("8a1ace7c-77f2-4b48-9b0b-bcb68c660d11");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public ModuleNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public ModuleNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new ModuleProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public ModuleNHibernateImpl(Func<IFrozenContext> lazyCtx, ModuleProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly ModuleProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("75aedd67-e42d-461d-9263-c301d15b54f0"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.Module.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("c6370ff5-115a-441d-a688-28297c9e46f8"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.Module.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnCreatedOn_IsValid;

        /// <summary>
        /// Description of this Module
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("75e3db82-220c-474e-973a-ceb65fd8386d"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.Module.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnExportGuid_IsValid;

        /// <summary>
        /// Name des Moduls
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnName_IsValid;

        /// <summary>
        /// CLR Namespace des Moduls
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Namespace
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Namespace;
                if (OnNamespace_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnNamespace_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Namespace != value)
                {
                    var __oldValue = Proxy.Namespace;
                    var __newValue = value;
                    if (OnNamespace_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnNamespace_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Namespace", __oldValue, __newValue);
                    Proxy.Namespace = __newValue;
                    NotifyPropertyChanged("Namespace", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnNamespace_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnNamespace_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Namespace");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, string> OnNamespace_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, string> OnNamespace_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, string> OnNamespace_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnNamespace_IsValid;

        /// <summary>
        /// Name of the database schema
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string SchemaName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.SchemaName;
                if (OnSchemaName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSchemaName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.SchemaName != value)
                {
                    var __oldValue = Proxy.SchemaName;
                    var __newValue = value;
                    if (OnSchemaName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchemaName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("SchemaName", __oldValue, __newValue);
                    Proxy.SchemaName = __newValue;
                    NotifyPropertyChanged("SchemaName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSchemaName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSchemaName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("SchemaName");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Module, string> OnSchemaName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Module, string> OnSchemaName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Module, string> OnSchemaName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Module> OnSchemaName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_Module")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_Module != null)
            {
                OnGetName_Module(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Module.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<Module> OnGetName_Module;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Module> OnGetName_Module_CanExec;

        [EventBasedMethod("OnGetName_Module_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_Module_CanExec != null)
				{
					OnGetName_Module_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Module> OnGetName_Module_CanExecReason;

        [EventBasedMethod("OnGetName_Module_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_Module_CanExecReason != null)
				{
					OnGetName_Module_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Module);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Module)obj;
            var otherImpl = (ModuleNHibernateImpl)obj;
            var me = (Module)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            me.Namespace = other.Namespace;
            me.SchemaName = other.SchemaName;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "ExportGuid":
                case "Name":
                case "Namespace":
                case "SchemaName":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d1cad06b-040e-417c-8e43-67fa2e861649"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, DateTime>(
                        lazyCtx,
                        new Guid("75aedd67-e42d-461d-9263-c301d15b54f0"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("7b76322d-c8cd-4845-9cb4-b77f572692be"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, DateTime>(
                        lazyCtx,
                        new Guid("c6370ff5-115a-441d-a688-28297c9e46f8"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, string>(
                        lazyCtx,
                        new Guid("79408b86-1731-42ad-89b2-ed5c567fbf8a"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, Guid>(
                        lazyCtx,
                        new Guid("75e3db82-220c-474e-973a-ceb65fd8386d"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, string>(
                        lazyCtx,
                        new Guid("63facb30-d8f7-42f6-8c14-85933d5f94b8"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, string>(
                        lazyCtx,
                        new Guid("36d2b9e7-d6b9-4a9c-a363-7e059a637919"),
                        "Namespace",
                        null,
                        obj => obj.Namespace,
                        (obj, val) => obj.Namespace = val,
						obj => OnNamespace_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<Module, string>(
                        lazyCtx,
                        new Guid("247ecea2-c8f7-4b30-9c16-8c02128413c8"),
                        "SchemaName",
                        null,
                        obj => obj.SchemaName,
                        (obj, val) => obj.SchemaName = val,
						obj => OnSchemaName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Module")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Module != null)
            {
                OnToString_Module(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Module> OnToString_Module;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Module")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Module != null)
            {
                OnObjectIsValid_Module(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Module> OnObjectIsValid_Module;

        [EventBasedMethod("OnNotifyPreSave_Module")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_Module != null) OnNotifyPreSave_Module(this);
        }
        public static event ObjectEventHandler<Module> OnNotifyPreSave_Module;

        [EventBasedMethod("OnNotifyPostSave_Module")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Module != null) OnNotifyPostSave_Module(this);
        }
        public static event ObjectEventHandler<Module> OnNotifyPostSave_Module;

        [EventBasedMethod("OnNotifyCreated_Module")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Namespace");
            SetNotInitializedProperty("SchemaName");
            base.NotifyCreated();
            if (OnNotifyCreated_Module != null) OnNotifyCreated_Module(this);
        }
        public static event ObjectEventHandler<Module> OnNotifyCreated_Module;

        [EventBasedMethod("OnNotifyDeleting_Module")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Module != null) OnNotifyDeleting_Module(this);

            // should fetch && remember parent for AbstractModuleMember_has_Module_RelationEntry
            // should fetch && remember parent for AccessControl_has_Module_RelationEntry
            // should fetch && remember parent for Application_has_Module_RelationEntry
            // should fetch && remember parent for BaseProperty_has_Module_RelationEntry
            // should fetch && remember parent for ControlKind_has_Module_RelationEntry
            // should fetch && remember parent for FilterConfiguration_has_Module_RelationEntry
            // should fetch && remember parent for Group_has_Module_RelationEntry
            // should fetch && remember parent for Icon_has_Module_RelationEntry
            // should fetch && remember parent for Method_has_Module_RelationEntry
            // should fetch && remember parent for MigrationProject_migrates_to_Module_RelationEntry
            // should fetch && remember parent for Module_contains_Assemblies_RelationEntry
            // should fetch && remember parent for Module_contains_DataTypes_RelationEntry
            // should fetch && remember parent for Module_has_Relation_RelationEntry
            // FK_Module_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_Module_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }
            // should fetch && remember parent for NavigationScreen_has_Module_RelationEntry
            // should fetch && remember parent for Sequence_has_Module_RelationEntry
            // should fetch && remember parent for ServiceDescriptor_has_Module_RelationEntry
            // should fetch && remember parent for ViewDescriptor_has_Module_RelationEntry
            // should fetch && remember parent for ViewModelDescriptor_has_Module_RelationEntry
            // should fetch && remember parent for WorkSchedule_has_Module_RelationEntry
            // should fetch && remember parent for WorkScheduleRule_has_Module_RelationEntry

            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Module> OnNotifyDeleting_Module;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class ModuleProxy
            : IProxyObject, ISortKey<int>
        {
            public ModuleProxy()
            {
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(ModuleNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(ModuleProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual string Name { get; set; }

            public virtual string Namespace { get; set; }

            public virtual string SchemaName { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this.Proxy.Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.Name);
            binStream.Write(this.Proxy.Namespace);
            binStream.Write(this.Proxy.SchemaName);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            this.Proxy.Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this.Proxy.Name = binStream.ReadString();
            this.Proxy.Namespace = binStream.ReadString();
            this.Proxy.SchemaName = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Namespace, xml, "Namespace", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.SchemaName, xml, "SchemaName", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|Description":
                this.Proxy.Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Namespace":
                this.Proxy.Namespace = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|SchemaName":
                this.Proxy.SchemaName = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
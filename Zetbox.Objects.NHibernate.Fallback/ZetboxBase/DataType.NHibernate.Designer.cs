// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.API.Utils;
    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.NHibernate;

    /// <summary>
    /// Base Metadefinition Object for Objectclasses, Interfaces, CompoundObjects and Enumerations.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DataType")]
    public abstract class DataTypeNHibernateImpl : Zetbox.DalProvider.NHibernate.DataObjectNHibernateImpl, DataType, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("6f005f31-c09c-45f9-9bcb-44090ebf0d1f");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        public DataTypeNHibernateImpl()
            : this(null)
        {
        }

        /// <summary>Create a new unattached instance</summary>
        public DataTypeNHibernateImpl(Func<IFrozenContext> lazyCtx)
            : this(lazyCtx, new DataTypeProxy())
        {
        }

        /// <summary>Create a instance, wrapping the specified proxy</summary>
        public DataTypeNHibernateImpl(Func<IFrozenContext> lazyCtx, DataTypeProxy proxy)
            : base(lazyCtx) // do not pass proxy to base data object
        {
            this.Proxy = proxy;
            _isChangedOnSet = Proxy.ID > 0;
            _isCreatedOnSet = Proxy.ID > 0;
            _isExportGuidSet = Proxy.ID > 0;
            _isShowIconInListsSet = Proxy.ID > 0;
            _isShowIdInListsSet = Proxy.ID > 0;
            _isShowNameInListsSet = Proxy.ID > 0;
        }

        /// <summary>the NHibernate proxy of the represented entity</summary>
        internal readonly DataTypeProxy Proxy;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=this.Proxy.ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);

                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.ChangedBy == null)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.ChangedBy = null;
                }
                else
                {
                    this.Proxy.ChangedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for ChangedBy's id, used on dehydration only</summary>
        private int? _fk_ChangedBy = null;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchChangedOnOrDefault();
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (Proxy.ChangedOn != value)
                {
                    var __oldValue = Proxy.ChangedOn;
                    var __newValue = value;
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    Proxy.ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }


        private DateTime FetchChangedOnOrDefault()
        {
            var __result = Proxy.ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.ChangedOn'");
                    }
                }
            return __result;
        }

        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.InstanceConstraint> Constraints
        {
            get
            {
                if (_Constraints == null)
                {
                    _Constraints = new OneNRelationList<Zetbox.App.Base.InstanceConstraint>(
                        "Constrained",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Constraints", null, null),
                        () => { this.NotifyPropertyChanged("Constraints", null, null); if(OnConstraints_PostSetter != null && IsAttached) OnConstraints_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Base.InstanceConstraintNHibernateImpl.InstanceConstraintProxy, Zetbox.App.Base.InstanceConstraint>(
                            () => Proxy.Constraints,
                            p => (Zetbox.App.Base.InstanceConstraint)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Base.InstanceConstraintNHibernateImpl.InstanceConstraintProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Constraints;
            }
        }
    
        private OneNRelationList<Zetbox.App.Base.InstanceConstraint> _Constraints;
        private List<int> ConstraintsIds;
        private bool Constraints_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchConstraintsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.InstanceConstraint>>(this.Constraints);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnConstraints_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnConstraints_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=this.Proxy.CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get
            {
                Zetbox.App.Base.IdentityNHibernateImpl __value = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);

                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.CreatedBy == null)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.CreatedBy = null;
                }
                else
                {
                    this.Proxy.CreatedBy = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for CreatedBy's id, used on dehydration only</summary>
        private int? _fk_CreatedBy = null;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


    public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchCreatedOnOrDefault();
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (Proxy.CreatedOn != value)
                {
                    var __oldValue = Proxy.CreatedOn;
                    var __newValue = value;
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    Proxy.CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }


        private DateTime FetchCreatedOnOrDefault()
        {
            var __result = Proxy.CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.CreatedOn'");
                    }
                }
            return __result;
        }

        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnCreatedOn_IsValid;

        /// <summary>
        /// Standard Icon wenn IIcon nicht implementiert ist
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
        // fkBackingName=this.Proxy.DefaultIcon; fkGuidBackingName=_fk_guid_DefaultIcon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.Icon DefaultIcon
        {
            get
            {
                Zetbox.App.GUI.IconNHibernateImpl __value = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultIcon);

                if (OnDefaultIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(__value);
                    OnDefaultIcon_Getter(this, e);
                    __value = (Zetbox.App.GUI.IconNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.DefaultIcon == null)
                {
                    SetInitializedProperty("DefaultIcon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultIcon);
                var __newValue = (Zetbox.App.GUI.IconNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("DefaultIcon");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);

                if (OnDefaultIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.DefaultIcon = null;
                }
                else
                {
                    this.Proxy.DefaultIcon = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for DefaultIcon's id, used on dehydration only</summary>
        private int? _fk_DefaultIcon = null;

        /// <summary>ForeignKey Property for DefaultIcon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultIcon
		{
			get { return DefaultIcon != null ? DefaultIcon.ID : (int?)null; }
			set { _fk_DefaultIcon = value; }
		}

        /// <summary>Backing store for DefaultIcon's guid, used on import only</summary>
        private Guid? _fk_guid_DefaultIcon = null;

    public Zetbox.API.Async.ZbTask TriggerFetchDefaultIconAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(this.DefaultIcon);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnDefaultIcon_IsValid;

        /// <summary>
        /// Description of this DataType
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Description != value)
                {
                    var __oldValue = Proxy.Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    Proxy.Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchExportGuidOrDefault();
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (Proxy.ExportGuid != value)
                {
                    var __oldValue = Proxy.ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    Proxy.ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }


        private Guid FetchExportGuidOrDefault()
        {
            var __result = Proxy.ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.ExportGuid'");
                    }
                }
            return __result;
        }

        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnExportGuid_IsValid;

        /// <summary>
        /// A HTML string with a help text
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string HelpText
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.HelpText;
                if (OnHelpText_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnHelpText_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.HelpText != value)
                {
                    var __oldValue = Proxy.HelpText;
                    var __newValue = value;
                    if (OnHelpText_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("HelpText", __oldValue, __newValue);
                    Proxy.HelpText = __newValue;
                    NotifyPropertyChanged("HelpText", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnHelpText_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("HelpText");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnHelpText_IsValid;

        /// <summary>
        /// Interfaces der Objektklasse
        /// </summary>
        // collection entry list property
   		// Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.CollectionEntryListProperty
		public ICollection<Zetbox.App.Base.Interface> ImplementsInterfaces
		{
			get
			{
				if (_ImplementsInterfaces == null)
				{
					_ImplementsInterfaces 
						= new NHibernateBSideCollectionWrapper<Zetbox.App.Base.DataType, Zetbox.App.Base.Interface, Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl>(
							this, 
							new ProjectedCollection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl.DataType_implements_ImplementedInterfaces_RelationEntryProxy, Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl>(
                                () => this.Proxy.ImplementsInterfaces,
                                p => (Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl)OurContext.AttachAndWrap(p),
                                ce => (Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl.DataType_implements_ImplementedInterfaces_RelationEntryProxy)((NHibernatePersistenceObject)ce).NHibernateProxy));
                    _ImplementsInterfaces.CollectionChanged += (s, e) => { this.NotifyPropertyChanged("ImplementsInterfaces", null, null); if(OnImplementsInterfaces_PostSetter != null && IsAttached) OnImplementsInterfaces_PostSetter(this); };
                    if (ImplementsInterfaces_was_eagerLoaded) { ImplementsInterfaces_was_eagerLoaded = false; }
				}
				return (ICollection<Zetbox.App.Base.Interface>)_ImplementsInterfaces;
			}
		}

		private NHibernateBSideCollectionWrapper<Zetbox.App.Base.DataType, Zetbox.App.Base.Interface, Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl> _ImplementsInterfaces;
		// ignored, but required for Serialization
        private bool ImplementsInterfaces_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchImplementsInterfacesAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Interface>>(this.ImplementsInterfaces);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnImplementsInterfaces_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnImplementsInterfaces_IsValid;

        /// <summary>
        /// Liste aller Methoden der Objektklasse.
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.Method> Methods
        {
            get
            {
                if (_Methods == null)
                {
                    _Methods = new OneNRelationList<Zetbox.App.Base.Method>(
                        "ObjectClass",
                        null,
                        this,
                        () => this.NotifyPropertyChanging("Methods", null, null),
                        () => { this.NotifyPropertyChanged("Methods", null, null); if(OnMethods_PostSetter != null && IsAttached) OnMethods_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Base.MethodNHibernateImpl.MethodProxy, Zetbox.App.Base.Method>(
                            () => Proxy.Methods,
                            p => (Zetbox.App.Base.Method)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Base.MethodNHibernateImpl.MethodProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Methods;
            }
        }
    
        private OneNRelationList<Zetbox.App.Base.Method> _Methods;
        private List<int> MethodsIds;
        private bool Methods_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchMethodsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Method>>(this.Methods);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnMethods_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnMethods_IsValid;

        /// <summary>
        /// Modul der Objektklasse
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=this.Proxy.Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.Base.Module Module
        {
            get
            {
                Zetbox.App.Base.ModuleNHibernateImpl __value = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);

                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.Module == null)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.Module = null;
                }
                else
                {
                    this.Proxy.Module = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for Module's id, used on dehydration only</summary>
        private int? _fk_Module = null;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        /// <summary>Backing store for Module's guid, used on import only</summary>
        private Guid? _fk_guid_Module = null;

    public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnModule_IsValid;

        /// <summary>
        /// Der Name der Objektklasse
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = Proxy.Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (Proxy.Name != value)
                {
                    var __oldValue = Proxy.Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    Proxy.Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnName_IsValid;

        /// <summary>
        /// Eigenschaften der Objektklasse
        /// </summary>
        // object list property

        // Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Zetbox.App.Base.Property> Properties
        {
            get
            {
                if (_Properties == null)
                {
                    _Properties = new OneNRelationList<Zetbox.App.Base.Property>(
                        "ObjectClass",
                        "Properties_pos",
                        this,
                        () => this.NotifyPropertyChanging("Properties", null, null),
                        () => { this.NotifyPropertyChanged("Properties", null, null); if(OnProperties_PostSetter != null && IsAttached) OnProperties_PostSetter(this); },
                        new ProjectedCollection<Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy, Zetbox.App.Base.Property>(
                            () => Proxy.Properties,
                            p => (Zetbox.App.Base.Property)OurContext.AttachAndWrap(p),
                            d => (Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return _Properties;
            }
        }
    
        private OneNRelationList<Zetbox.App.Base.Property> _Properties;
        private List<int> PropertiesIds;
        private bool Properties_was_eagerLoaded = false;

        public Zetbox.API.Async.ZbTask TriggerFetchPropertiesAsync()
        {
            return new Zetbox.API.Async.ZbTask<IList<Zetbox.App.Base.Property>>(this.Properties);
        }

public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnProperties_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnProperties_IsValid;

        /// <summary>
        /// Optional requested ControlKind
        /// </summary>
        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
        // fkBackingName=this.Proxy.RequestedKind; fkGuidBackingName=_fk_guid_RequestedKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		[System.Runtime.Serialization.IgnoreDataMember]
        public Zetbox.App.GUI.ControlKind RequestedKind
        {
            get
            {
                Zetbox.App.GUI.ControlKindNHibernateImpl __value = (Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);

                if (OnRequestedKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnRequestedKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noop with nulls
                if (value == null && this.Proxy.RequestedKind == null)
                {
                    SetInitializedProperty("RequestedKind");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);
                var __newValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)value;

                // shortcut noop on objects
                // can't use proxy's ID here, since that might be INVALIDID before persisting the first time.
                if (__oldValue == __newValue)
                {
                    SetInitializedProperty("RequestedKind");
                    return;
                }

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)e.Result;
                }

                // next, set the local reference
                if (__newValue == null)
                {
                    this.Proxy.RequestedKind = null;
                }
                else
                {
                    this.Proxy.RequestedKind = __newValue.Proxy;
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnRequestedKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PostSetter(this, e);
                }
            }
        }

        /// <summary>Backing store for RequestedKind's id, used on dehydration only</summary>
        private int? _fk_RequestedKind = null;

        /// <summary>ForeignKey Property for RequestedKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RequestedKind
		{
			get { return RequestedKind != null ? RequestedKind.ID : (int?)null; }
			set { _fk_RequestedKind = value; }
		}

        /// <summary>Backing store for RequestedKind's guid, used on import only</summary>
        private Guid? _fk_guid_RequestedKind = null;

    public Zetbox.API.Async.ZbTask TriggerFetchRequestedKindAsync()
    {
        return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.RequestedKind);
    }

        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnRequestedKind_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool ShowIconInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchShowIconInListsOrDefault();
                if (OnShowIconInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIconInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowIconInListsSet = true;
                if (Proxy.ShowIconInLists != value)
                {
                    var __oldValue = Proxy.ShowIconInLists;
                    var __newValue = value;
                    if (OnShowIconInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIconInLists", __oldValue, __newValue);
                    Proxy.ShowIconInLists = __newValue;
                    NotifyPropertyChanged("ShowIconInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowIconInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowIconInLists");
                }
            }
        }


        private bool FetchShowIconInListsOrDefault()
        {
            var __result = Proxy.ShowIconInLists;
                if (!_isShowIconInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"));
                    if (__p != null) {
                        _isShowIconInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ShowIconInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.ShowIconInLists'");
                    }
                }
            return __result;
        }

        private bool _isShowIconInListsSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowIconInLists_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool ShowIdInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchShowIdInListsOrDefault();
                if (OnShowIdInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIdInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowIdInListsSet = true;
                if (Proxy.ShowIdInLists != value)
                {
                    var __oldValue = Proxy.ShowIdInLists;
                    var __newValue = value;
                    if (OnShowIdInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIdInLists", __oldValue, __newValue);
                    Proxy.ShowIdInLists = __newValue;
                    NotifyPropertyChanged("ShowIdInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowIdInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowIdInLists");
                }
            }
        }


        private bool FetchShowIdInListsOrDefault()
        {
            var __result = Proxy.ShowIdInLists;
                if (!_isShowIdInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"));
                    if (__p != null) {
                        _isShowIdInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ShowIdInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.ShowIdInLists'");
                    }
                }
            return __result;
        }

        private bool _isShowIdInListsSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowIdInLists_IsValid;

        /// <summary>
        /// 
        /// </summary>

        // BEGIN Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
        public bool ShowNameInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = FetchShowNameInListsOrDefault();
                if (OnShowNameInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowNameInLists_Getter(this, __e);
                    __result = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowNameInListsSet = true;
                if (Proxy.ShowNameInLists != value)
                {
                    var __oldValue = Proxy.ShowNameInLists;
                    var __newValue = value;
                    if (OnShowNameInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowNameInLists", __oldValue, __newValue);
                    Proxy.ShowNameInLists = __newValue;
                    NotifyPropertyChanged("ShowNameInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowNameInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowNameInLists");
                }
            }
        }


        private bool FetchShowNameInListsOrDefault()
        {
            var __result = Proxy.ShowNameInLists;
                if (!_isShowNameInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"));
                    if (__p != null) {
                        _isShowNameInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this.Proxy.ShowNameInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Zetbox.App.Base.DataType.ShowNameInLists'");
                    }
                }
            return __result;
        }

        private bool _isShowNameInListsSet = false;
        // END Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ProxyProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowNameInLists_IsValid;

        /// <summary>
        /// Property wizard
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAddProperty_DataType")]
        public virtual Zetbox.App.Base.Property AddProperty()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Property>();
            if (OnAddProperty_DataType != null)
            {
                OnAddProperty_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.AddProperty");
            }
            return e.Result;
        }
        public delegate void AddProperty_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Property> ret);
        public static event AddProperty_Handler<DataType> OnAddProperty_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnAddProperty_DataType_CanExec;

        [EventBasedMethod("OnAddProperty_DataType_CanExec")]
        public virtual bool AddPropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAddProperty_DataType_CanExec != null)
				{
					OnAddProperty_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnAddProperty_DataType_CanExecReason;

        [EventBasedMethod("OnAddProperty_DataType_CanExecReason")]
        public virtual string AddPropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAddProperty_DataType_CanExecReason != null)
				{
					OnAddProperty_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_DataType")]
        public virtual System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_DataType != null)
            {
                OnGetDataType_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataType");
            }
            return e.Result;
        }
        public delegate void GetDataType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
        public static event GetDataType_Handler<DataType> OnGetDataType_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnGetDataType_DataType_CanExec;

        [EventBasedMethod("OnGetDataType_DataType_CanExec")]
        public virtual bool GetDataTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataType_DataType_CanExec != null)
				{
					OnGetDataType_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnGetDataType_DataType_CanExecReason;

        [EventBasedMethod("OnGetDataType_DataType_CanExecReason")]
        public virtual string GetDataTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataType_DataType_CanExecReason != null)
				{
					OnGetDataType_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_DataType")]
        public virtual string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_DataType != null)
            {
                OnGetDataTypeString_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataTypeString");
            }
            return e.Result;
        }
        public delegate void GetDataTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetDataTypeString_Handler<DataType> OnGetDataTypeString_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnGetDataTypeString_DataType_CanExec;

        [EventBasedMethod("OnGetDataTypeString_DataType_CanExec")]
        public virtual bool GetDataTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataTypeString_DataType_CanExec != null)
				{
					OnGetDataTypeString_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnGetDataTypeString_DataType_CanExecReason;

        [EventBasedMethod("OnGetDataTypeString_DataType_CanExecReason")]
        public virtual string GetDataTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataTypeString_DataType_CanExecReason != null)
				{
					OnGetDataTypeString_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnImplementInterfaces_DataType")]
        public virtual void ImplementInterfaces()
        {
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_DataType != null)
            {
                OnImplementInterfaces_DataType(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method DataType.ImplementInterfaces");
            }
        }
        public delegate void ImplementInterfaces_Handler<T>(T obj);
        public static event ImplementInterfaces_Handler<DataType> OnImplementInterfaces_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnImplementInterfaces_DataType_CanExec;

        [EventBasedMethod("OnImplementInterfaces_DataType_CanExec")]
        public virtual bool ImplementInterfacesCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnImplementInterfaces_DataType_CanExec != null)
				{
					OnImplementInterfaces_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnImplementInterfaces_DataType_CanExecReason;

        [EventBasedMethod("OnImplementInterfaces_DataType_CanExecReason")]
        public virtual string ImplementInterfacesCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnImplementInterfaces_DataType_CanExecReason != null)
				{
					OnImplementInterfaces_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(DataType);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType)obj;
            var otherImpl = (DataTypeNHibernateImpl)obj;
            var me = (DataType)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.HelpText = other.HelpText;
            me.Name = other.Name;
            me.ShowIconInLists = other.ShowIconInLists;
            me.ShowIdInLists = other.ShowIdInLists;
            me.ShowNameInLists = other.ShowNameInLists;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DefaultIcon = otherImpl._fk_DefaultIcon;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_RequestedKind = otherImpl._fk_RequestedKind;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.ChangedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        this.Proxy.ChangedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = (Zetbox.App.Base.IdentityNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.CreatedBy);
                        var __newValue = (Zetbox.App.Base.IdentityNHibernateImpl)parentObj;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        this.Proxy.CreatedBy = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "DefaultIcon":
                    {
                        var __oldValue = (Zetbox.App.GUI.IconNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.DefaultIcon);
                        var __newValue = (Zetbox.App.GUI.IconNHibernateImpl)parentObj;
                        NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);
                        this.Proxy.DefaultIcon = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = (Zetbox.App.Base.ModuleNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.Module);
                        var __newValue = (Zetbox.App.Base.ModuleNHibernateImpl)parentObj;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        this.Proxy.Module = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "RequestedKind":
                    {
                        var __oldValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.AttachAndWrap(this.Proxy.RequestedKind);
                        var __newValue = (Zetbox.App.GUI.ControlKindNHibernateImpl)parentObj;
                        NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);
                        this.Proxy.RequestedKind = __newValue == null ? null : __newValue.Proxy;
                        NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "DefaultIcon":
                case "Description":
                case "ExportGuid":
                case "HelpText":
                case "Module":
                case "Name":
                case "RequestedKind":
                case "ShowIconInLists":
                case "ShowIdInLists":
                case "ShowNameInLists":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Constraints":
                case "ImplementsInterfaces":
                case "Methods":
                case "Properties":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "Constraints":
                return TriggerFetchConstraintsAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "DefaultIcon":
                return TriggerFetchDefaultIconAsync();
            case "ImplementsInterfaces":
                return TriggerFetchImplementsInterfacesAsync();
            case "Methods":
                return TriggerFetchMethodsAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "Properties":
                return TriggerFetchPropertiesAsync();
            case "RequestedKind":
                return TriggerFetchRequestedKindAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                this.ChangedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value));
            else
                this.ChangedBy = null;

            if (_fk_CreatedBy.HasValue)
                this.CreatedBy = ((Zetbox.App.Base.IdentityNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value));
            else
                this.CreatedBy = null;

            if (_fk_guid_DefaultIcon.HasValue)
                this.DefaultIcon = ((Zetbox.App.GUI.IconNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_DefaultIcon.Value));
            else
            if (_fk_DefaultIcon.HasValue)
                this.DefaultIcon = ((Zetbox.App.GUI.IconNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_DefaultIcon.Value));
            else
                this.DefaultIcon = null;

            if (_fk_guid_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value));
            else
            if (_fk_Module.HasValue)
                this.Module = ((Zetbox.App.Base.ModuleNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_Module.Value));
            else
                this.Module = null;

            if (_fk_guid_RequestedKind.HasValue)
                this.RequestedKind = ((Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_RequestedKind.Value));
            else
            if (_fk_RequestedKind.HasValue)
                this.RequestedKind = ((Zetbox.App.GUI.ControlKindNHibernateImpl)OurContext.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_RequestedKind.Value));
            else
                this.RequestedKind = null;
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c007156e-5bb3-4c4e-8cb3-5823892a893b"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, DateTime>(
                        lazyCtx,
                        new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<DataType, ICollection<Zetbox.App.Base.InstanceConstraint>>(
                        lazyCtx,
                        new Guid("eda15826-7251-4726-9f6b-65e7f24f6ad1"),
                        "Constraints",
                        null,
                        obj => obj.Constraints,
                        null, // lists are read-only properties
                        obj => OnConstraints_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("5c2ec701-9e7e-4340-a463-4fc2b8204f5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, DateTime>(
                        lazyCtx,
                        new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("b1402cda-de87-4b2a-bd65-a950b8dd7a9f"),
                        "DefaultIcon",
                        null,
                        obj => obj.DefaultIcon,
                        (obj, val) => obj.DefaultIcon = val,
						obj => OnDefaultIcon_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, string>(
                        lazyCtx,
                        new Guid("2cffd4f2-cb84-4f39-9bd1-19fd2e160bad"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Guid>(
                        lazyCtx,
                        new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, string>(
                        lazyCtx,
                        new Guid("35f1afb3-eb6f-455d-9794-4f1f2825cbb1"),
                        "HelpText",
                        null,
                        obj => obj.HelpText,
                        (obj, val) => obj.HelpText = val,
						obj => OnHelpText_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<DataType, ICollection<Zetbox.App.Base.Interface>>(
                        lazyCtx,
                        new Guid("a9ec04c2-0807-4d6c-a96a-824d13e5c571"),
                        "ImplementsInterfaces",
                        null,
                        obj => obj.ImplementsInterfaces,
                        null, // lists are read-only properties
                        obj => OnImplementsInterfaces_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<DataType, ICollection<Zetbox.App.Base.Method>>(
                        lazyCtx,
                        new Guid("e9f8a1f1-a5ed-44a6-bbf3-9b040766f19f"),
                        "Methods",
                        null,
                        obj => obj.Methods,
                        null, // lists are read-only properties
                        obj => OnMethods_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("4e1fb30b-e528-4968-95b0-f3a38eafe643"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, string>(
                        lazyCtx,
                        new Guid("083bbf12-aac6-4f5f-802a-d3701550bc84"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorNHibernateImpl<DataType, IList<Zetbox.App.Base.Property>>(
                        lazyCtx,
                        new Guid("e7d91162-0aa8-4fe3-9e29-d0519781ceb7"),
                        "Properties",
                        null,
                        obj => obj.Properties,
                        null, // lists are read-only properties
                        obj => OnProperties_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("bd244ed4-5c39-4783-a03d-7bb31a8884fc"),
                        "RequestedKind",
                        null,
                        obj => obj.RequestedKind,
                        (obj, val) => obj.RequestedKind = val,
						obj => OnRequestedKind_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"),
                        "ShowIconInLists",
                        null,
                        obj => obj.ShowIconInLists,
                        (obj, val) => obj.ShowIconInLists = val,
						obj => OnShowIconInLists_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"),
                        "ShowIdInLists",
                        null,
                        obj => obj.ShowIdInLists,
                        (obj, val) => obj.ShowIdInLists = val,
						obj => OnShowIdInLists_IsValid), 
                    // else
                    new PropertyDescriptorNHibernateImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"),
                        "ShowNameInLists",
                        null,
                        obj => obj.ShowNameInLists,
                        (obj, val) => obj.ShowNameInLists = val,
						obj => OnShowNameInLists_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DataType")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DataType != null)
            {
                OnToString_DataType(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DataType> OnToString_DataType;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_DataType")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_DataType != null)
            {
                OnObjectIsValid_DataType(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<DataType> OnObjectIsValid_DataType;

        [EventBasedMethod("OnNotifyPreSave_DataType")]
        public override void NotifyPreSave()
        {
            FetchChangedOnOrDefault();
            FetchCreatedOnOrDefault();
            FetchExportGuidOrDefault();
            FetchShowIconInListsOrDefault();
            FetchShowIdInListsOrDefault();
            FetchShowNameInListsOrDefault();
            base.NotifyPreSave();
            if (OnNotifyPreSave_DataType != null) OnNotifyPreSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyPreSave_DataType;

        [EventBasedMethod("OnNotifyPostSave_DataType")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_DataType != null) OnNotifyPostSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyPostSave_DataType;

        [EventBasedMethod("OnNotifyCreated_DataType")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DefaultIcon");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("HelpText");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("RequestedKind");
            base.NotifyCreated();
            if (OnNotifyCreated_DataType != null) OnNotifyCreated_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyCreated_DataType;

        [EventBasedMethod("OnNotifyDeleting_DataType")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_DataType != null) OnNotifyDeleting_DataType(this);

            // FK_Constraint_on_Constrained ZeroOrMore
            foreach(NHibernatePersistenceObject x in Constraints) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_DataType_has_DefaultIcon
            if (DefaultIcon != null) {
                ((NHibernatePersistenceObject)DefaultIcon).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)DefaultIcon);
            }
            // FK_DataType_may_request_ControlKind
            if (RequestedKind != null) {
                ((NHibernatePersistenceObject)RequestedKind).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)RequestedKind);
            }
            // FK_DataType_was_ChangedBy
            if (ChangedBy != null) {
                ((NHibernatePersistenceObject)ChangedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)ChangedBy);
            }
            // FK_DataType_was_CreatedBy
            if (CreatedBy != null) {
                ((NHibernatePersistenceObject)CreatedBy).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)CreatedBy);
            }
            // FK_Module_contains_DataTypes
            if (Module != null) {
                ((NHibernatePersistenceObject)Module).ChildrenToDelete.Add(this);
                ParentsToDelete.Add((NHibernatePersistenceObject)Module);
            }
            // FK_ObjectClass_has_Methods ZeroOrMore
            foreach(NHibernatePersistenceObject x in Methods) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }
            // FK_ObjectClass_has_Properties ZeroOrMore
            foreach(NHibernatePersistenceObject x in Properties) {
                x.ParentsToDelete.Add(this);
                ChildrenToDelete.Add(x);
            }

            Constraints.Clear();
            ImplementsInterfaces.Clear();
            Methods.Clear();
            Properties.Clear();
            ChangedBy = null;
            CreatedBy = null;
            DefaultIcon = null;
            Module = null;
            RequestedKind = null;
        }
        public static event ObjectEventHandler<DataType> OnNotifyDeleting_DataType;

        #endregion // Zetbox.DalProvider.NHibernate.Generator.Templates.ObjectClasses.DefaultMethods

        public class DataTypeProxy
            : IProxyObject, ISortKey<int>
        {
            public DataTypeProxy()
            {
                Constraints = new Collection<Zetbox.App.Base.InstanceConstraintNHibernateImpl.InstanceConstraintProxy>();
                ImplementsInterfaces = new Collection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl.DataType_implements_ImplementedInterfaces_RelationEntryProxy>();
                Methods = new Collection<Zetbox.App.Base.MethodNHibernateImpl.MethodProxy>();
                Properties = new Collection<Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy>();
            }

            public virtual int ID { get; set; }

            public virtual Type ZetboxWrapper { get { return typeof(DataTypeNHibernateImpl); } }
            public virtual Type ZetboxProxy { get { return typeof(DataTypeProxy); } }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy ChangedBy { get; set; }

            public virtual DateTime ChangedOn { get; set; }

            public virtual ICollection<Zetbox.App.Base.InstanceConstraintNHibernateImpl.InstanceConstraintProxy> Constraints { get; set; }

            public virtual Zetbox.App.Base.IdentityNHibernateImpl.IdentityProxy CreatedBy { get; set; }

            public virtual DateTime CreatedOn { get; set; }

            public virtual Zetbox.App.GUI.IconNHibernateImpl.IconProxy DefaultIcon { get; set; }

            public virtual string Description { get; set; }

            public virtual Guid ExportGuid { get; set; }

            public virtual string HelpText { get; set; }

            public virtual ICollection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryNHibernateImpl.DataType_implements_ImplementedInterfaces_RelationEntryProxy> ImplementsInterfaces { get; set; }

            public virtual ICollection<Zetbox.App.Base.MethodNHibernateImpl.MethodProxy> Methods { get; set; }

            public virtual Zetbox.App.Base.ModuleNHibernateImpl.ModuleProxy Module { get; set; }

            public virtual string Name { get; set; }

            public virtual ICollection<Zetbox.App.Base.PropertyNHibernateImpl.PropertyProxy> Properties { get; set; }

            public virtual Zetbox.App.GUI.ControlKindNHibernateImpl.ControlKindProxy RequestedKind { get; set; }

            public virtual bool ShowIconInLists { get; set; }

            public virtual bool ShowIdInLists { get; set; }

            public virtual bool ShowNameInLists { get; set; }


			[System.Runtime.Serialization.IgnoreDataMember]
			int ISortKey<int>.InternalSortKey { get { return ID; } }
        }

        // make proxy available for the provider
        [System.Runtime.Serialization.IgnoreDataMember]
        public override IProxyObject NHibernateProxy { get { return Proxy; } }
        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.Proxy.ChangedBy != null ? OurContext.GetIdFromProxy(this.Proxy.ChangedBy) : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this.Proxy.ChangedOn);
            }

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Constraints.Count);
                foreach(var obj in Constraints)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(this.Proxy.CreatedBy != null ? OurContext.GetIdFromProxy(this.Proxy.CreatedBy) : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this.Proxy.CreatedOn);
            }
            binStream.Write(this.Proxy.DefaultIcon != null ? OurContext.GetIdFromProxy(this.Proxy.DefaultIcon) : (int?)null);
            binStream.Write(this.Proxy.Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this.Proxy.ExportGuid);
            }
            binStream.Write(this.Proxy.HelpText);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Methods.Count);
                foreach(var obj in Methods)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(this.Proxy.Module != null ? OurContext.GetIdFromProxy(this.Proxy.Module) : (int?)null);
            binStream.Write(this.Proxy.Name);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Properties.Count);
                foreach(var obj in Properties)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(this.Proxy.RequestedKind != null ? OurContext.GetIdFromProxy(this.Proxy.RequestedKind) : (int?)null);
            binStream.Write(this._isShowIconInListsSet);
            if (this._isShowIconInListsSet) {
                binStream.Write(this.Proxy.ShowIconInLists);
            }
            binStream.Write(this._isShowIdInListsSet);
            if (this._isShowIdInListsSet) {
                binStream.Write(this.Proxy.ShowIdInLists);
            }
            binStream.Write(this._isShowNameInListsSet);
            if (this._isShowNameInListsSet) {
                binStream.Write(this.Proxy.ShowNameInLists);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this.Proxy.ChangedOn = binStream.ReadDateTime();
            }

            Constraints_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    ConstraintsIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        ConstraintsIds.Add(id);
                    }
                }
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this.Proxy.CreatedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_DefaultIcon);
            this.Proxy.Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this.Proxy.ExportGuid = binStream.ReadGuid();
            }
            this.Proxy.HelpText = binStream.ReadString();

            Methods_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    MethodsIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        MethodsIds.Add(id);
                    }
                }
            }
            binStream.Read(out this._fk_Module);
            this.Proxy.Name = binStream.ReadString();

            Properties_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    PropertiesIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        PropertiesIds.Add(id);
                    }
                }
            }
            binStream.Read(out this._fk_RequestedKind);
            this._isShowIconInListsSet = binStream.ReadBoolean();
            if (this._isShowIconInListsSet) {
                this.Proxy.ShowIconInLists = binStream.ReadBoolean();
            }
            this._isShowIdInListsSet = binStream.ReadBoolean();
            if (this._isShowIdInListsSet) {
                this.Proxy.ShowIdInLists = binStream.ReadBoolean();
            }
            this._isShowNameInListsSet = binStream.ReadBoolean();
            if (this._isShowNameInListsSet) {
                this.Proxy.ShowNameInLists = binStream.ReadBoolean();
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this.Proxy.ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.DefaultIcon != null ? this.Proxy.DefaultIcon.ExportGuid : (Guid?)null, xml, "DefaultIcon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.HelpText, xml, "HelpText", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Module != null ? this.Proxy.Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this.Proxy.Name, xml, "Name", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.RequestedKind != null ? this.Proxy.RequestedKind.ExportGuid : (Guid?)null, xml, "RequestedKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.ShowIconInLists, xml, "ShowIconInLists", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.ShowIdInLists, xml, "ShowIdInLists", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this.Proxy.ShowNameInLists, xml, "ShowNameInLists", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this.Proxy.ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this.Proxy.CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.GUI|DefaultIcon":
                this._fk_guid_DefaultIcon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Description":
                this.Proxy.Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this.Proxy.ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|HelpText":
                this.Proxy.HelpText = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Name":
                this.Proxy.Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|RequestedKind":
                this._fk_guid_RequestedKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ShowIconInLists":
                // Import must have default value set
                this.Proxy.ShowIconInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowIconInListsSet = true;
                break;
            case "Zetbox.App.GUI|ShowIdInLists":
                // Import must have default value set
                this.Proxy.ShowIdInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowIdInListsSet = true;
                break;
            case "Zetbox.App.GUI|ShowNameInLists":
                // Import must have default value set
                this.Proxy.ShowNameInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowNameInListsSet = true;
                break;
            }
        }

        #endregion

    }
}
// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// A recurrence rule
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("RecurrenceRule")]
    public class RecurrenceRuleMemoryImpl : CompoundObjectDefaultImpl, ICompoundObject, RecurrenceRule
    {
        private static readonly Guid _compoundObjectID = new Guid("3d4ec88b-fe8e-452e-a71d-03143a75aeb0");
        public override Guid CompoundObjectID { get { return _compoundObjectID; } }

        [Obsolete]
        public RecurrenceRuleMemoryImpl()
            : base(null)
        {
        }

        public RecurrenceRuleMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        public RecurrenceRuleMemoryImpl(IPersistenceObject parent, string property) : this(null, parent, property) {} // TODO: pass parent's lazyCtx
        public RecurrenceRuleMemoryImpl(Func<IFrozenContext> lazyCtx, IPersistenceObject parent, string property)
            : base(lazyCtx)
        {
            AttachToObject(parent, property);
        }

        /// <summary>
        /// Specifies a comma separated list of days of the week. Also it may indicate the nth occurrence of the specific day within a month. (MO,TU,1SA,-2SU)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByDay;
                if (OnByDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByDay_Getter(this, __e);
                    __result = _ByDay = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByDay != value)
                {
                    var __oldValue = _ByDay;
                    var __newValue = value;
                    if (OnByDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByDay", __oldValue, __newValue);
                    _ByDay = __newValue;
                    NotifyPropertyChanged("ByDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByDay");
                }
            }
        }
        private string _ByDay;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByDay_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of hours. (0,1,22,23)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByHour
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByHour;
                if (OnByHour_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByHour_Getter(this, __e);
                    __result = _ByHour = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByHour != value)
                {
                    var __oldValue = _ByHour;
                    var __newValue = value;
                    if (OnByHour_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByHour_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByHour", __oldValue, __newValue);
                    _ByHour = __newValue;
                    NotifyPropertyChanged("ByHour", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByHour_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByHour_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByHour");
                }
            }
        }
        private string _ByHour;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByHour_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByHour_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByHour_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of minutes. (0,1,58,59)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByMinute
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByMinute;
                if (OnByMinute_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByMinute_Getter(this, __e);
                    __result = _ByMinute = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByMinute != value)
                {
                    var __oldValue = _ByMinute;
                    var __newValue = value;
                    if (OnByMinute_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMinute_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByMinute", __oldValue, __newValue);
                    _ByMinute = __newValue;
                    NotifyPropertyChanged("ByMinute", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByMinute_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMinute_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByMinute");
                }
            }
        }
        private string _ByMinute;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMinute_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMinute_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMinute_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of months of the year (1,2,3,4,11,12)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByMonth
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByMonth;
                if (OnByMonth_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByMonth_Getter(this, __e);
                    __result = _ByMonth = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByMonth != value)
                {
                    var __oldValue = _ByMonth;
                    var __newValue = value;
                    if (OnByMonth_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMonth_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByMonth", __oldValue, __newValue);
                    _ByMonth = __newValue;
                    NotifyPropertyChanged("ByMonth", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByMonth_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMonth_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByMonth");
                }
            }
        }
        private string _ByMonth;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonth_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonth_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonth_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of days of the month. (1,2,30,31,-1,-2,-31)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByMonthDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByMonthDay;
                if (OnByMonthDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByMonthDay_Getter(this, __e);
                    __result = _ByMonthDay = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByMonthDay != value)
                {
                    var __oldValue = _ByMonthDay;
                    var __newValue = value;
                    if (OnByMonthDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMonthDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByMonthDay", __oldValue, __newValue);
                    _ByMonthDay = __newValue;
                    NotifyPropertyChanged("ByMonthDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByMonthDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByMonthDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByMonthDay");
                }
            }
        }
        private string _ByMonthDay;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonthDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonthDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByMonthDay_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of seconds. (0,1,58,59)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string BySecond
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _BySecond;
                if (OnBySecond_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnBySecond_Getter(this, __e);
                    __result = _BySecond = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_BySecond != value)
                {
                    var __oldValue = _BySecond;
                    var __newValue = value;
                    if (OnBySecond_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnBySecond_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("BySecond", __oldValue, __newValue);
                    _BySecond = __newValue;
                    NotifyPropertyChanged("BySecond", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBySecond_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnBySecond_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("BySecond");
                }
            }
        }
        private string _BySecond;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySecond_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySecond_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySecond_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of nth occurrences
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string BySetPos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _BySetPos;
                if (OnBySetPos_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnBySetPos_Getter(this, __e);
                    __result = _BySetPos = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_BySetPos != value)
                {
                    var __oldValue = _BySetPos;
                    var __newValue = value;
                    if (OnBySetPos_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnBySetPos_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("BySetPos", __oldValue, __newValue);
                    _BySetPos = __newValue;
                    NotifyPropertyChanged("BySetPos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBySetPos_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnBySetPos_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("BySetPos");
                }
            }
        }
        private string _BySetPos;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySetPos_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySetPos_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnBySetPos_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of weeks of the year. Valid values are 1 to 53 or -53 to -1. (1,5,-2)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByWeekNumber
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByWeekNumber;
                if (OnByWeekNumber_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByWeekNumber_Getter(this, __e);
                    __result = _ByWeekNumber = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByWeekNumber != value)
                {
                    var __oldValue = _ByWeekNumber;
                    var __newValue = value;
                    if (OnByWeekNumber_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByWeekNumber_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByWeekNumber", __oldValue, __newValue);
                    _ByWeekNumber = __newValue;
                    NotifyPropertyChanged("ByWeekNumber", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByWeekNumber_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByWeekNumber_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByWeekNumber");
                }
            }
        }
        private string _ByWeekNumber;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByWeekNumber_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByWeekNumber_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByWeekNumber_PostSetter;

        /// <summary>
        /// Specifies a comma separated list of days of the year. (1,2,365,366,-1,-2,-366)
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string ByYearDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ByYearDay;
                if (OnByYearDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnByYearDay_Getter(this, __e);
                    __result = _ByYearDay = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ByYearDay != value)
                {
                    var __oldValue = _ByYearDay;
                    var __newValue = value;
                    if (OnByYearDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnByYearDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ByYearDay", __oldValue, __newValue);
                    _ByYearDay = __newValue;
                    NotifyPropertyChanged("ByYearDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnByYearDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnByYearDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ByYearDay");
                }
            }
        }
        private string _ByYearDay;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByYearDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByYearDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, string> OnByYearDay_PostSetter;

        /// <summary>
        /// Specifies how often the recurrence will be repeated. The start date counts as the first one
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public int? Count
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Count;
                if (OnCount_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnCount_Getter(this, __e);
                    __result = _Count = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Count != value)
                {
                    var __oldValue = _Count;
                    var __newValue = value;
                    if (OnCount_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnCount_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Count", __oldValue, __newValue);
                    _Count = __newValue;
                    NotifyPropertyChanged("Count", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCount_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnCount_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Count");
                }
            }
        }
        private int? _Count;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnCount_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnCount_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnCount_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.Base.Frequency? Frequency
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Frequency;
                if (OnFrequency_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.Frequency?>(__result);
                    OnFrequency_Getter(this, __e);
                    __result = _Frequency = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Frequency != value)
                {
                    var __oldValue = _Frequency;
                    var __newValue = value;
                    if (OnFrequency_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Frequency?>(__oldValue, __newValue);
                        OnFrequency_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Frequency", __oldValue, __newValue);
                    _Frequency = __newValue;
                    NotifyPropertyChanged("Frequency", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnFrequency_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Frequency?>(__oldValue, __newValue);
                        OnFrequency_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Frequency");
                }
            }
        }
        private Zetbox.App.Base.Frequency? _Frequency;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.Frequency?> OnFrequency_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.Frequency?> OnFrequency_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.Frequency?> OnFrequency_PostSetter;

        /// <summary>
        /// Specifies how often the recurrence rule repeats, null is equivalent to 1
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public int? Interval
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Interval;
                if (OnInterval_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnInterval_Getter(this, __e);
                    __result = _Interval = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Interval != value)
                {
                    var __oldValue = _Interval;
                    var __newValue = value;
                    if (OnInterval_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnInterval_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Interval", __oldValue, __newValue);
                    _Interval = __newValue;
                    NotifyPropertyChanged("Interval", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnInterval_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnInterval_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Interval");
                }
            }
        }
        private int? _Interval;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnInterval_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnInterval_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, int?> OnInterval_PostSetter;

        /// <summary>
        /// Recurrents ends at this date, including this date
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? Until
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Until;
                if (OnUntil_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnUntil_Getter(this, __e);
                    __result = _Until = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Until != value)
                {
                    var __oldValue = _Until;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnUntil_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnUntil_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Until", __oldValue, __newValue);
                    _Until = __newValue;
                    NotifyPropertyChanged("Until", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnUntil_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnUntil_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Until");
                }
            }
        }
        private DateTime? _Until;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, DateTime?> OnUntil_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, DateTime?> OnUntil_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, DateTime?> OnUntil_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.Base.DayOfWeek? WeekStart
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _WeekStart;
                if (OnWeekStart_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.DayOfWeek?>(__result);
                    OnWeekStart_Getter(this, __e);
                    __result = _WeekStart = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_WeekStart != value)
                {
                    var __oldValue = _WeekStart;
                    var __newValue = value;
                    if (OnWeekStart_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.DayOfWeek?>(__oldValue, __newValue);
                        OnWeekStart_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("WeekStart", __oldValue, __newValue);
                    _WeekStart = __newValue;
                    NotifyPropertyChanged("WeekStart", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnWeekStart_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.DayOfWeek?>(__oldValue, __newValue);
                        OnWeekStart_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("WeekStart");
                }
            }
        }
        private Zetbox.App.Base.DayOfWeek? _WeekStart;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.DayOfWeek?> OnWeekStart_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.DayOfWeek?> OnWeekStart_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.RecurrenceRule, Zetbox.App.Base.DayOfWeek?> OnWeekStart_PostSetter;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetCurrent_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<DateTime> GetCurrent(DateTime start)
        {
            var e = new MethodReturnEventArgs<DateTime>();
            if (OnGetCurrent_RecurrenceRule != null)
            {
                await OnGetCurrent_RecurrenceRule(this, e, start);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetCurrent");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetCurrent_Handler<T>(T obj, MethodReturnEventArgs<DateTime> ret, DateTime start);
        public static event GetCurrent_Handler<RecurrenceRule> OnGetCurrent_RecurrenceRule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<RecurrenceRule> OnGetCurrent_RecurrenceRule_CanExec;

        [EventBasedMethod("OnGetCurrent_RecurrenceRule_CanExec")]
        public virtual bool GetCurrentCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetCurrent_RecurrenceRule_CanExec != null)
				{
					OnGetCurrent_RecurrenceRule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<RecurrenceRule> OnGetCurrent_RecurrenceRule_CanExecReason;

        [EventBasedMethod("OnGetCurrent_RecurrenceRule_CanExecReason")]
        public virtual string GetCurrentCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetCurrent_RecurrenceRule_CanExecReason != null)
				{
					OnGetCurrent_RecurrenceRule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetCurrent1_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<DateTime> GetCurrent(DateTime start, DateTime dt)
        {
            var e = new MethodReturnEventArgs<DateTime>();
            if (OnGetCurrent1_RecurrenceRule != null)
            {
                await OnGetCurrent1_RecurrenceRule(this, e, start, dt);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetCurrent");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetCurrent1_Handler<T>(T obj, MethodReturnEventArgs<DateTime> ret, DateTime start, DateTime dt);
        public static event GetCurrent1_Handler<RecurrenceRule> OnGetCurrent1_RecurrenceRule;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetNext_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<DateTime> GetNext(DateTime start)
        {
            var e = new MethodReturnEventArgs<DateTime>();
            if (OnGetNext_RecurrenceRule != null)
            {
                await OnGetNext_RecurrenceRule(this, e, start);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetNext");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetNext_Handler<T>(T obj, MethodReturnEventArgs<DateTime> ret, DateTime start);
        public static event GetNext_Handler<RecurrenceRule> OnGetNext_RecurrenceRule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<RecurrenceRule> OnGetNext_RecurrenceRule_CanExec;

        [EventBasedMethod("OnGetNext_RecurrenceRule_CanExec")]
        public virtual bool GetNextCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetNext_RecurrenceRule_CanExec != null)
				{
					OnGetNext_RecurrenceRule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<RecurrenceRule> OnGetNext_RecurrenceRule_CanExecReason;

        [EventBasedMethod("OnGetNext_RecurrenceRule_CanExecReason")]
        public virtual string GetNextCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetNext_RecurrenceRule_CanExecReason != null)
				{
					OnGetNext_RecurrenceRule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetNext1_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<DateTime> GetNext(DateTime start, DateTime dt)
        {
            var e = new MethodReturnEventArgs<DateTime>();
            if (OnGetNext1_RecurrenceRule != null)
            {
                await OnGetNext1_RecurrenceRule(this, e, start, dt);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetNext");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetNext1_Handler<T>(T obj, MethodReturnEventArgs<DateTime> ret, DateTime start, DateTime dt);
        public static event GetNext1_Handler<RecurrenceRule> OnGetNext1_RecurrenceRule;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetRelative_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<DateTime> GetRelative(DateTime dt)
        {
            var e = new MethodReturnEventArgs<DateTime>();
            if (OnGetRelative_RecurrenceRule != null)
            {
                await OnGetRelative_RecurrenceRule(this, e, dt);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetRelative");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetRelative_Handler<T>(T obj, MethodReturnEventArgs<DateTime> ret, DateTime dt);
        public static event GetRelative_Handler<RecurrenceRule> OnGetRelative_RecurrenceRule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<RecurrenceRule> OnGetRelative_RecurrenceRule_CanExec;

        [EventBasedMethod("OnGetRelative_RecurrenceRule_CanExec")]
        public virtual bool GetRelativeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetRelative_RecurrenceRule_CanExec != null)
				{
					OnGetRelative_RecurrenceRule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<RecurrenceRule> OnGetRelative_RecurrenceRule_CanExecReason;

        [EventBasedMethod("OnGetRelative_RecurrenceRule_CanExecReason")]
        public virtual string GetRelativeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetRelative_RecurrenceRule_CanExecReason != null)
				{
					OnGetRelative_RecurrenceRule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetWithinInterval_RecurrenceRule")]
        public virtual async System.Threading.Tasks.Task<IEnumerable<DateTime>> GetWithinInterval(DateTime start, DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<IEnumerable<DateTime>>();
            if (OnGetWithinInterval_RecurrenceRule != null)
            {
                await OnGetWithinInterval_RecurrenceRule(this, e, start, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on RecurrenceRule.GetWithinInterval");
            }
            return e.Result;
        }
        public delegate System.Threading.Tasks.Task GetWithinInterval_Handler<T>(T obj, MethodReturnEventArgs<IEnumerable<DateTime>> ret, DateTime start, DateTime from, DateTime until);
        public static event GetWithinInterval_Handler<RecurrenceRule> OnGetWithinInterval_RecurrenceRule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<RecurrenceRule> OnGetWithinInterval_RecurrenceRule_CanExec;

        [EventBasedMethod("OnGetWithinInterval_RecurrenceRule_CanExec")]
        public virtual bool GetWithinIntervalCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetWithinInterval_RecurrenceRule_CanExec != null)
				{
					OnGetWithinInterval_RecurrenceRule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<RecurrenceRule> OnGetWithinInterval_RecurrenceRule_CanExecReason;

        [EventBasedMethod("OnGetWithinInterval_RecurrenceRule_CanExecReason")]
        public virtual string GetWithinIntervalCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetWithinInterval_RecurrenceRule_CanExecReason != null)
				{
					OnGetWithinInterval_RecurrenceRule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(RecurrenceRule);
        }

        public override void ApplyChangesFrom(ICompoundObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (RecurrenceRule)obj;
            var otherImpl = (RecurrenceRuleMemoryImpl)obj;
            var me = (RecurrenceRule)this;

            me.ByDay = other.ByDay;
            me.ByHour = other.ByHour;
            me.ByMinute = other.ByMinute;
            me.ByMonth = other.ByMonth;
            me.ByMonthDay = other.ByMonthDay;
            me.BySecond = other.BySecond;
            me.BySetPos = other.BySetPos;
            me.ByWeekNumber = other.ByWeekNumber;
            me.ByYearDay = other.ByYearDay;
            me.Count = other.Count;
            me.Frequency = other.Frequency;
            me.Interval = other.Interval;
            me.Until = other.Until;
            me.WeekStart = other.WeekStart;
        }
        #region Zetbox.Generator.Templates.CompoundObjects.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_RecurrenceRule")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_RecurrenceRule != null)
            {
                OnToString_RecurrenceRule(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<RecurrenceRule> OnToString_RecurrenceRule;

		[System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_RecurrenceRule")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
			var b = base.ObjectIsValid();
			e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_RecurrenceRule != null)
            {
                OnObjectIsValid_RecurrenceRule(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<RecurrenceRule> OnObjectIsValid_RecurrenceRule;

        #endregion // Zetbox.Generator.Templates.CompoundObjects.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ByDay);
            binStream.Write(this._ByHour);
            binStream.Write(this._ByMinute);
            binStream.Write(this._ByMonth);
            binStream.Write(this._ByMonthDay);
            binStream.Write(this._BySecond);
            binStream.Write(this._BySetPos);
            binStream.Write(this._ByWeekNumber);
            binStream.Write(this._ByYearDay);
            binStream.Write(this._Count);
            binStream.Write((int?)this._Frequency);
            binStream.Write(this._Interval);
            binStream.Write(this._Until);
            binStream.Write((int?)this._WeekStart);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ByDay = binStream.ReadString();
            this._ByHour = binStream.ReadString();
            this._ByMinute = binStream.ReadString();
            this._ByMonth = binStream.ReadString();
            this._ByMonthDay = binStream.ReadString();
            this._BySecond = binStream.ReadString();
            this._BySetPos = binStream.ReadString();
            this._ByWeekNumber = binStream.ReadString();
            this._ByYearDay = binStream.ReadString();
            this._Count = binStream.ReadNullableInt32();
            this._Frequency = (Zetbox.App.Base.Frequency?)binStream.ReadNullableInt32();
            this._Interval = binStream.ReadNullableInt32();
            this._Until = binStream.ReadNullableDateTime();
            this._WeekStart = (Zetbox.App.Base.DayOfWeek?)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByDay, xml, "ByDay", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByHour, xml, "ByHour", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByMinute, xml, "ByMinute", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByMonth, xml, "ByMonth", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByMonthDay, xml, "ByMonthDay", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._BySecond, xml, "BySecond", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._BySetPos, xml, "BySetPos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByWeekNumber, xml, "ByWeekNumber", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ByYearDay, xml, "ByYearDay", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Count, xml, "Count", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)this._Frequency, xml, "Frequency", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Interval, xml, "Interval", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Until, xml, "Until", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)this._WeekStart, xml, "WeekStart", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ByDay":
                this._ByDay = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByHour":
                this._ByHour = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByMinute":
                this._ByMinute = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByMonth":
                this._ByMonth = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByMonthDay":
                this._ByMonthDay = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|BySecond":
                this._BySecond = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|BySetPos":
                this._BySetPos = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByWeekNumber":
                this._ByWeekNumber = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ByYearDay":
                this._ByYearDay = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Count":
                this._Count = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|Frequency":
                this._Frequency = (Zetbox.App.Base.Frequency?)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.Base|Interval":
                this._Interval = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|Until":
                this._Until = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Base|WeekStart":
                this._WeekStart = (Zetbox.App.Base.DayOfWeek?)XmlStreamer.ReadNullableInt32(xml);
               break;
            }
        }

        #endregion

    }
}
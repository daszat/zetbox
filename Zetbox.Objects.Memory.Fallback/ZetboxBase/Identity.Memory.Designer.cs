// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Represents an Identity
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Identity")]
    public class IdentityMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Identity
    {
        private static readonly Guid _objectClassID = new Guid("31d8890a-67fc-4a78-9d35-9ff0b9e09b4c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public IdentityMemoryImpl()
            : base(null)
        {
            OpenIDImpl = new Zetbox.App.Base.OpenIDMemoryImpl(null, this, "OpenID");
        }

        public IdentityMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
            OpenIDImpl = new Zetbox.App.Base.OpenIDMemoryImpl(lazyCtx, this, "OpenID");
        }

        /// <summary>
        /// Storage for the users calendar configuration
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string CalendarConfiguration
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CalendarConfiguration;
                if (OnCalendarConfiguration_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCalendarConfiguration_Getter(this, __e);
                    __result = _CalendarConfiguration = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CalendarConfiguration != value)
                {
                    var __oldValue = _CalendarConfiguration;
                    var __newValue = value;
                    if (OnCalendarConfiguration_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnCalendarConfiguration_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CalendarConfiguration", __oldValue, __newValue);
                    _CalendarConfiguration = __newValue;
                    NotifyPropertyChanged("CalendarConfiguration", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCalendarConfiguration_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnCalendarConfiguration_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CalendarConfiguration");
                }
            }
        }
        private string _CalendarConfiguration;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, string> OnCalendarConfiguration_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, string> OnCalendarConfiguration_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, string> OnCalendarConfiguration_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnCalendarConfiguration_IsValid;

        /// <summary>
        /// Displayname of this identity
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string DisplayName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _DisplayName;
                if (OnDisplayName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDisplayName_Getter(this, __e);
                    __result = _DisplayName = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_DisplayName != value)
                {
                    var __oldValue = _DisplayName;
                    var __newValue = value;
                    if (OnDisplayName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDisplayName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DisplayName", __oldValue, __newValue);
                    _DisplayName = __newValue;
                    NotifyPropertyChanged("DisplayName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDisplayName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDisplayName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("DisplayName");
                }
            }
        }
        private string _DisplayName;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, string> OnDisplayName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, string> OnDisplayName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, string> OnDisplayName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnDisplayName_IsValid;

        /// <summary>
        /// Identites are member of groups
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Groups
        public ICollection<Zetbox.App.Base.Group> Groups
        {
            get
            {
                if (_Groups == null)
                {
                    TriggerFetchGroupsAsync().TryRunSynchronously(); TriggerFetchGroupsAsync().Wait();
                }
                return (ICollection<Zetbox.App.Base.Group>)_Groups;
            }
        }

        System.Threading.Tasks.Task _triggerFetchGroupsTask;
        public System.Threading.Tasks.Task TriggerFetchGroupsAsync()
        {
            if (_triggerFetchGroupsTask != null) return _triggerFetchGroupsTask;
            _triggerFetchGroupsTask = Context.FetchRelationAsync<Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl>(new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743"), RelationEndRole.A, this);
            _triggerFetchGroupsTask.OnResult(r =>
            {
                _Groups
                    = new ObservableBSideCollectionWrapper<Zetbox.App.Base.Identity, Zetbox.App.Base.Group, Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl>(this.Context, this));
                        // _Groups.CollectionChanged is managed by OnGroupsCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchGroupsTask;
        }

        internal void OnGroupsCollectionChanged()
        {
            NotifyPropertyChanged("Groups", null, null);
            if (OnGroups_PostSetter != null && IsAttached)
                OnGroups_PostSetter(this);
        }

        private ObservableBSideCollectionWrapper<Zetbox.App.Base.Identity, Zetbox.App.Base.Group, Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.Identities_memberOf_Groups_RelationEntryMemoryImpl>> _Groups;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Groups
public static event PropertyListChangedHandler<Zetbox.App.Base.Identity> OnGroups_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnGroups_IsValid;

        /// <summary>
        /// If true, the item will be hidden in any search
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsDeactivated
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsDeactivated;
                if (!_isIsDeactivatedSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("4a2da2e9-9492-41a3-9969-d5ffa1cac3b3"));
                    if (__p != null) {
                        _isIsDeactivatedSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsDeactivated = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Identity.IsDeactivated'");
                    }
                }
                if (OnIsDeactivated_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsDeactivated_Getter(this, __e);
                    __result = _IsDeactivated = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsDeactivatedSet = true;
                if (_IsDeactivated != value)
                {
                    var __oldValue = _IsDeactivated;
                    var __newValue = value;
                    if (OnIsDeactivated_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDeactivated_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsDeactivated", __oldValue, __newValue);
                    _IsDeactivated = __newValue;
                    NotifyPropertyChanged("IsDeactivated", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsDeactivated_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsDeactivated_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsDeactivated");
                }
            }
        }
        private bool _IsDeactivated;
        private bool _isIsDeactivatedSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, bool> OnIsDeactivated_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, bool> OnIsDeactivated_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, bool> OnIsDeactivated_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnIsDeactivated_IsValid;

        /// <summary>
        /// A token for simple login with a URL
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid? LoginToken
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _LoginToken;
                if (OnLoginToken_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid?>(__result);
                    OnLoginToken_Getter(this, __e);
                    __result = _LoginToken = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_LoginToken != value)
                {
                    var __oldValue = _LoginToken;
                    var __newValue = value;
                    if (OnLoginToken_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid?>(__oldValue, __newValue);
                        OnLoginToken_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("LoginToken", __oldValue, __newValue);
                    _LoginToken = __newValue;
                    NotifyPropertyChanged("LoginToken", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLoginToken_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid?>(__oldValue, __newValue);
                        OnLoginToken_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("LoginToken");
                }
            }
        }
        private Guid? _LoginToken;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, Guid?> OnLoginToken_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, Guid?> OnLoginToken_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, Guid?> OnLoginToken_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnLoginToken_IsValid;

        /// <summary>
        /// Optional Open Id
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.OpenID OpenID
        {
            get { return OpenIDImpl; }
            set { OpenIDImpl = (Zetbox.App.Base.OpenIDMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for OpenID</summary>
        private Zetbox.App.Base.OpenIDMemoryImpl _OpenID;

        /// <summary>backing property for OpenID, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.OpenIDMemoryImpl OpenIDImpl
        {
            get
            {
                return _OpenID;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_OpenID, value))
                {
                    var __oldValue = _OpenID;
                    var __newValue = value;

                    NotifyPropertyChanging("OpenID", __oldValue, __newValue);

                    if (_OpenID != null)
                    {
                        _OpenID.DetachFromObject(this, "OpenID");
                    }
                    __newValue = (Zetbox.App.Base.OpenIDMemoryImpl)__newValue.Clone();
                    _OpenID = __newValue;
                    _OpenID.AttachToObject(this, "OpenID");

                    NotifyPropertyChanged("OpenID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnOpenID_IsValid;

        /// <summary>
        /// Password of a generic identity
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Password
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Password;
                if (OnPassword_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPassword_Getter(this, __e);
                    __result = _Password = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Password != value)
                {
                    var __oldValue = _Password;
                    var __newValue = value;
                    if (OnPassword_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPassword_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Password", __oldValue, __newValue);
                    _Password = __newValue;
                    NotifyPropertyChanged("Password", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnPassword_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPassword_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Password");
                }
            }
        }
        private string _Password;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, string> OnPassword_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, string> OnPassword_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, string> OnPassword_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnPassword_IsValid;

        /// <summary>
        /// Username of a generic identity
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string UserName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _UserName;
                if (OnUserName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnUserName_Getter(this, __e);
                    __result = _UserName = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_UserName != value)
                {
                    var __oldValue = _UserName;
                    var __newValue = value;
                    if (OnUserName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnUserName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("UserName", __oldValue, __newValue);
                    _UserName = __newValue;
                    NotifyPropertyChanged("UserName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnUserName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnUserName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("UserName");
                }
            }
        }
        private string _UserName;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Identity, string> OnUserName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Identity, string> OnUserName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Identity, string> OnUserName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Identity> OnUserName_IsValid;

        /// <summary>
        /// Clears the login token
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnClearLoginToken_Identity")]
        public virtual void ClearLoginToken()
        {
            // base.ClearLoginToken();
            if (OnClearLoginToken_Identity != null)
            {
                OnClearLoginToken_Identity(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method Identity.ClearLoginToken");
            }
        }
        public delegate void ClearLoginToken_Handler<T>(T obj);
        public static event ClearLoginToken_Handler<Identity> OnClearLoginToken_Identity;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Identity> OnClearLoginToken_Identity_CanExec;

        [EventBasedMethod("OnClearLoginToken_Identity_CanExec")]
        public virtual bool ClearLoginTokenCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnClearLoginToken_Identity_CanExec != null)
				{
					OnClearLoginToken_Identity_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Identity> OnClearLoginToken_Identity_CanExecReason;

        [EventBasedMethod("OnClearLoginToken_Identity_CanExecReason")]
        public virtual string ClearLoginTokenCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnClearLoginToken_Identity_CanExecReason != null)
				{
					OnClearLoginToken_Identity_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Creates or re-creates the login token
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateLoginToken_Identity")]
        public virtual void CreateLoginToken()
        {
            // base.CreateLoginToken();
            if (OnCreateLoginToken_Identity != null)
            {
                OnCreateLoginToken_Identity(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method Identity.CreateLoginToken");
            }
        }
        public delegate void CreateLoginToken_Handler<T>(T obj);
        public static event CreateLoginToken_Handler<Identity> OnCreateLoginToken_Identity;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Identity> OnCreateLoginToken_Identity_CanExec;

        [EventBasedMethod("OnCreateLoginToken_Identity_CanExec")]
        public virtual bool CreateLoginTokenCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateLoginToken_Identity_CanExec != null)
				{
					OnCreateLoginToken_Identity_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Identity> OnCreateLoginToken_Identity_CanExecReason;

        [EventBasedMethod("OnCreateLoginToken_Identity_CanExecReason")]
        public virtual string CreateLoginTokenCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateLoginToken_Identity_CanExecReason != null)
				{
					OnCreateLoginToken_Identity_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Sets a password hash from the given plain text password
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnSetPassword_Identity")]
        public virtual void SetPassword(string plainTextPassword)
        {
            // base.SetPassword();
            if (OnSetPassword_Identity != null)
            {
                OnSetPassword_Identity(this, plainTextPassword);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method Identity.SetPassword");
            }
        }
        public delegate void SetPassword_Handler<T>(T obj, string plainTextPassword);
        public static event SetPassword_Handler<Identity> OnSetPassword_Identity;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Identity> OnSetPassword_Identity_CanExec;

        [EventBasedMethod("OnSetPassword_Identity_CanExec")]
        public virtual bool SetPasswordCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnSetPassword_Identity_CanExec != null)
				{
					OnSetPassword_Identity_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Identity> OnSetPassword_Identity_CanExecReason;

        [EventBasedMethod("OnSetPassword_Identity_CanExecReason")]
        public virtual string SetPasswordCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnSetPassword_Identity_CanExecReason != null)
				{
					OnSetPassword_Identity_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Sets a new password by opening a dialog
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnSetPasswordUI_Identity")]
        public virtual void SetPasswordUI()
        {
            // base.SetPasswordUI();
            if (OnSetPasswordUI_Identity != null)
            {
                OnSetPasswordUI_Identity(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method Identity.SetPasswordUI");
            }
        }
        public delegate void SetPasswordUI_Handler<T>(T obj);
        public static event SetPasswordUI_Handler<Identity> OnSetPasswordUI_Identity;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Identity> OnSetPasswordUI_Identity_CanExec;

        [EventBasedMethod("OnSetPasswordUI_Identity_CanExec")]
        public virtual bool SetPasswordUICanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnSetPasswordUI_Identity_CanExec != null)
				{
					OnSetPasswordUI_Identity_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Identity> OnSetPasswordUI_Identity_CanExecReason;

        [EventBasedMethod("OnSetPasswordUI_Identity_CanExecReason")]
        public virtual string SetPasswordUICanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnSetPasswordUI_Identity_CanExecReason != null)
				{
					OnSetPasswordUI_Identity_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Identity);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Identity)obj;
            var otherImpl = (IdentityMemoryImpl)obj;
            var me = (Identity)this;

            me.CalendarConfiguration = other.CalendarConfiguration;
            me.DisplayName = other.DisplayName;
            me.IsDeactivated = other.IsDeactivated;
            me.LoginToken = other.LoginToken;
            me.Password = other.Password;
            me.UserName = other.UserName;
            if (me.OpenID == null && other.OpenID != null) {
                me.OpenID = (Zetbox.App.Base.OpenID)other.OpenID.Clone();
            } else if (me.OpenID != null && other.OpenID == null) {
                me.OpenID = null;
            } else if (me.OpenID != null && other.OpenID != null) {
                me.OpenID.ApplyChangesFrom(other.OpenID);
            }
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "CalendarConfiguration":
                case "DisplayName":
                case "IsDeactivated":
                case "LoginToken":
                case "OpenID":
                case "Password":
                case "UserName":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Groups":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override System.Threading.Tasks.Task TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Groups":
                return TriggerFetchGroupsAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, string>(
                        lazyCtx,
                        new Guid("733a16fe-b741-4e7e-9b52-f306c6e1f559"),
                        "CalendarConfiguration",
                        null,
                        obj => obj.CalendarConfiguration,
                        (obj, val) => obj.CalendarConfiguration = val,
						obj => OnCalendarConfiguration_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, string>(
                        lazyCtx,
                        new Guid("f93e6dbb-a704-460c-8183-ce8b1c2c47a2"),
                        "DisplayName",
                        null,
                        obj => obj.DisplayName,
                        (obj, val) => obj.DisplayName = val,
						obj => OnDisplayName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Identity, ICollection<Zetbox.App.Base.Group>>(
                        lazyCtx,
                        new Guid("5f534204-f0d5-4d6f-8efa-7ff248580ba3"),
                        "Groups",
                        null,
                        obj => obj.Groups,
                        null, // lists are read-only properties
                        obj => OnGroups_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, bool>(
                        lazyCtx,
                        new Guid("4a2da2e9-9492-41a3-9969-d5ffa1cac3b3"),
                        "IsDeactivated",
                        null,
                        obj => obj.IsDeactivated,
                        (obj, val) => obj.IsDeactivated = val,
						obj => OnIsDeactivated_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, Guid?>(
                        lazyCtx,
                        new Guid("267074ae-3a16-41bd-b9af-f09fa27e8d5a"),
                        "LoginToken",
                        null,
                        obj => obj.LoginToken,
                        (obj, val) => obj.LoginToken = val,
						obj => OnLoginToken_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, Zetbox.App.Base.OpenID>(
                        lazyCtx,
                        new Guid("9e5b1327-cb22-4442-a4b4-6cf6083e88a2"),
                        "OpenID",
                        null,
                        obj => obj.OpenID,
                        (obj, val) => obj.OpenID = val,
						obj => OnOpenID_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, string>(
                        lazyCtx,
                        new Guid("0d499610-99e3-42cc-b71b-49ed1a356355"),
                        "Password",
                        null,
                        obj => obj.Password,
                        (obj, val) => obj.Password = val,
						obj => OnPassword_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Identity, string>(
                        lazyCtx,
                        new Guid("a4ce1f5f-311b-4510-8817-4cca40f0bf0f"),
                        "UserName",
                        null,
                        obj => obj.UserName,
                        (obj, val) => obj.UserName = val,
						obj => OnUserName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Identity")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Identity != null)
            {
                OnToString_Identity(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Identity> OnToString_Identity;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Identity")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Identity != null)
            {
                OnObjectIsValid_Identity(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Identity> OnObjectIsValid_Identity;

        [EventBasedMethod("OnNotifyPreSave_Identity")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Identity != null) OnNotifyPreSave_Identity(this);
        }
        public static event ObjectEventHandler<Identity> OnNotifyPreSave_Identity;

        [EventBasedMethod("OnNotifyPostSave_Identity")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Identity != null) OnNotifyPostSave_Identity(this);
        }
        public static event ObjectEventHandler<Identity> OnNotifyPostSave_Identity;

        [EventBasedMethod("OnNotifyCreated_Identity")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("CalendarConfiguration");
            SetNotInitializedProperty("DisplayName");
            SetNotInitializedProperty("LoginToken");
            SetNotInitializedProperty("Password");
            SetNotInitializedProperty("UserName");
            base.NotifyCreated();
            if (OnNotifyCreated_Identity != null) OnNotifyCreated_Identity(this);
        }
        public static event ObjectEventHandler<Identity> OnNotifyCreated_Identity;

        [EventBasedMethod("OnNotifyDeleting_Identity")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Identity != null) OnNotifyDeleting_Identity(this);
            Groups.Clear();
        }
        public static event ObjectEventHandler<Identity> OnNotifyDeleting_Identity;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._CalendarConfiguration);
            binStream.Write(this._DisplayName);
            binStream.Write(this._isIsDeactivatedSet);
            if (this._isIsDeactivatedSet) {
                binStream.Write(this._IsDeactivated);
            }
            binStream.Write(this._LoginToken);
            binStream.Write(this.OpenID);
            binStream.Write(this._Password);
            binStream.Write(this._UserName);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._CalendarConfiguration = binStream.ReadString();
            this._DisplayName = binStream.ReadString();
            this._isIsDeactivatedSet = binStream.ReadBoolean();
            if (this._isIsDeactivatedSet) {
                this._IsDeactivated = binStream.ReadBoolean();
            }
            this._LoginToken = binStream.ReadNullableGuid();
            {
                // use backing store to avoid notifications
                this.OpenIDImpl = binStream.ReadCompoundObject<Zetbox.App.Base.OpenIDMemoryImpl>();
                this.OpenIDImpl.AttachToObject(this, "OpenID");
            }
            this._Password = binStream.ReadString();
            this._UserName = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}
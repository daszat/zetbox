// <autogenerated/>

namespace Zetbox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("SourceColumn")]
    public class SourceColumnMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, SourceColumn, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("e921bb2f-2cac-46d1-a7f4-120bb1a4afe2");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public SourceColumnMemoryImpl()
            : base(null)
        {
        }

        public SourceColumnMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = _Comment = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if (OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Comment");
                }
            }
        }
        private string _Comment;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnComment_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnComment_IsValid;

        /// <summary>
        /// In some cases, when joining across source tables, nulls should be compared as equals, instead of not. This is especially true, when &quot;null&quot; is used as a domain value.
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool CompareNulls
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CompareNulls;
                if (!_isCompareNullsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("09607800-4b5c-4d8a-a0cf-b508986c2f17"));
                    if (__p != null) {
                        _isCompareNullsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CompareNulls = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.CompareNulls'");
                    }
                }
                if (OnCompareNulls_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnCompareNulls_Getter(this, __e);
                    __result = _CompareNulls = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCompareNullsSet = true;
                if (_CompareNulls != value)
                {
                    var __oldValue = _CompareNulls;
                    var __newValue = value;
                    if (OnCompareNulls_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnCompareNulls_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CompareNulls", __oldValue, __newValue);
                    _CompareNulls = __newValue;
                    NotifyPropertyChanged("CompareNulls", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCompareNulls_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnCompareNulls_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CompareNulls");
                }
            }
        }
        private bool _CompareNulls;
        private bool _isCompareNullsSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool> OnCompareNulls_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnCompareNulls_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.SchemaMigration.ColumnType DbType
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _DbType;
                if (OnDbType_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.ColumnType>(__result);
                    OnDbType_Getter(this, __e);
                    __result = _DbType = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_DbType != value)
                {
                    var __oldValue = _DbType;
                    var __newValue = value;
                    if (OnDbType_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
                        OnDbType_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DbType", __oldValue, __newValue);
                    _DbType = __newValue;
                    NotifyPropertyChanged("DbType", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDbType_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.ColumnType>(__oldValue, __newValue);
                        OnDbType_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("DbType");
                }
            }
        }
        private Zetbox.App.SchemaMigration.ColumnType _DbType;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.ColumnType> OnDbType_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.ColumnType> OnDbType_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.ColumnType> OnDbType_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnDbType_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnDescription_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for DestinationProperty
        public IList<Zetbox.App.Base.Property> DestinationProperty
        {
            get
            {
                if (_DestinationProperty == null)
                {
                    TriggerFetchDestinationPropertyAsync().Wait();
                }
                return (IList<Zetbox.App.Base.Property>)_DestinationProperty;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchDestinationPropertyTask;
        public Zetbox.API.Async.ZbTask TriggerFetchDestinationPropertyAsync()
        {
            if (_triggerFetchDestinationPropertyTask != null) return _triggerFetchDestinationPropertyTask;
            if (!DestinationProperty_was_eagerLoaded) _triggerFetchDestinationPropertyTask = Context.FetchRelationAsync<Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl>(new Guid("fb27e3f8-3615-4f3b-ae2a-2b89b8782e27"), RelationEndRole.A, this);
            else _triggerFetchDestinationPropertyTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, null);
            _triggerFetchDestinationPropertyTask.OnResult(r =>
            {
                _DestinationProperty
                    = new ObservableBSideListWrapper<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Property, Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl, ICollection<Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl>(this.Context, this));
                        // _DestinationProperty.CollectionChanged is managed by OnDestinationPropertyCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchDestinationPropertyTask;
        }

        internal void OnDestinationPropertyCollectionChanged()
        {
            NotifyPropertyChanged("DestinationProperty", null, null);
            if (OnDestinationProperty_PostSetter != null && IsAttached)
                OnDestinationProperty_PostSetter(this);
        }

        private ObservableBSideListWrapper<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.Base.Property, Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl, ICollection<Zetbox.App.SchemaMigration.SourceColumn_created_Property_RelationEntryMemoryImpl>> _DestinationProperty;
        private bool DestinationProperty_was_eagerLoaded = false;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for DestinationProperty
public static event PropertyListChangedHandler<Zetbox.App.SchemaMigration.SourceColumn> OnDestinationProperty_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnDestinationProperty_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.SchemaMigration.SourceEnum> EnumEntries
        {
            get
            {
                if (_EnumEntries == null)
                {
                    TriggerFetchEnumEntriesAsync().Wait();
                }
                return _EnumEntries;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchEnumEntriesTask;
        public Zetbox.API.Async.ZbTask TriggerFetchEnumEntriesAsync()
        {
            if (_triggerFetchEnumEntriesTask != null) return _triggerFetchEnumEntriesTask;

            List<Zetbox.App.SchemaMigration.SourceEnum> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                _triggerFetchEnumEntriesTask = Context.GetListOfAsync<Zetbox.App.SchemaMigration.SourceEnum>(this, "EnumEntries")
                    .OnResult(t =>
                    {
                        serverList = t.Result;
                    });
            }
            else
            {
                _triggerFetchEnumEntriesTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.SchemaMigration.SourceEnum>();
                });
            }

            _triggerFetchEnumEntriesTask.OnResult(t =>
            {
                _EnumEntries = new OneNRelationList<Zetbox.App.SchemaMigration.SourceEnum>(
                    "SourceColumn",
                    null,
                    this,
                    OnEnumEntriesCollectionChanged,
                    serverList);
            });
            return _triggerFetchEnumEntriesTask;
        }

        internal void OnEnumEntriesCollectionChanged()
        {
            NotifyPropertyChanged("EnumEntries", null, null);
            if (OnEnumEntries_PostSetter != null && IsAttached)
                OnEnumEntries_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.SchemaMigration.SourceEnum> _EnumEntries;
public static event PropertyListChangedHandler<Zetbox.App.SchemaMigration.SourceColumn> OnEnumEntries_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnEnumEntries_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceColumn.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? IsNullable
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsNullable;
                if (OnIsNullable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsNullable_Getter(this, __e);
                    __result = _IsNullable = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsNullable != value)
                {
                    var __oldValue = _IsNullable;
                    var __newValue = value;
                    if (OnIsNullable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsNullable", __oldValue, __newValue);
                    _IsNullable = __newValue;
                    NotifyPropertyChanged("IsNullable", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsNullable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsNullable_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsNullable");
                }
            }
        }
        private bool? _IsNullable;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, bool?> OnIsNullable_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnIsNullable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
        // fkBackingName=_fk_References; fkGuidBackingName=_fk_guid_References;
        // referencedInterface=Zetbox.App.SchemaMigration.SourceColumn; moduleNamespace=Zetbox.App.SchemaMigration;
        // inverse Navigator=Referers; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.SchemaMigration.SourceColumn References
        {
            get { return ReferencesImpl; }
            set { ReferencesImpl = (Zetbox.App.SchemaMigration.SourceColumnMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ReferencesCache;

        private int? _fk_References {
            get
            {
                return __fk_ReferencesCache;
            }
            set
            {
                __fk_ReferencesCache = value;
                // Recreate task to clear it's cache
                _triggerFetchReferencesTask = null;
            }
        }

        /// <summary>ForeignKey Property for References's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_References
		{
			get { return _fk_References; }
			set { _fk_References = value; }
		}

        private Guid? _fk_guid_References = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceColumn> _triggerFetchReferencesTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceColumn> TriggerFetchReferencesAsync()
        {
            if (_triggerFetchReferencesTask != null) return _triggerFetchReferencesTask;

            if (_fk_References.HasValue)
                _triggerFetchReferencesTask = Context.FindAsync<Zetbox.App.SchemaMigration.SourceColumn>(_fk_References.Value);
            else
                _triggerFetchReferencesTask = new Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceColumn>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchReferencesTask.OnResult(t =>
            {
                if (OnReferences_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.SourceColumn>(t.Result);
                    OnReferences_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchReferencesTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.SchemaMigration.SourceColumnMemoryImpl ReferencesImpl
        {
            get
            {
                return (Zetbox.App.SchemaMigration.SourceColumnMemoryImpl)TriggerFetchReferencesAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_References == null) || (value != null && value.ID == _fk_References))
                {
                    SetInitializedProperty("References");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ReferencesImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("References", __oldValue, __newValue);

                if (OnReferences_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PreSetter(this, e);
                    __newValue = (Zetbox.App.SchemaMigration.SourceColumnMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_References = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.Referers as IRelationListSync<Zetbox.App.SchemaMigration.SourceColumn>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.Referers as IRelationListSync<Zetbox.App.SchemaMigration.SourceColumn>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("References", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnReferences_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.SourceColumn>(__oldValue, __newValue);
                    OnReferences_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for References
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumn> OnReferences_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumn> OnReferences_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumn> OnReferences_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnReferences_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.SchemaMigration.SourceColumn> Referers
        {
            get
            {
                if (_Referers == null)
                {
                    TriggerFetchReferersAsync().Wait();
                }
                return _Referers;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchReferersTask;
        public Zetbox.API.Async.ZbTask TriggerFetchReferersAsync()
        {
            if (_triggerFetchReferersTask != null) return _triggerFetchReferersTask;

            List<Zetbox.App.SchemaMigration.SourceColumn> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                _triggerFetchReferersTask = Context.GetListOfAsync<Zetbox.App.SchemaMigration.SourceColumn>(this, "Referers")
                    .OnResult(t =>
                    {
                        serverList = t.Result;
                    });
            }
            else
            {
                _triggerFetchReferersTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.SchemaMigration.SourceColumn>();
                });
            }

            _triggerFetchReferersTask.OnResult(t =>
            {
                _Referers = new OneNRelationList<Zetbox.App.SchemaMigration.SourceColumn>(
                    "References",
                    null,
                    this,
                    OnReferersCollectionChanged,
                    serverList);
            });
            return _triggerFetchReferersTask;
        }

        internal void OnReferersCollectionChanged()
        {
            NotifyPropertyChanged("Referers", null, null);
            if (OnReferers_PostSetter != null && IsAttached)
                OnReferers_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.SchemaMigration.SourceColumn> _Referers;
public static event PropertyListChangedHandler<Zetbox.App.SchemaMigration.SourceColumn> OnReferers_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnReferers_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public int? Size
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Size;
                if (OnSize_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnSize_Getter(this, __e);
                    __result = _Size = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Size != value)
                {
                    var __oldValue = _Size;
                    var __newValue = value;
                    if (OnSize_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Size", __oldValue, __newValue);
                    _Size = __newValue;
                    NotifyPropertyChanged("Size", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSize_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnSize_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Size");
                }
            }
        }
        private int? _Size;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, int?> OnSize_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, int?> OnSize_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, int?> OnSize_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnSize_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
        // fkBackingName=_fk_SourceTable; fkGuidBackingName=_fk_guid_SourceTable;
        // referencedInterface=Zetbox.App.SchemaMigration.SourceTable; moduleNamespace=Zetbox.App.SchemaMigration;
        // inverse Navigator=SourceColumn; is list;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.SchemaMigration.SourceTable SourceTable
        {
            get { return SourceTableImpl; }
            set { SourceTableImpl = (Zetbox.App.SchemaMigration.SourceTableMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_SourceTableCache;

        private int? _fk_SourceTable {
            get
            {
                return __fk_SourceTableCache;
            }
            set
            {
                __fk_SourceTableCache = value;
                // Recreate task to clear it's cache
                _triggerFetchSourceTableTask = null;
            }
        }

        /// <summary>ForeignKey Property for SourceTable's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_SourceTable
		{
			get { return _fk_SourceTable; }
			set { _fk_SourceTable = value; }
		}

        private Guid? _fk_guid_SourceTable = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceTable> _triggerFetchSourceTableTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceTable> TriggerFetchSourceTableAsync()
        {
            if (_triggerFetchSourceTableTask != null) return _triggerFetchSourceTableTask;

            if (_fk_SourceTable.HasValue)
                _triggerFetchSourceTableTask = Context.FindAsync<Zetbox.App.SchemaMigration.SourceTable>(_fk_SourceTable.Value);
            else
                _triggerFetchSourceTableTask = new Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceTable>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchSourceTableTask.OnResult(t =>
            {
                if (OnSourceTable_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.SourceTable>(t.Result);
                    OnSourceTable_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchSourceTableTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.SchemaMigration.SourceTableMemoryImpl SourceTableImpl
        {
            get
            {
                return (Zetbox.App.SchemaMigration.SourceTableMemoryImpl)TriggerFetchSourceTableAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_SourceTable == null) || (value != null && value.ID == _fk_SourceTable))
                {
                    SetInitializedProperty("SourceTable");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = SourceTableImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("SourceTable", __oldValue, __newValue);

                if (OnSourceTable_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PreSetter(this, e);
                    __newValue = (Zetbox.App.SchemaMigration.SourceTableMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_SourceTable = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.SourceColumn as IRelationListSync<Zetbox.App.SchemaMigration.SourceColumn>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.SourceColumn as IRelationListSync<Zetbox.App.SchemaMigration.SourceColumn>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("SourceTable", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnSourceTable_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.SourceTable>(__oldValue, __newValue);
                    OnSourceTable_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for SourceTable
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceTable> OnSourceTable_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceTable> OnSourceTable_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceTable> OnSourceTable_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnSourceTable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.SchemaMigration.MappingStatus? Status
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Status;
                if (OnStatus_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__result);
                    OnStatus_Getter(this, __e);
                    __result = _Status = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Status != value)
                {
                    var __oldValue = _Status;
                    var __newValue = value;
                    if (OnStatus_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Status", __oldValue, __newValue);
                    _Status = __newValue;
                    NotifyPropertyChanged("Status", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnStatus_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Status");
                }
            }
        }
        private Zetbox.App.SchemaMigration.MappingStatus? _Status;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceColumn> OnStatus_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateProperty_SourceColumn")]
        public virtual void CreateProperty()
        {
            // base.CreateProperty();
            if (OnCreateProperty_SourceColumn != null)
            {
                OnCreateProperty_SourceColumn(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method SourceColumn.CreateProperty");
            }
        }
        public delegate void CreateProperty_Handler<T>(T obj);
        public static event CreateProperty_Handler<SourceColumn> OnCreateProperty_SourceColumn;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<SourceColumn> OnCreateProperty_SourceColumn_CanExec;

        [EventBasedMethod("OnCreateProperty_SourceColumn_CanExec")]
        public virtual bool CreatePropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateProperty_SourceColumn_CanExec != null)
				{
					OnCreateProperty_SourceColumn_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<SourceColumn> OnCreateProperty_SourceColumn_CanExecReason;

        [EventBasedMethod("OnCreateProperty_SourceColumn_CanExecReason")]
        public virtual string CreatePropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateProperty_SourceColumn_CanExecReason != null)
				{
					OnCreateProperty_SourceColumn_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn)obj;
            var otherImpl = (SourceColumnMemoryImpl)obj;
            var me = (SourceColumn)this;

            me.ChangedOn = other.ChangedOn;
            me.Comment = other.Comment;
            me.CompareNulls = other.CompareNulls;
            me.CreatedOn = other.CreatedOn;
            me.DbType = other.DbType;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.IsNullable = other.IsNullable;
            me.Name = other.Name;
            me.Size = other.Size;
            me.Status = other.Status;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_References = otherImpl._fk_References;
            this._fk_SourceTable = otherImpl._fk_SourceTable;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "References":
                    {
                        var __oldValue = _fk_References;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("References", __oldValue, __newValue);
                        _fk_References = __newValue;
                        NotifyPropertyChanged("References", __oldValue, __newValue);
                    }
                    break;
                case "SourceTable":
                    {
                        var __oldValue = _fk_SourceTable;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("SourceTable", __oldValue, __newValue);
                        _fk_SourceTable = __newValue;
                        NotifyPropertyChanged("SourceTable", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "Comment":
                case "CompareNulls":
                case "CreatedBy":
                case "CreatedOn":
                case "DbType":
                case "Description":
                case "ExportGuid":
                case "IsNullable":
                case "Name":
                case "References":
                case "Size":
                case "SourceTable":
                case "Status":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "DestinationProperty":
                case "EnumEntries":
                case "Referers":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "DestinationProperty":
                return TriggerFetchDestinationPropertyAsync();
            case "EnumEntries":
                return TriggerFetchEnumEntriesAsync();
            case "References":
                return TriggerFetchReferencesAsync();
            case "Referers":
                return TriggerFetchReferersAsync();
            case "SourceTable":
                return TriggerFetchSourceTableAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_References.HasValue)
                ReferencesImpl = (Zetbox.App.SchemaMigration.SourceColumnMemoryImpl)Context.FindPersistenceObject<Zetbox.App.SchemaMigration.SourceColumn>(_fk_guid_References.Value);
            else
            if (_fk_References.HasValue)
                ReferencesImpl = (Zetbox.App.SchemaMigration.SourceColumnMemoryImpl)Context.Find<Zetbox.App.SchemaMigration.SourceColumn>(_fk_References.Value);
            else
                ReferencesImpl = null;

            if (_fk_guid_SourceTable.HasValue)
                SourceTableImpl = (Zetbox.App.SchemaMigration.SourceTableMemoryImpl)Context.FindPersistenceObject<Zetbox.App.SchemaMigration.SourceTable>(_fk_guid_SourceTable.Value);
            else
            if (_fk_SourceTable.HasValue)
                SourceTableImpl = (Zetbox.App.SchemaMigration.SourceTableMemoryImpl)Context.Find<Zetbox.App.SchemaMigration.SourceTable>(_fk_SourceTable.Value);
            else
                SourceTableImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("4f2f1af0-f33b-4d98-89bb-2a386e11a29a"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, DateTime>(
                        lazyCtx,
                        new Guid("ddd4df6a-e085-45fe-b900-f3995dcb1845"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("66bcca34-2297-4e06-84e8-ff19c5d4af35"),
                        "Comment",
                        null,
                        obj => obj.Comment,
                        (obj, val) => obj.Comment = val,
						obj => OnComment_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, bool>(
                        lazyCtx,
                        new Guid("09607800-4b5c-4d8a-a0cf-b508986c2f17"),
                        "CompareNulls",
                        null,
                        obj => obj.CompareNulls,
                        (obj, val) => obj.CompareNulls = val,
						obj => OnCompareNulls_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6c0d8f0c-2937-4d6a-972a-299c085e8b5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, DateTime>(
                        lazyCtx,
                        new Guid("bb5f31d0-072d-45ec-a455-0234ccc31867"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.SchemaMigration.ColumnType>(
                        lazyCtx,
                        new Guid("78873431-d503-4192-b658-5c5bc6442180"),
                        "DbType",
                        null,
                        obj => obj.DbType,
                        (obj, val) => obj.DbType = val,
						obj => OnDbType_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("6273444e-5309-4481-8d2a-99a7a8a1b059"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<SourceColumn, IList<Zetbox.App.Base.Property>>(
                        lazyCtx,
                        new Guid("38dce431-bb65-44c5-b67a-1f28202e51d9"),
                        "DestinationProperty",
                        null,
                        obj => obj.DestinationProperty,
                        null, // lists are read-only properties
                        obj => OnDestinationProperty_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<SourceColumn, ICollection<Zetbox.App.SchemaMigration.SourceEnum>>(
                        lazyCtx,
                        new Guid("a040ea6b-c105-4815-815b-e36f0778e4cb"),
                        "EnumEntries",
                        null,
                        obj => obj.EnumEntries,
                        null, // lists are read-only properties
                        obj => OnEnumEntries_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Guid>(
                        lazyCtx,
                        new Guid("52ba9fcd-dbeb-42da-9146-6f40976c1c83"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, bool?>(
                        lazyCtx,
                        new Guid("817ccb79-7051-4b09-8386-941a21575bfc"),
                        "IsNullable",
                        null,
                        obj => obj.IsNullable,
                        (obj, val) => obj.IsNullable = val,
						obj => OnIsNullable_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, string>(
                        lazyCtx,
                        new Guid("a27f7d36-fd56-4271-bac0-88e22bc65027"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.SchemaMigration.SourceColumn>(
                        lazyCtx,
                        new Guid("4d6faa25-d610-4e23-b12f-7ee4c78da70b"),
                        "References",
                        null,
                        obj => obj.References,
                        (obj, val) => obj.References = val,
						obj => OnReferences_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<SourceColumn, ICollection<Zetbox.App.SchemaMigration.SourceColumn>>(
                        lazyCtx,
                        new Guid("71bed80f-57ec-4038-a9a4-9aabc0c2f60d"),
                        "Referers",
                        null,
                        obj => obj.Referers,
                        null, // lists are read-only properties
                        obj => OnReferers_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, int?>(
                        lazyCtx,
                        new Guid("5a1dc7f1-7743-4603-9b65-1b31ca17d55d"),
                        "Size",
                        null,
                        obj => obj.Size,
                        (obj, val) => obj.Size = val,
						obj => OnSize_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.SchemaMigration.SourceTable>(
                        lazyCtx,
                        new Guid("d1dca069-f6b5-4da1-beee-a51853c109ba"),
                        "SourceTable",
                        null,
                        obj => obj.SourceTable,
                        (obj, val) => obj.SourceTable = val,
						obj => OnSourceTable_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<SourceColumn, Zetbox.App.SchemaMigration.MappingStatus?>(
                        lazyCtx,
                        new Guid("bba3aa19-0097-4692-b649-d51fbc626182"),
                        "Status",
                        null,
                        obj => obj.Status,
                        (obj, val) => obj.Status = val,
						obj => OnStatus_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceColumn")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceColumn != null)
            {
                OnToString_SourceColumn(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceColumn> OnToString_SourceColumn;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_SourceColumn")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_SourceColumn != null)
            {
                OnObjectIsValid_SourceColumn(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<SourceColumn> OnObjectIsValid_SourceColumn;

        [EventBasedMethod("OnNotifyPreSave_SourceColumn")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_SourceColumn != null) OnNotifyPreSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyPreSave_SourceColumn;

        [EventBasedMethod("OnNotifyPostSave_SourceColumn")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_SourceColumn != null) OnNotifyPostSave_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyPostSave_SourceColumn;

        [EventBasedMethod("OnNotifyCreated_SourceColumn")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("Comment");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DbType");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("IsNullable");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("References");
            SetNotInitializedProperty("Size");
            SetNotInitializedProperty("SourceTable");
            SetNotInitializedProperty("Status");
            base.NotifyCreated();
            if (OnNotifyCreated_SourceColumn != null) OnNotifyCreated_SourceColumn(this);
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyCreated_SourceColumn;

        [EventBasedMethod("OnNotifyDeleting_SourceColumn")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_SourceColumn != null) OnNotifyDeleting_SourceColumn(this);
            DestinationProperty.Clear();
            EnumEntries.Clear();
            Referers.Clear();
            ChangedBy = null;
            CreatedBy = null;
            References = null;
            SourceTable = null;
        }
        public static event ObjectEventHandler<SourceColumn> OnNotifyDeleting_SourceColumn;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(this._Comment);
            binStream.Write(this._isCompareNullsSet);
            if (this._isCompareNullsSet) {
                binStream.Write(this._CompareNulls);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write((int?)this._DbType);
            binStream.Write(this._Description);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                foreach(var obj in DestinationProperty)
                {
                    auxObjects.Add(obj);
                }
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._IsNullable);
            binStream.Write(this._Name);
            binStream.Write(References != null ? References.ID : (int?)null);
            binStream.Write(this._Size);
            binStream.Write(SourceTable != null ? SourceTable.ID : (int?)null);
            binStream.Write((int?)this._Status);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._Comment = binStream.ReadString();
            this._isCompareNullsSet = binStream.ReadBoolean();
            if (this._isCompareNullsSet) {
                this._CompareNulls = binStream.ReadBoolean();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._DbType = (Zetbox.App.SchemaMigration.ColumnType)binStream.ReadNullableInt32();
            this._Description = binStream.ReadString();

            DestinationProperty_was_eagerLoaded = binStream.ReadBoolean();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._IsNullable = binStream.ReadNullableBoolean();
            this._Name = binStream.ReadString();
            this._fk_References = binStream.ReadNullableInt32();
            this._Size = binStream.ReadNullableInt32();
            this._fk_SourceTable = binStream.ReadNullableInt32();
            this._Status = (Zetbox.App.SchemaMigration.MappingStatus?)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Comment, xml, "Comment", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._CompareNulls, xml, "CompareNulls", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream((int?)this._DbType, xml, "DbType", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._IsNullable, xml, "IsNullable", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(References != null ? References.ExportGuid : (Guid?)null, xml, "References", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Size, xml, "Size", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(SourceTable != null ? SourceTable.ExportGuid : (Guid?)null, xml, "SourceTable", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream((int?)this._Status, xml, "Status", "Zetbox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.SchemaMigration|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.SchemaMigration|Comment":
                this._Comment = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|CompareNulls":
                // Import must have default value set
                this._CompareNulls = XmlStreamer.ReadBoolean(xml);
                this._isCompareNullsSet = true;
                break;
            case "Zetbox.App.SchemaMigration|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.SchemaMigration|DbType":
                this._DbType = (Zetbox.App.SchemaMigration.ColumnType)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.SchemaMigration|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.SchemaMigration|IsNullable":
                this._IsNullable = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.SchemaMigration|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|References":
                this._fk_guid_References = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|Size":
                this._Size = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.SchemaMigration|SourceTable":
                this._fk_guid_SourceTable = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|Status":
                this._Status = (Zetbox.App.SchemaMigration.MappingStatus?)XmlStreamer.ReadNullableInt32(xml);
               break;
            }
        }

        #endregion

    }
}
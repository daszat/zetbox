// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Base Metadefinition Object for Objectclasses, Interfaces, CompoundObjects and Enumerations.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DataType")]
    public abstract class DataTypeMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, DataType, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("6f005f31-c09c-45f9-9bcb-44090ebf0d1f");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public DataTypeMemoryImpl()
            : base(null)
        {
        }

        public DataTypeMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.InstanceConstraint> Constraints
        {
            get
            {
                if (_Constraints == null)
                {
                    TriggerFetchConstraintsAsync().Wait();
                }
                return _Constraints;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchConstraintsTask;
        public Zetbox.API.Async.ZbTask TriggerFetchConstraintsAsync()
        {
            if (_triggerFetchConstraintsTask != null) return _triggerFetchConstraintsTask;

            List<Zetbox.App.Base.InstanceConstraint> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                if (ConstraintsIds != null)
                {
                    _triggerFetchConstraintsTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                    {
                        serverList = ConstraintsIds.Select(id => Context.Find<Zetbox.App.Base.InstanceConstraint>(id)).ToList();
                        ConstraintsIds = null; // allow id list to be garbage collected
                    });
                }
                else
                {
                    _triggerFetchConstraintsTask = Context.GetListOfAsync<Zetbox.App.Base.InstanceConstraint>(this, "Constraints")
                        .OnResult(t =>
                        {
                            serverList = t.Result;
                        });
                }
            }
            else
            {
                _triggerFetchConstraintsTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Base.InstanceConstraint>();
                });
            }

            _triggerFetchConstraintsTask.OnResult(t =>
            {
                _Constraints = new OneNRelationList<Zetbox.App.Base.InstanceConstraint>(
                    "Constrained",
                    null,
                    this,
                    OnConstraintsCollectionChanged,
                    serverList);
            });
            return _triggerFetchConstraintsTask;
        }

        internal void OnConstraintsCollectionChanged()
        {
            NotifyPropertyChanged("Constraints", null, null);
            if (OnConstraints_PostSetter != null && IsAttached)
                OnConstraints_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Base.InstanceConstraint> _Constraints;
        private List<int> ConstraintsIds;
        private bool Constraints_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnConstraints_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnConstraints_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnCreatedOn_IsValid;

        /// <summary>
        /// Standard Icon wenn IIcon nicht implementiert ist
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
        // fkBackingName=_fk_DefaultIcon; fkGuidBackingName=_fk_guid_DefaultIcon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.Icon DefaultIcon
        {
            get { return DefaultIconImpl; }
            set { DefaultIconImpl = (Zetbox.App.GUI.IconMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_DefaultIconCache;

        private int? _fk_DefaultIcon {
            get
            {
                return __fk_DefaultIconCache;
            }
            set
            {
                __fk_DefaultIconCache = value;
                // Recreate task to clear it's cache
                _triggerFetchDefaultIconTask = null;
            }
        }

        /// <summary>ForeignKey Property for DefaultIcon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultIcon
		{
			get { return _fk_DefaultIcon; }
			set { _fk_DefaultIcon = value; }
		}

        private Guid? _fk_guid_DefaultIcon = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> _triggerFetchDefaultIconTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> TriggerFetchDefaultIconAsync()
        {
            if (_triggerFetchDefaultIconTask != null) return _triggerFetchDefaultIconTask;

            if (_fk_DefaultIcon.HasValue)
                _triggerFetchDefaultIconTask = Context.FindAsync<Zetbox.App.GUI.Icon>(_fk_DefaultIcon.Value);
            else
                _triggerFetchDefaultIconTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchDefaultIconTask.OnResult(t =>
            {
                if (OnDefaultIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(t.Result);
                    OnDefaultIcon_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchDefaultIconTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.IconMemoryImpl DefaultIconImpl
        {
            get
            {
                return (Zetbox.App.GUI.IconMemoryImpl)TriggerFetchDefaultIconAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_DefaultIcon == null) || (value != null && value.ID == _fk_DefaultIcon))
                {
                    SetInitializedProperty("DefaultIcon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = DefaultIconImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);

                if (OnDefaultIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_DefaultIcon = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnDefaultIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnDefaultIcon_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultIcon
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.Icon> OnDefaultIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnDefaultIcon_IsValid;

        /// <summary>
        /// Description of this DataType
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnExportGuid_IsValid;

        /// <summary>
        /// A HTML string with a help text
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string HelpText
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _HelpText;
                if (OnHelpText_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnHelpText_Getter(this, __e);
                    __result = _HelpText = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_HelpText != value)
                {
                    var __oldValue = _HelpText;
                    var __newValue = value;
                    if (OnHelpText_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("HelpText", __oldValue, __newValue);
                    _HelpText = __newValue;
                    NotifyPropertyChanged("HelpText", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnHelpText_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("HelpText");
                }
            }
        }
        private string _HelpText;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnHelpText_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnHelpText_IsValid;

        /// <summary>
        /// Interfaces der Objektklasse
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for ImplementsInterfaces
        public ICollection<Zetbox.App.Base.Interface> ImplementsInterfaces
        {
            get
            {
                if (_ImplementsInterfaces == null)
                {
                    TriggerFetchImplementsInterfacesAsync().Wait();
                }
                return (ICollection<Zetbox.App.Base.Interface>)_ImplementsInterfaces;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchImplementsInterfacesTask;
        public Zetbox.API.Async.ZbTask TriggerFetchImplementsInterfacesAsync()
        {
            if (_triggerFetchImplementsInterfacesTask != null) return _triggerFetchImplementsInterfacesTask;
            _triggerFetchImplementsInterfacesTask = Context.FetchRelationAsync<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl>(new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3"), RelationEndRole.A, this);
            _triggerFetchImplementsInterfacesTask.OnResult(r =>
            {
                _ImplementsInterfaces
                    = new ObservableBSideCollectionWrapper<Zetbox.App.Base.DataType, Zetbox.App.Base.Interface, Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl>(this.Context, this));
                        // _ImplementsInterfaces.CollectionChanged is managed by OnImplementsInterfacesCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchImplementsInterfacesTask;
        }

        internal void OnImplementsInterfacesCollectionChanged()
        {
            NotifyPropertyChanged("ImplementsInterfaces", null, null);
            if (OnImplementsInterfaces_PostSetter != null && IsAttached)
                OnImplementsInterfaces_PostSetter(this);
        }

        private ObservableBSideCollectionWrapper<Zetbox.App.Base.DataType, Zetbox.App.Base.Interface, Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl, ICollection<Zetbox.App.Base.DataType_implements_ImplementedInterfaces_RelationEntryMemoryImpl>> _ImplementsInterfaces;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for ImplementsInterfaces
public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnImplementsInterfaces_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnImplementsInterfaces_IsValid;

        /// <summary>
        /// Liste aller Methoden der Objektklasse.
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.Method> Methods
        {
            get
            {
                if (_Methods == null)
                {
                    TriggerFetchMethodsAsync().Wait();
                }
                return _Methods;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchMethodsTask;
        public Zetbox.API.Async.ZbTask TriggerFetchMethodsAsync()
        {
            if (_triggerFetchMethodsTask != null) return _triggerFetchMethodsTask;

            List<Zetbox.App.Base.Method> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                if (MethodsIds != null)
                {
                    _triggerFetchMethodsTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                    {
                        serverList = MethodsIds.Select(id => Context.Find<Zetbox.App.Base.Method>(id)).ToList();
                        MethodsIds = null; // allow id list to be garbage collected
                    });
                }
                else
                {
                    _triggerFetchMethodsTask = Context.GetListOfAsync<Zetbox.App.Base.Method>(this, "Methods")
                        .OnResult(t =>
                        {
                            serverList = t.Result;
                        });
                }
            }
            else
            {
                _triggerFetchMethodsTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Base.Method>();
                });
            }

            _triggerFetchMethodsTask.OnResult(t =>
            {
                _Methods = new OneNRelationList<Zetbox.App.Base.Method>(
                    "ObjectClass",
                    null,
                    this,
                    OnMethodsCollectionChanged,
                    serverList);
            });
            return _triggerFetchMethodsTask;
        }

        internal void OnMethodsCollectionChanged()
        {
            NotifyPropertyChanged("Methods", null, null);
            if (OnMethods_PostSetter != null && IsAttached)
                OnMethods_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Base.Method> _Methods;
        private List<int> MethodsIds;
        private bool Methods_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnMethods_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnMethods_IsValid;

        /// <summary>
        /// Modul der Objektklasse
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ModuleCache;

        private int? _fk_Module {
            get
            {
                return __fk_ModuleCache;
            }
            set
            {
                __fk_ModuleCache = value;
                // Recreate task to clear it's cache
                _triggerFetchModuleTask = null;
            }
        }

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return _fk_Module; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module> _triggerFetchModuleTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module> TriggerFetchModuleAsync()
        {
            if (_triggerFetchModuleTask != null) return _triggerFetchModuleTask;

            if (_fk_Module.HasValue)
                _triggerFetchModuleTask = Context.FindAsync<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                _triggerFetchModuleTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchModuleTask.OnResult(t =>
            {
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(t.Result);
                    OnModule_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchModuleTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                return (Zetbox.App.Base.ModuleMemoryImpl)TriggerFetchModuleAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Module == null) || (value != null && value.ID == _fk_Module))
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnModule_IsValid;

        /// <summary>
        /// Der Name der Objektklasse
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnName_IsValid;

        /// <summary>
        /// Eigenschaften der Objektklasse
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public IList<Zetbox.App.Base.Property> Properties
        {
            get
            {
                if (_Properties == null)
                {
                    TriggerFetchPropertiesAsync().Wait();
                }
                return _Properties;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchPropertiesTask;
        public Zetbox.API.Async.ZbTask TriggerFetchPropertiesAsync()
        {
            if (_triggerFetchPropertiesTask != null) return _triggerFetchPropertiesTask;

            List<Zetbox.App.Base.Property> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                if (PropertiesIds != null)
                {
                    _triggerFetchPropertiesTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                    {
                        serverList = PropertiesIds.Select(id => Context.Find<Zetbox.App.Base.Property>(id)).ToList();
                        PropertiesIds = null; // allow id list to be garbage collected
                    });
                }
                else
                {
                    _triggerFetchPropertiesTask = Context.GetListOfAsync<Zetbox.App.Base.Property>(this, "Properties")
                        .OnResult(t =>
                        {
                            serverList = t.Result;
                        });
                }
            }
            else
            {
                _triggerFetchPropertiesTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Base.Property>();
                });
            }

            _triggerFetchPropertiesTask.OnResult(t =>
            {
                _Properties = new OneNRelationList<Zetbox.App.Base.Property>(
                    "ObjectClass",
                    "Properties_pos",
                    this,
                    OnPropertiesCollectionChanged,
                    serverList);
            });
            return _triggerFetchPropertiesTask;
        }

        internal void OnPropertiesCollectionChanged()
        {
            NotifyPropertyChanged("Properties", null, null);
            if (OnProperties_PostSetter != null && IsAttached)
                OnProperties_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Base.Property> _Properties;
        private List<int> PropertiesIds;
        private bool Properties_was_eagerLoaded = false;
public static event PropertyListChangedHandler<Zetbox.App.Base.DataType> OnProperties_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnProperties_IsValid;

        /// <summary>
        /// Optional requested ControlKind
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
        // fkBackingName=_fk_RequestedKind; fkGuidBackingName=_fk_guid_RequestedKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind RequestedKind
        {
            get { return RequestedKindImpl; }
            set { RequestedKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_RequestedKindCache;

        private int? _fk_RequestedKind {
            get
            {
                return __fk_RequestedKindCache;
            }
            set
            {
                __fk_RequestedKindCache = value;
                // Recreate task to clear it's cache
                _triggerFetchRequestedKindTask = null;
            }
        }

        /// <summary>ForeignKey Property for RequestedKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RequestedKind
		{
			get { return _fk_RequestedKind; }
			set { _fk_RequestedKind = value; }
		}

        private Guid? _fk_guid_RequestedKind = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> _triggerFetchRequestedKindTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> TriggerFetchRequestedKindAsync()
        {
            if (_triggerFetchRequestedKindTask != null) return _triggerFetchRequestedKindTask;

            if (_fk_RequestedKind.HasValue)
                _triggerFetchRequestedKindTask = Context.FindAsync<Zetbox.App.GUI.ControlKind>(_fk_RequestedKind.Value);
            else
                _triggerFetchRequestedKindTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchRequestedKindTask.OnResult(t =>
            {
                if (OnRequestedKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(t.Result);
                    OnRequestedKind_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchRequestedKindTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl RequestedKindImpl
        {
            get
            {
                return (Zetbox.App.GUI.ControlKindMemoryImpl)TriggerFetchRequestedKindAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_RequestedKind == null) || (value != null && value.ID == _fk_RequestedKind))
                {
                    SetInitializedProperty("RequestedKind");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = RequestedKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_RequestedKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnRequestedKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, Zetbox.App.GUI.ControlKind> OnRequestedKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnRequestedKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowIconInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIconInLists;
                if (!_isShowIconInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"));
                    if (__p != null) {
                        _isShowIconInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ShowIconInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ShowIconInLists'");
                    }
                }
                if (OnShowIconInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIconInLists_Getter(this, __e);
                    __result = _ShowIconInLists = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowIconInListsSet = true;
                if (_ShowIconInLists != value)
                {
                    var __oldValue = _ShowIconInLists;
                    var __newValue = value;
                    if (OnShowIconInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIconInLists", __oldValue, __newValue);
                    _ShowIconInLists = __newValue;
                    NotifyPropertyChanged("ShowIconInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowIconInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIconInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowIconInLists");
                }
            }
        }
        private bool _ShowIconInLists;
        private bool _isShowIconInListsSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIconInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowIconInLists_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowIdInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowIdInLists;
                if (!_isShowIdInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"));
                    if (__p != null) {
                        _isShowIdInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ShowIdInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ShowIdInLists'");
                    }
                }
                if (OnShowIdInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowIdInLists_Getter(this, __e);
                    __result = _ShowIdInLists = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowIdInListsSet = true;
                if (_ShowIdInLists != value)
                {
                    var __oldValue = _ShowIdInLists;
                    var __newValue = value;
                    if (OnShowIdInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowIdInLists", __oldValue, __newValue);
                    _ShowIdInLists = __newValue;
                    NotifyPropertyChanged("ShowIdInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowIdInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowIdInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowIdInLists");
                }
            }
        }
        private bool _ShowIdInLists;
        private bool _isShowIdInListsSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowIdInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowIdInLists_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool ShowNameInLists
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowNameInLists;
                if (!_isShowNameInListsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"));
                    if (__p != null) {
                        _isShowNameInListsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ShowNameInLists = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'DataType.ShowNameInLists'");
                    }
                }
                if (OnShowNameInLists_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnShowNameInLists_Getter(this, __e);
                    __result = _ShowNameInLists = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isShowNameInListsSet = true;
                if (_ShowNameInLists != value)
                {
                    var __oldValue = _ShowNameInLists;
                    var __newValue = value;
                    if (OnShowNameInLists_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowNameInLists", __oldValue, __newValue);
                    _ShowNameInLists = __newValue;
                    NotifyPropertyChanged("ShowNameInLists", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowNameInLists_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnShowNameInLists_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowNameInLists");
                }
            }
        }
        private bool _ShowNameInLists;
        private bool _isShowNameInListsSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DataType, bool> OnShowNameInLists_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DataType> OnShowNameInLists_IsValid;

        /// <summary>
        /// Property wizard
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAddProperty_DataType")]
        public virtual Zetbox.App.Base.Property AddProperty()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Property>();
            if (OnAddProperty_DataType != null)
            {
                OnAddProperty_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.AddProperty");
            }
            return e.Result;
        }
        public delegate void AddProperty_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Property> ret);
        public static event AddProperty_Handler<DataType> OnAddProperty_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnAddProperty_DataType_CanExec;

        [EventBasedMethod("OnAddProperty_DataType_CanExec")]
        public virtual bool AddPropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAddProperty_DataType_CanExec != null)
				{
					OnAddProperty_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnAddProperty_DataType_CanExecReason;

        [EventBasedMethod("OnAddProperty_DataType_CanExecReason")]
        public virtual string AddPropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAddProperty_DataType_CanExecReason != null)
				{
					OnAddProperty_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_DataType")]
        public virtual System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_DataType != null)
            {
                OnGetDataType_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataType");
            }
            return e.Result;
        }
        public delegate void GetDataType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
        public static event GetDataType_Handler<DataType> OnGetDataType_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnGetDataType_DataType_CanExec;

        [EventBasedMethod("OnGetDataType_DataType_CanExec")]
        public virtual bool GetDataTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataType_DataType_CanExec != null)
				{
					OnGetDataType_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnGetDataType_DataType_CanExecReason;

        [EventBasedMethod("OnGetDataType_DataType_CanExecReason")]
        public virtual string GetDataTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataType_DataType_CanExecReason != null)
				{
					OnGetDataType_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_DataType")]
        public virtual string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_DataType != null)
            {
                OnGetDataTypeString_DataType(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on DataType.GetDataTypeString");
            }
            return e.Result;
        }
        public delegate void GetDataTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetDataTypeString_Handler<DataType> OnGetDataTypeString_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnGetDataTypeString_DataType_CanExec;

        [EventBasedMethod("OnGetDataTypeString_DataType_CanExec")]
        public virtual bool GetDataTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataTypeString_DataType_CanExec != null)
				{
					OnGetDataTypeString_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnGetDataTypeString_DataType_CanExecReason;

        [EventBasedMethod("OnGetDataTypeString_DataType_CanExecReason")]
        public virtual string GetDataTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataTypeString_DataType_CanExecReason != null)
				{
					OnGetDataTypeString_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnImplementInterfaces_DataType")]
        public virtual void ImplementInterfaces()
        {
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_DataType != null)
            {
                OnImplementInterfaces_DataType(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method DataType.ImplementInterfaces");
            }
        }
        public delegate void ImplementInterfaces_Handler<T>(T obj);
        public static event ImplementInterfaces_Handler<DataType> OnImplementInterfaces_DataType;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DataType> OnImplementInterfaces_DataType_CanExec;

        [EventBasedMethod("OnImplementInterfaces_DataType_CanExec")]
        public virtual bool ImplementInterfacesCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnImplementInterfaces_DataType_CanExec != null)
				{
					OnImplementInterfaces_DataType_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DataType> OnImplementInterfaces_DataType_CanExecReason;

        [EventBasedMethod("OnImplementInterfaces_DataType_CanExecReason")]
        public virtual string ImplementInterfacesCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnImplementInterfaces_DataType_CanExecReason != null)
				{
					OnImplementInterfaces_DataType_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(DataType);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType)obj;
            var otherImpl = (DataTypeMemoryImpl)obj;
            var me = (DataType)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.HelpText = other.HelpText;
            me.Name = other.Name;
            me.ShowIconInLists = other.ShowIconInLists;
            me.ShowIdInLists = other.ShowIdInLists;
            me.ShowNameInLists = other.ShowNameInLists;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DefaultIcon = otherImpl._fk_DefaultIcon;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_RequestedKind = otherImpl._fk_RequestedKind;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "DefaultIcon":
                    {
                        var __oldValue = _fk_DefaultIcon;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("DefaultIcon", __oldValue, __newValue);
                        _fk_DefaultIcon = __newValue;
                        NotifyPropertyChanged("DefaultIcon", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = _fk_Module;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        _fk_Module = __newValue;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                case "RequestedKind":
                    {
                        var __oldValue = _fk_RequestedKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);
                        _fk_RequestedKind = __newValue;
                        NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "DefaultIcon":
                case "Description":
                case "ExportGuid":
                case "HelpText":
                case "Module":
                case "Name":
                case "RequestedKind":
                case "ShowIconInLists":
                case "ShowIdInLists":
                case "ShowNameInLists":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Constraints":
                case "ImplementsInterfaces":
                case "Methods":
                case "Properties":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "Constraints":
                return TriggerFetchConstraintsAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "DefaultIcon":
                return TriggerFetchDefaultIconAsync();
            case "ImplementsInterfaces":
                return TriggerFetchImplementsInterfacesAsync();
            case "Methods":
                return TriggerFetchMethodsAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "Properties":
                return TriggerFetchPropertiesAsync();
            case "RequestedKind":
                return TriggerFetchRequestedKindAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_DefaultIcon.HasValue)
                DefaultIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_DefaultIcon.Value);
            else
            if (_fk_DefaultIcon.HasValue)
                DefaultIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.Find<Zetbox.App.GUI.Icon>(_fk_DefaultIcon.Value);
            else
                DefaultIconImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_RequestedKind.HasValue)
                RequestedKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_RequestedKind.Value);
            else
            if (_fk_RequestedKind.HasValue)
                RequestedKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_RequestedKind.Value);
            else
                RequestedKindImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c007156e-5bb3-4c4e-8cb3-5823892a893b"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, DateTime>(
                        lazyCtx,
                        new Guid("1bd4a5bc-ef42-4bc0-bf5e-162dea22d91e"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataType, ICollection<Zetbox.App.Base.InstanceConstraint>>(
                        lazyCtx,
                        new Guid("eda15826-7251-4726-9f6b-65e7f24f6ad1"),
                        "Constraints",
                        null,
                        obj => obj.Constraints,
                        null, // lists are read-only properties
                        obj => OnConstraints_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("5c2ec701-9e7e-4340-a463-4fc2b8204f5d"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, DateTime>(
                        lazyCtx,
                        new Guid("6ab4d1f6-1989-489b-a733-1c449fad773d"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("b1402cda-de87-4b2a-bd65-a950b8dd7a9f"),
                        "DefaultIcon",
                        null,
                        obj => obj.DefaultIcon,
                        (obj, val) => obj.DefaultIcon = val,
						obj => OnDefaultIcon_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, string>(
                        lazyCtx,
                        new Guid("2cffd4f2-cb84-4f39-9bd1-19fd2e160bad"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Guid>(
                        lazyCtx,
                        new Guid("1fdb011e-2098-4077-b5e9-dd2eeafa727c"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, string>(
                        lazyCtx,
                        new Guid("35f1afb3-eb6f-455d-9794-4f1f2825cbb1"),
                        "HelpText",
                        null,
                        obj => obj.HelpText,
                        (obj, val) => obj.HelpText = val,
						obj => OnHelpText_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataType, ICollection<Zetbox.App.Base.Interface>>(
                        lazyCtx,
                        new Guid("a9ec04c2-0807-4d6c-a96a-824d13e5c571"),
                        "ImplementsInterfaces",
                        null,
                        obj => obj.ImplementsInterfaces,
                        null, // lists are read-only properties
                        obj => OnImplementsInterfaces_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataType, ICollection<Zetbox.App.Base.Method>>(
                        lazyCtx,
                        new Guid("e9f8a1f1-a5ed-44a6-bbf3-9b040766f19f"),
                        "Methods",
                        null,
                        obj => obj.Methods,
                        null, // lists are read-only properties
                        obj => OnMethods_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("4e1fb30b-e528-4968-95b0-f3a38eafe643"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, string>(
                        lazyCtx,
                        new Guid("083bbf12-aac6-4f5f-802a-d3701550bc84"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<DataType, IList<Zetbox.App.Base.Property>>(
                        lazyCtx,
                        new Guid("e7d91162-0aa8-4fe3-9e29-d0519781ceb7"),
                        "Properties",
                        null,
                        obj => obj.Properties,
                        null, // lists are read-only properties
                        obj => OnProperties_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("bd244ed4-5c39-4783-a03d-7bb31a8884fc"),
                        "RequestedKind",
                        null,
                        obj => obj.RequestedKind,
                        (obj, val) => obj.RequestedKind = val,
						obj => OnRequestedKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("d5b0ff20-10c1-40ce-b18e-9846dc5d0b60"),
                        "ShowIconInLists",
                        null,
                        obj => obj.ShowIconInLists,
                        (obj, val) => obj.ShowIconInLists = val,
						obj => OnShowIconInLists_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("220925a1-ed82-4b08-a3fa-af31bda7f40e"),
                        "ShowIdInLists",
                        null,
                        obj => obj.ShowIdInLists,
                        (obj, val) => obj.ShowIdInLists = val,
						obj => OnShowIdInLists_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<DataType, bool>(
                        lazyCtx,
                        new Guid("60e64ab1-830d-4c20-9d2e-17049738e9c4"),
                        "ShowNameInLists",
                        null,
                        obj => obj.ShowNameInLists,
                        (obj, val) => obj.ShowNameInLists = val,
						obj => OnShowNameInLists_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DataType")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DataType != null)
            {
                OnToString_DataType(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DataType> OnToString_DataType;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_DataType")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_DataType != null)
            {
                OnObjectIsValid_DataType(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<DataType> OnObjectIsValid_DataType;

        [EventBasedMethod("OnNotifyPreSave_DataType")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_DataType != null) OnNotifyPreSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyPreSave_DataType;

        [EventBasedMethod("OnNotifyPostSave_DataType")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_DataType != null) OnNotifyPostSave_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyPostSave_DataType;

        [EventBasedMethod("OnNotifyCreated_DataType")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DefaultIcon");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("HelpText");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("RequestedKind");
            base.NotifyCreated();
            if (OnNotifyCreated_DataType != null) OnNotifyCreated_DataType(this);
        }
        public static event ObjectEventHandler<DataType> OnNotifyCreated_DataType;

        [EventBasedMethod("OnNotifyDeleting_DataType")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_DataType != null) OnNotifyDeleting_DataType(this);
            Constraints.Clear();
            ImplementsInterfaces.Clear();
            Methods.Clear();
            Properties.Clear();
            ChangedBy = null;
            CreatedBy = null;
            DefaultIcon = null;
            Module = null;
            RequestedKind = null;
        }
        public static event ObjectEventHandler<DataType> OnNotifyDeleting_DataType;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Constraints.Count);
                foreach(var obj in Constraints)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(DefaultIcon != null ? DefaultIcon.ID : (int?)null);
            binStream.Write(this._Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._HelpText);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Methods.Count);
                foreach(var obj in Methods)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(Module != null ? Module.ID : (int?)null);
            binStream.Write(this._Name);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Properties.Count);
                foreach(var obj in Properties)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            binStream.Write(RequestedKind != null ? RequestedKind.ID : (int?)null);
            binStream.Write(this._isShowIconInListsSet);
            if (this._isShowIconInListsSet) {
                binStream.Write(this._ShowIconInLists);
            }
            binStream.Write(this._isShowIdInListsSet);
            if (this._isShowIdInListsSet) {
                binStream.Write(this._ShowIdInLists);
            }
            binStream.Write(this._isShowNameInListsSet);
            if (this._isShowNameInListsSet) {
                binStream.Write(this._ShowNameInLists);
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }

            Constraints_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    ConstraintsIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        ConstraintsIds.Add(id);
                    }
                }
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._fk_DefaultIcon = binStream.ReadNullableInt32();
            this._Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._HelpText = binStream.ReadString();

            Methods_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    MethodsIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        MethodsIds.Add(id);
                    }
                }
            }
            this._fk_Module = binStream.ReadNullableInt32();
            this._Name = binStream.ReadString();

            Properties_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    PropertiesIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        PropertiesIds.Add(id);
                    }
                }
            }
            this._fk_RequestedKind = binStream.ReadNullableInt32();
            this._isShowIconInListsSet = binStream.ReadBoolean();
            if (this._isShowIconInListsSet) {
                this._ShowIconInLists = binStream.ReadBoolean();
            }
            this._isShowIdInListsSet = binStream.ReadBoolean();
            if (this._isShowIdInListsSet) {
                this._ShowIdInLists = binStream.ReadBoolean();
            }
            this._isShowNameInListsSet = binStream.ReadBoolean();
            if (this._isShowNameInListsSet) {
                this._ShowNameInLists = binStream.ReadBoolean();
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultIcon != null ? DefaultIcon.ExportGuid : (Guid?)null, xml, "DefaultIcon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._HelpText, xml, "HelpText", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(RequestedKind != null ? RequestedKind.ExportGuid : (Guid?)null, xml, "RequestedKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowIconInLists, xml, "ShowIconInLists", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowIdInLists, xml, "ShowIdInLists", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowNameInLists, xml, "ShowNameInLists", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.GUI|DefaultIcon":
                this._fk_guid_DefaultIcon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|HelpText":
                this._HelpText = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|RequestedKind":
                this._fk_guid_RequestedKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ShowIconInLists":
                // Import must have default value set
                this._ShowIconInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowIconInListsSet = true;
                break;
            case "Zetbox.App.GUI|ShowIdInLists":
                // Import must have default value set
                this._ShowIdInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowIdInListsSet = true;
                break;
            case "Zetbox.App.GUI|ShowNameInLists":
                // Import must have default value set
                this._ShowNameInLists = XmlStreamer.ReadBoolean(xml);
                this._isShowNameInListsSet = true;
                break;
            }
        }

        #endregion

    }
}
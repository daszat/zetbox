// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Describes a Relation between two Object Classes
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Relation")]
    public class RelationMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Relation, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("1c0e894f-4eb4-422f-8094-3095735b4917");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public RelationMemoryImpl()
            : base(null)
        {
        }

        public RelationMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// The A-side of this Relation.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.RelationEnd; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=AParent; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.RelationEnd A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.RelationEndMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ACache;

        private int? _fk_A {
            get
            {
                return __fk_ACache;
            }
            set
            {
                __fk_ACache = value;
                // Recreate task to clear it's cache
                _triggerFetchATask = null;
            }
        }

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return _fk_A; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd> _triggerFetchATask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd> TriggerFetchAAsync()
        {
            if (_triggerFetchATask != null) return _triggerFetchATask;

            if (_fk_A.HasValue)
                _triggerFetchATask = Context.FindAsync<Zetbox.App.Base.RelationEnd>(_fk_A.Value);
            else
                _triggerFetchATask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchATask.OnResult(t =>
            {
                if (OnA_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.RelationEnd>(t.Result);
                    OnA_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchATask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.RelationEndMemoryImpl AImpl
        {
            get
            {
                return (Zetbox.App.Base.RelationEndMemoryImpl)TriggerFetchAAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_A == null) || (value != null && value.ID == _fk_A))
                {
                    SetInitializedProperty("A");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = AImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                if (OnA_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.RelationEnd>(__oldValue, __newValue);
                    OnA_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.RelationEndMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_A = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.AParent = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.AParent = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnA_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.RelationEnd>(__oldValue, __newValue);
                    OnA_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnA_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnA_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnA_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnA_IsValid;

        /// <summary>
        /// The B-side of this Relation.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.RelationEnd; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=BParent; is reference;
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.RelationEnd B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.RelationEndMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_BCache;

        private int? _fk_B {
            get
            {
                return __fk_BCache;
            }
            set
            {
                __fk_BCache = value;
                // Recreate task to clear it's cache
                _triggerFetchBTask = null;
            }
        }

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return _fk_B; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd> _triggerFetchBTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd> TriggerFetchBAsync()
        {
            if (_triggerFetchBTask != null) return _triggerFetchBTask;

            if (_fk_B.HasValue)
                _triggerFetchBTask = Context.FindAsync<Zetbox.App.Base.RelationEnd>(_fk_B.Value);
            else
                _triggerFetchBTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.RelationEnd>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchBTask.OnResult(t =>
            {
                if (OnB_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.RelationEnd>(t.Result);
                    OnB_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchBTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.RelationEndMemoryImpl BImpl
        {
            get
            {
                return (Zetbox.App.Base.RelationEndMemoryImpl)TriggerFetchBAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_B == null) || (value != null && value.ID == _fk_B))
                {
                    SetInitializedProperty("B");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = BImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                if (OnB_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.RelationEnd>(__oldValue, __newValue);
                    OnB_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.RelationEndMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_B = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.BParent = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.BParent = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnB_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.RelationEnd>(__oldValue, __newValue);
                    OnB_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnB_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnB_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEnd> OnB_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnB_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("4629cba1-9162-4d9f-a815-0b0ed96f95be"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Relation.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnChangedOn_IsValid;

        /// <summary>
        /// The ContainmentSpecification of this Relation.
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.Base.ContainmentSpecification Containment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Containment;
                if (!_isContainmentSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("eed9955a-11a3-4c25-b0bb-e01ecd14b26f"));
                    if (__p != null) {
                        _isContainmentSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._Containment = (Zetbox.App.Base.ContainmentSpecification)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Relation.Containment'");
                    }
                }
                if (OnContainment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.ContainmentSpecification>(__result);
                    OnContainment_Getter(this, __e);
                    __result = _Containment = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isContainmentSet = true;
                if (_Containment != value)
                {
                    var __oldValue = _Containment;
                    var __newValue = value;
                    if (OnContainment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ContainmentSpecification>(__oldValue, __newValue);
                        OnContainment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Containment", __oldValue, __newValue);
                    _Containment = __newValue;
                    NotifyPropertyChanged("Containment", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnContainment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ContainmentSpecification>(__oldValue, __newValue);
                        OnContainment_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Containment");
                }
            }
        }
        private Zetbox.App.Base.ContainmentSpecification _Containment;
        private bool _isContainmentSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.ContainmentSpecification> OnContainment_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.ContainmentSpecification> OnContainment_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.ContainmentSpecification> OnContainment_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnContainment_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("a28faa39-5563-4e2d-b9d9-278ac7dd2200"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Relation.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnCreatedOn_IsValid;

        /// <summary>
        /// Description of this Relation
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1e600012-3b35-4dc6-af28-1f858b095a15"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Relation.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ModuleCache;

        private int? _fk_Module {
            get
            {
                return __fk_ModuleCache;
            }
            set
            {
                __fk_ModuleCache = value;
                // Recreate task to clear it's cache
                _triggerFetchModuleTask = null;
            }
        }

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return _fk_Module; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module> _triggerFetchModuleTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module> TriggerFetchModuleAsync()
        {
            if (_triggerFetchModuleTask != null) return _triggerFetchModuleTask;

            if (_fk_Module.HasValue)
                _triggerFetchModuleTask = Context.FindAsync<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                _triggerFetchModuleTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchModuleTask.OnResult(t =>
            {
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(t.Result);
                    OnModule_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchModuleTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.ModuleMemoryImpl ModuleImpl
        {
            get
            {
                return (Zetbox.App.Base.ModuleMemoryImpl)TriggerFetchModuleAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Module == null) || (value != null && value.ID == _fk_Module))
                {
                    SetInitializedProperty("Module");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ModuleImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Module = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnModule_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnModule_IsValid;

        /// <summary>
        /// Storagetype for 1:1 Relations. Must be null for non 1:1 Relations.
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.Base.StorageType Storage
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Storage;
                if (OnStorage_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.StorageType>(__result);
                    OnStorage_Getter(this, __e);
                    __result = _Storage = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Storage != value)
                {
                    var __oldValue = _Storage;
                    var __newValue = value;
                    if (OnStorage_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.StorageType>(__oldValue, __newValue);
                        OnStorage_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Storage", __oldValue, __newValue);
                    _Storage = __newValue;
                    NotifyPropertyChanged("Storage", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnStorage_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.StorageType>(__oldValue, __newValue);
                        OnStorage_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Storage");
                }
            }
        }
        private Zetbox.App.Base.StorageType _Storage;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.StorageType> OnStorage_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.StorageType> OnStorage_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, Zetbox.App.Base.StorageType> OnStorage_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnStorage_IsValid;

        /// <summary>
        /// Verb of this Relation
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Verb
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Verb;
                if (OnVerb_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnVerb_Getter(this, __e);
                    __result = _Verb = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Verb != value)
                {
                    var __oldValue = _Verb;
                    var __newValue = value;
                    if (OnVerb_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnVerb_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Verb", __oldValue, __newValue);
                    _Verb = __newValue;
                    NotifyPropertyChanged("Verb", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnVerb_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnVerb_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Verb");
                }
            }
        }
        private string _Verb;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Relation, string> OnVerb_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Relation, string> OnVerb_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Relation, string> OnVerb_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Relation> OnVerb_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetEnd_Relation")]
        public virtual Zetbox.App.Base.RelationEnd GetEnd(Zetbox.App.Base.ObjectReferenceProperty prop)
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.RelationEnd>();
            if (OnGetEnd_Relation != null)
            {
                OnGetEnd_Relation(this, e, prop);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.GetEnd");
            }
            return e.Result;
        }
        public delegate void GetEnd_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.RelationEnd> ret, Zetbox.App.Base.ObjectReferenceProperty prop);
        public static event GetEnd_Handler<Relation> OnGetEnd_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnGetEnd_Relation_CanExec;

        [EventBasedMethod("OnGetEnd_Relation_CanExec")]
        public virtual bool GetEndCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetEnd_Relation_CanExec != null)
				{
					OnGetEnd_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnGetEnd_Relation_CanExecReason;

        [EventBasedMethod("OnGetEnd_Relation_CanExecReason")]
        public virtual string GetEndCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetEnd_Relation_CanExecReason != null)
				{
					OnGetEnd_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetEndFromRole_Relation")]
        public virtual Zetbox.App.Base.RelationEnd GetEndFromRole(Zetbox.API.RelationEndRole role)
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.RelationEnd>();
            if (OnGetEndFromRole_Relation != null)
            {
                OnGetEndFromRole_Relation(this, e, role);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.GetEndFromRole");
            }
            return e.Result;
        }
        public delegate void GetEndFromRole_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.RelationEnd> ret, Zetbox.API.RelationEndRole role);
        public static event GetEndFromRole_Handler<Relation> OnGetEndFromRole_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnGetEndFromRole_Relation_CanExec;

        [EventBasedMethod("OnGetEndFromRole_Relation_CanExec")]
        public virtual bool GetEndFromRoleCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetEndFromRole_Relation_CanExec != null)
				{
					OnGetEndFromRole_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnGetEndFromRole_Relation_CanExecReason;

        [EventBasedMethod("OnGetEndFromRole_Relation_CanExecReason")]
        public virtual string GetEndFromRoleCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetEndFromRole_Relation_CanExecReason != null)
				{
					OnGetEndFromRole_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetEntryInterfaceType_Relation")]
        public virtual Zetbox.API.InterfaceType GetEntryInterfaceType()
        {
            var e = new MethodReturnEventArgs<Zetbox.API.InterfaceType>();
            if (OnGetEntryInterfaceType_Relation != null)
            {
                OnGetEntryInterfaceType_Relation(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.GetEntryInterfaceType");
            }
            return e.Result;
        }
        public delegate void GetEntryInterfaceType_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.API.InterfaceType> ret);
        public static event GetEntryInterfaceType_Handler<Relation> OnGetEntryInterfaceType_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnGetEntryInterfaceType_Relation_CanExec;

        [EventBasedMethod("OnGetEntryInterfaceType_Relation_CanExec")]
        public virtual bool GetEntryInterfaceTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetEntryInterfaceType_Relation_CanExec != null)
				{
					OnGetEntryInterfaceType_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnGetEntryInterfaceType_Relation_CanExecReason;

        [EventBasedMethod("OnGetEntryInterfaceType_Relation_CanExecReason")]
        public virtual string GetEntryInterfaceTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetEntryInterfaceType_Relation_CanExecReason != null)
				{
					OnGetEntryInterfaceType_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetOtherEnd_Relation")]
        public virtual Zetbox.App.Base.RelationEnd GetOtherEnd(Zetbox.App.Base.RelationEnd relEnd)
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.RelationEnd>();
            if (OnGetOtherEnd_Relation != null)
            {
                OnGetOtherEnd_Relation(this, e, relEnd);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.GetOtherEnd");
            }
            return e.Result;
        }
        public delegate void GetOtherEnd_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.RelationEnd> ret, Zetbox.App.Base.RelationEnd relEnd);
        public static event GetOtherEnd_Handler<Relation> OnGetOtherEnd_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnGetOtherEnd_Relation_CanExec;

        [EventBasedMethod("OnGetOtherEnd_Relation_CanExec")]
        public virtual bool GetOtherEndCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetOtherEnd_Relation_CanExec != null)
				{
					OnGetOtherEnd_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnGetOtherEnd_Relation_CanExecReason;

        [EventBasedMethod("OnGetOtherEnd_Relation_CanExecReason")]
        public virtual string GetOtherEndCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetOtherEnd_Relation_CanExecReason != null)
				{
					OnGetOtherEnd_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetRelationType_Relation")]
        public virtual Zetbox.API.RelationType GetRelationType()
        {
            var e = new MethodReturnEventArgs<Zetbox.API.RelationType>();
            if (OnGetRelationType_Relation != null)
            {
                OnGetRelationType_Relation(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.GetRelationType");
            }
            return e.Result;
        }
        public delegate void GetRelationType_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.API.RelationType> ret);
        public static event GetRelationType_Handler<Relation> OnGetRelationType_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnGetRelationType_Relation_CanExec;

        [EventBasedMethod("OnGetRelationType_Relation_CanExec")]
        public virtual bool GetRelationTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetRelationType_Relation_CanExec != null)
				{
					OnGetRelationType_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnGetRelationType_Relation_CanExecReason;

        [EventBasedMethod("OnGetRelationType_Relation_CanExecReason")]
        public virtual string GetRelationTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetRelationType_Relation_CanExecReason != null)
				{
					OnGetRelationType_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnNeedsPositionStorage_Relation")]
        public virtual bool NeedsPositionStorage(Zetbox.API.RelationEndRole endRole)
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnNeedsPositionStorage_Relation != null)
            {
                OnNeedsPositionStorage_Relation(this, e, endRole);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Relation.NeedsPositionStorage");
            }
            return e.Result;
        }
        public delegate void NeedsPositionStorage_Handler<T>(T obj, MethodReturnEventArgs<bool> ret, Zetbox.API.RelationEndRole endRole);
        public static event NeedsPositionStorage_Handler<Relation> OnNeedsPositionStorage_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnNeedsPositionStorage_Relation_CanExec;

        [EventBasedMethod("OnNeedsPositionStorage_Relation_CanExec")]
        public virtual bool NeedsPositionStorageCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnNeedsPositionStorage_Relation_CanExec != null)
				{
					OnNeedsPositionStorage_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnNeedsPositionStorage_Relation_CanExecReason;

        [EventBasedMethod("OnNeedsPositionStorage_Relation_CanExecReason")]
        public virtual string NeedsPositionStorageCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnNeedsPositionStorage_Relation_CanExecReason != null)
				{
					OnNeedsPositionStorage_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnSwapRelationEnds_Relation")]
        public virtual void SwapRelationEnds()
        {
            // base.SwapRelationEnds();
            if (OnSwapRelationEnds_Relation != null)
            {
                OnSwapRelationEnds_Relation(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method Relation.SwapRelationEnds");
            }
        }
        public delegate void SwapRelationEnds_Handler<T>(T obj);
        public static event SwapRelationEnds_Handler<Relation> OnSwapRelationEnds_Relation;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Relation> OnSwapRelationEnds_Relation_CanExec;

        [EventBasedMethod("OnSwapRelationEnds_Relation_CanExec")]
        public virtual bool SwapRelationEndsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnSwapRelationEnds_Relation_CanExec != null)
				{
					OnSwapRelationEnds_Relation_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Relation> OnSwapRelationEnds_Relation_CanExecReason;

        [EventBasedMethod("OnSwapRelationEnds_Relation_CanExecReason")]
        public virtual string SwapRelationEndsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnSwapRelationEnds_Relation_CanExecReason != null)
				{
					OnSwapRelationEnds_Relation_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Relation);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Relation)obj;
            var otherImpl = (RelationMemoryImpl)obj;
            var me = (Relation)this;

            me.ChangedOn = other.ChangedOn;
            me.Containment = other.Containment;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Storage = other.Storage;
            me.Verb = other.Verb;
            this._fk_A = otherImpl._fk_A;
            this._fk_B = otherImpl._fk_B;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "A":
                    {
                        var __oldValue = _fk_A;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("A", __oldValue, __newValue);
                        _fk_A = __newValue;
                        NotifyPropertyChanged("A", __oldValue, __newValue);
                    }
                    break;
                case "B":
                    {
                        var __oldValue = _fk_B;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("B", __oldValue, __newValue);
                        _fk_B = __newValue;
                        NotifyPropertyChanged("B", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                case "Module":
                    {
                        var __oldValue = _fk_Module;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Module", __oldValue, __newValue);
                        _fk_Module = __newValue;
                        NotifyPropertyChanged("Module", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "A":
                case "B":
                case "ChangedBy":
                case "ChangedOn":
                case "Containment":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "ExportGuid":
                case "Module":
                case "Storage":
                case "Verb":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "A":
                return TriggerFetchAAsync();
            case "B":
                return TriggerFetchBAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.RelationEndMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.RelationEnd>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.RelationEndMemoryImpl)Context.Find<Zetbox.App.Base.RelationEnd>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.RelationEndMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.RelationEnd>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.RelationEndMemoryImpl)Context.Find<Zetbox.App.Base.RelationEnd>(_fk_B.Value);
            else
                BImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleMemoryImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.RelationEnd>(
                        lazyCtx,
                        new Guid("d4429d3c-8fd1-468e-88d5-17abfd658d04"),
                        "A",
                        null,
                        obj => obj.A,
                        (obj, val) => obj.A = val,
						obj => OnA_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.RelationEnd>(
                        lazyCtx,
                        new Guid("20331803-079e-471e-ae45-f4d004aef48e"),
                        "B",
                        null,
                        obj => obj.B,
                        (obj, val) => obj.B = val,
						obj => OnB_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d90031ab-e77d-44d9-acc9-4407c8e8d6fc"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, DateTime>(
                        lazyCtx,
                        new Guid("4629cba1-9162-4d9f-a815-0b0ed96f95be"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.ContainmentSpecification>(
                        lazyCtx,
                        new Guid("eed9955a-11a3-4c25-b0bb-e01ecd14b26f"),
                        "Containment",
                        null,
                        obj => obj.Containment,
                        (obj, val) => obj.Containment = val,
						obj => OnContainment_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("0cd2b922-99a8-4f36-ab52-0bed4ef08a93"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, DateTime>(
                        lazyCtx,
                        new Guid("a28faa39-5563-4e2d-b9d9-278ac7dd2200"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, string>(
                        lazyCtx,
                        new Guid("56948ee3-f1a7-44c3-956a-9baa863c5092"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Guid>(
                        lazyCtx,
                        new Guid("1e600012-3b35-4dc6-af28-1f858b095a15"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("2a1a99a4-7dd5-4244-913f-06315f3de831"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, Zetbox.App.Base.StorageType>(
                        lazyCtx,
                        new Guid("ba4f10fd-f7cf-4237-93a6-734e7e5c6b8a"),
                        "Storage",
                        null,
                        obj => obj.Storage,
                        (obj, val) => obj.Storage = val,
						obj => OnStorage_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Relation, string>(
                        lazyCtx,
                        new Guid("cd7a8de3-a1bf-4043-93d9-d9874b40bb69"),
                        "Verb",
                        null,
                        obj => obj.Verb,
                        (obj, val) => obj.Verb = val,
						obj => OnVerb_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Relation")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Relation != null)
            {
                OnToString_Relation(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Relation> OnToString_Relation;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Relation")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Relation != null)
            {
                OnObjectIsValid_Relation(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Relation> OnObjectIsValid_Relation;

        [EventBasedMethod("OnNotifyPreSave_Relation")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Relation != null) OnNotifyPreSave_Relation(this);
        }
        public static event ObjectEventHandler<Relation> OnNotifyPreSave_Relation;

        [EventBasedMethod("OnNotifyPostSave_Relation")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Relation != null) OnNotifyPostSave_Relation(this);
        }
        public static event ObjectEventHandler<Relation> OnNotifyPostSave_Relation;

        [EventBasedMethod("OnNotifyCreated_Relation")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("A");
            SetNotInitializedProperty("B");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Storage");
            SetNotInitializedProperty("Verb");
            base.NotifyCreated();
            if (OnNotifyCreated_Relation != null) OnNotifyCreated_Relation(this);
        }
        public static event ObjectEventHandler<Relation> OnNotifyCreated_Relation;

        [EventBasedMethod("OnNotifyDeleting_Relation")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Relation != null) OnNotifyDeleting_Relation(this);
            A = null;
            B = null;
            ChangedBy = null;
            CreatedBy = null;
            Module = null;
        }
        public static event ObjectEventHandler<Relation> OnNotifyDeleting_Relation;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(A != null ? A.ID : (int?)null);
            binStream.Write(B != null ? B.ID : (int?)null);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(this._isContainmentSet);
            if (this._isContainmentSet) {
                binStream.Write((int?)this._Containment);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(Module != null ? Module.ID : (int?)null);
            binStream.Write((int?)this._Storage);
            binStream.Write(this._Verb);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_A = binStream.ReadNullableInt32();
            this._fk_B = binStream.ReadNullableInt32();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._isContainmentSet = binStream.ReadBoolean();
            if (this._isContainmentSet) {
                this._Containment = (Zetbox.App.Base.ContainmentSpecification)binStream.ReadNullableInt32();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._fk_Module = binStream.ReadNullableInt32();
            this._Storage = (Zetbox.App.Base.StorageType)binStream.ReadNullableInt32();
            this._Verb = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)this._Containment, xml, "Containment", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)this._Storage, xml, "Storage", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Verb, xml, "Verb", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|Containment":
                // Import must have default value set
                this._Containment = (Zetbox.App.Base.ContainmentSpecification)XmlStreamer.ReadNullableInt32(xml);
                this._isContainmentSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Storage":
                this._Storage = (Zetbox.App.Base.StorageType)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.Base|Verb":
                this._Verb = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
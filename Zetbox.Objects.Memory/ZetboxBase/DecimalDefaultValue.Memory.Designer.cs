// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Sets an decimal property with the configured default value
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("DecimalDefaultValue")]
    public class DecimalDefaultValueMemoryImpl : Zetbox.App.Base.DefaultPropertyValueMemoryImpl, DecimalDefaultValue
    {
        private static readonly Guid _objectClassID = new Guid("bde7fffe-beff-4220-aa20-99a9ebec3c59");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public DecimalDefaultValueMemoryImpl()
            : base(null)
        {
        }

        public DecimalDefaultValueMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public decimal DecimalValue
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _DecimalValue;
                if (OnDecimalValue_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<decimal>(__result);
                    OnDecimalValue_Getter(this, __e);
                    __result = _DecimalValue = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_DecimalValue != value)
                {
                    var __oldValue = _DecimalValue;
                    var __newValue = value;
                    if (OnDecimalValue_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnDecimalValue_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DecimalValue", __oldValue, __newValue);
                    _DecimalValue = __newValue;
                    NotifyPropertyChanged("DecimalValue", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDecimalValue_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnDecimalValue_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("DecimalValue");
                }
            }
        }
        private decimal _DecimalValue;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.DecimalDefaultValue, decimal> OnDecimalValue_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.DecimalDefaultValue, decimal> OnDecimalValue_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.DecimalDefaultValue, decimal> OnDecimalValue_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.DecimalDefaultValue> OnDecimalValue_IsValid;

        /// <summary>
        /// GetDefaultValue
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDefaultValue_DecimalDefaultValue")]
        public override System.Object GetDefaultValue()
        {
            var e = new MethodReturnEventArgs<System.Object>();
            if (OnGetDefaultValue_DecimalDefaultValue != null)
            {
                OnGetDefaultValue_DecimalDefaultValue(this, e);
            }
            else
            {
                e.Result = base.GetDefaultValue();
            }
            return e.Result;
        }
        public static event GetDefaultValue_Handler<DecimalDefaultValue> OnGetDefaultValue_DecimalDefaultValue;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<DecimalDefaultValue> OnGetDefaultValue_DecimalDefaultValue_CanExec;

        [EventBasedMethod("OnGetDefaultValue_DecimalDefaultValue_CanExec")]
        public override bool GetDefaultValueCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDefaultValue_DecimalDefaultValue_CanExec != null)
				{
					OnGetDefaultValue_DecimalDefaultValue_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDefaultValueCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<DecimalDefaultValue> OnGetDefaultValue_DecimalDefaultValue_CanExecReason;

        [EventBasedMethod("OnGetDefaultValue_DecimalDefaultValue_CanExecReason")]
        public override string GetDefaultValueCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDefaultValue_DecimalDefaultValue_CanExecReason != null)
				{
					OnGetDefaultValue_DecimalDefaultValue_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDefaultValueCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(DecimalDefaultValue);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DecimalDefaultValue)obj;
            var otherImpl = (DecimalDefaultValueMemoryImpl)obj;
            var me = (DecimalDefaultValue)this;

            me.DecimalValue = other.DecimalValue;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "DecimalValue":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override System.Threading.Tasks.Task TriggerFetch(string propName)
        {
            switch(propName)
            {
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<DecimalDefaultValue, decimal>(
                        lazyCtx,
                        new Guid("ba39e802-db21-40d3-8978-be947a2baaa9"),
                        "DecimalValue",
                        null,
                        obj => obj.DecimalValue,
                        (obj, val) => obj.DecimalValue = val,
						obj => OnDecimalValue_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_DecimalDefaultValue")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_DecimalDefaultValue != null)
            {
                OnToString_DecimalDefaultValue(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<DecimalDefaultValue> OnToString_DecimalDefaultValue;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_DecimalDefaultValue")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_DecimalDefaultValue != null)
            {
                OnObjectIsValid_DecimalDefaultValue(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<DecimalDefaultValue> OnObjectIsValid_DecimalDefaultValue;

        [EventBasedMethod("OnNotifyPreSave_DecimalDefaultValue")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_DecimalDefaultValue != null) OnNotifyPreSave_DecimalDefaultValue(this);
        }
        public static event ObjectEventHandler<DecimalDefaultValue> OnNotifyPreSave_DecimalDefaultValue;

        [EventBasedMethod("OnNotifyPostSave_DecimalDefaultValue")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_DecimalDefaultValue != null) OnNotifyPostSave_DecimalDefaultValue(this);
        }
        public static event ObjectEventHandler<DecimalDefaultValue> OnNotifyPostSave_DecimalDefaultValue;

        [EventBasedMethod("OnNotifyCreated_DecimalDefaultValue")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("DecimalValue");
            base.NotifyCreated();
            if (OnNotifyCreated_DecimalDefaultValue != null) OnNotifyCreated_DecimalDefaultValue(this);
        }
        public static event ObjectEventHandler<DecimalDefaultValue> OnNotifyCreated_DecimalDefaultValue;

        [EventBasedMethod("OnNotifyDeleting_DecimalDefaultValue")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_DecimalDefaultValue != null) OnNotifyDeleting_DecimalDefaultValue(this);
        }
        public static event ObjectEventHandler<DecimalDefaultValue> OnNotifyDeleting_DecimalDefaultValue;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._DecimalValue);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._DecimalValue = binStream.ReadDecimal();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._DecimalValue, xml, "DecimalValue", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|DecimalValue":
                this._DecimalValue = XmlStreamer.ReadDecimal(xml);
                break;
            }
        }

        #endregion

    }
}
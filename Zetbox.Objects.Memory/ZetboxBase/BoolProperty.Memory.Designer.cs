// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Metadefinition Object for Bool Properties.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("BoolProperty")]
    public class BoolPropertyMemoryImpl : Zetbox.App.Base.ValueTypePropertyMemoryImpl, BoolProperty
    {
        private static readonly Guid _objectClassID = new Guid("3604a7b6-dffb-44ee-8464-5f292d7a0687");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public BoolPropertyMemoryImpl()
            : base(null)
        {
        }

        public BoolPropertyMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FalseIcon
        // fkBackingName=_fk_FalseIcon; fkGuidBackingName=_fk_guid_FalseIcon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.Icon FalseIcon
        {
            get { return FalseIconImpl; }
            set { FalseIconImpl = (Zetbox.App.GUI.IconMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_FalseIconCache;

        private int? _fk_FalseIcon {
            get
            {
                return __fk_FalseIconCache;
            }
            set
            {
                __fk_FalseIconCache = value;
                // Recreate task to clear it's cache
                _triggerFetchFalseIconTask = null;
            }
        }

        /// <summary>ForeignKey Property for FalseIcon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_FalseIcon
		{
			get { return _fk_FalseIcon; }
			set { _fk_FalseIcon = value; }
		}

        private Guid? _fk_guid_FalseIcon = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> _triggerFetchFalseIconTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> TriggerFetchFalseIconAsync()
        {
            if (_triggerFetchFalseIconTask != null) return _triggerFetchFalseIconTask;

            if (_fk_FalseIcon.HasValue)
                _triggerFetchFalseIconTask = Context.FindAsync<Zetbox.App.GUI.Icon>(_fk_FalseIcon.Value);
            else
                _triggerFetchFalseIconTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchFalseIconTask.OnResult(t =>
            {
                if (OnFalseIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(t.Result);
                    OnFalseIcon_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchFalseIconTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.IconMemoryImpl FalseIconImpl
        {
            get
            {
                return (Zetbox.App.GUI.IconMemoryImpl)TriggerFetchFalseIconAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_FalseIcon == null) || (value != null && value.ID == _fk_FalseIcon))
                {
                    SetInitializedProperty("FalseIcon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = FalseIconImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("FalseIcon", __oldValue, __newValue);

                if (OnFalseIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnFalseIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_FalseIcon = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("FalseIcon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnFalseIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnFalseIcon_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FalseIcon
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnFalseIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnFalseIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnFalseIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnFalseIcon_IsValid;

        /// <summary>
        /// A string to describe the &quot;false&quot; value to the user.
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string FalseLabel
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _FalseLabel;
                if (OnFalseLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnFalseLabel_Getter(this, __e);
                    __result = _FalseLabel = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_FalseLabel != value)
                {
                    var __oldValue = _FalseLabel;
                    var __newValue = value;
                    if (OnFalseLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnFalseLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("FalseLabel", __oldValue, __newValue);
                    _FalseLabel = __newValue;
                    NotifyPropertyChanged("FalseLabel", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnFalseLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnFalseLabel_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("FalseLabel");
                }
            }
        }
        private string _FalseLabel;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, string> OnFalseLabel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, string> OnFalseLabel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, string> OnFalseLabel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnFalseLabel_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for NullIcon
        // fkBackingName=_fk_NullIcon; fkGuidBackingName=_fk_guid_NullIcon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.Icon NullIcon
        {
            get { return NullIconImpl; }
            set { NullIconImpl = (Zetbox.App.GUI.IconMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_NullIconCache;

        private int? _fk_NullIcon {
            get
            {
                return __fk_NullIconCache;
            }
            set
            {
                __fk_NullIconCache = value;
                // Recreate task to clear it's cache
                _triggerFetchNullIconTask = null;
            }
        }

        /// <summary>ForeignKey Property for NullIcon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_NullIcon
		{
			get { return _fk_NullIcon; }
			set { _fk_NullIcon = value; }
		}

        private Guid? _fk_guid_NullIcon = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> _triggerFetchNullIconTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> TriggerFetchNullIconAsync()
        {
            if (_triggerFetchNullIconTask != null) return _triggerFetchNullIconTask;

            if (_fk_NullIcon.HasValue)
                _triggerFetchNullIconTask = Context.FindAsync<Zetbox.App.GUI.Icon>(_fk_NullIcon.Value);
            else
                _triggerFetchNullIconTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchNullIconTask.OnResult(t =>
            {
                if (OnNullIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(t.Result);
                    OnNullIcon_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchNullIconTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.IconMemoryImpl NullIconImpl
        {
            get
            {
                return (Zetbox.App.GUI.IconMemoryImpl)TriggerFetchNullIconAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_NullIcon == null) || (value != null && value.ID == _fk_NullIcon))
                {
                    SetInitializedProperty("NullIcon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = NullIconImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("NullIcon", __oldValue, __newValue);

                if (OnNullIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnNullIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_NullIcon = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("NullIcon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnNullIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnNullIcon_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for NullIcon
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnNullIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnNullIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnNullIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnNullIcon_IsValid;

        /// <summary>
        /// A string to describe the &quot;null&quot; value to the user.
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string NullLabel
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _NullLabel;
                if (OnNullLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnNullLabel_Getter(this, __e);
                    __result = _NullLabel = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_NullLabel != value)
                {
                    var __oldValue = _NullLabel;
                    var __newValue = value;
                    if (OnNullLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnNullLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("NullLabel", __oldValue, __newValue);
                    _NullLabel = __newValue;
                    NotifyPropertyChanged("NullLabel", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnNullLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnNullLabel_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("NullLabel");
                }
            }
        }
        private string _NullLabel;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, string> OnNullLabel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, string> OnNullLabel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, string> OnNullLabel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnNullLabel_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TrueIcon
        // fkBackingName=_fk_TrueIcon; fkGuidBackingName=_fk_guid_TrueIcon;
        // referencedInterface=Zetbox.App.GUI.Icon; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.Icon TrueIcon
        {
            get { return TrueIconImpl; }
            set { TrueIconImpl = (Zetbox.App.GUI.IconMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_TrueIconCache;

        private int? _fk_TrueIcon {
            get
            {
                return __fk_TrueIconCache;
            }
            set
            {
                __fk_TrueIconCache = value;
                // Recreate task to clear it's cache
                _triggerFetchTrueIconTask = null;
            }
        }

        /// <summary>ForeignKey Property for TrueIcon's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_TrueIcon
		{
			get { return _fk_TrueIcon; }
			set { _fk_TrueIcon = value; }
		}

        private Guid? _fk_guid_TrueIcon = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> _triggerFetchTrueIconTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon> TriggerFetchTrueIconAsync()
        {
            if (_triggerFetchTrueIconTask != null) return _triggerFetchTrueIconTask;

            if (_fk_TrueIcon.HasValue)
                _triggerFetchTrueIconTask = Context.FindAsync<Zetbox.App.GUI.Icon>(_fk_TrueIcon.Value);
            else
                _triggerFetchTrueIconTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.Icon>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchTrueIconTask.OnResult(t =>
            {
                if (OnTrueIcon_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.Icon>(t.Result);
                    OnTrueIcon_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchTrueIconTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.IconMemoryImpl TrueIconImpl
        {
            get
            {
                return (Zetbox.App.GUI.IconMemoryImpl)TriggerFetchTrueIconAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_TrueIcon == null) || (value != null && value.ID == _fk_TrueIcon))
                {
                    SetInitializedProperty("TrueIcon");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = TrueIconImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TrueIcon", __oldValue, __newValue);

                if (OnTrueIcon_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnTrueIcon_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.IconMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_TrueIcon = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("TrueIcon", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnTrueIcon_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Icon>(__oldValue, __newValue);
                    OnTrueIcon_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TrueIcon
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnTrueIcon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnTrueIcon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, Zetbox.App.GUI.Icon> OnTrueIcon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnTrueIcon_IsValid;

        /// <summary>
        /// A string to describe the &quot;true&quot; value to the user.
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string TrueLabel
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TrueLabel;
                if (OnTrueLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTrueLabel_Getter(this, __e);
                    __result = _TrueLabel = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TrueLabel != value)
                {
                    var __oldValue = _TrueLabel;
                    var __newValue = value;
                    if (OnTrueLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTrueLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TrueLabel", __oldValue, __newValue);
                    _TrueLabel = __newValue;
                    NotifyPropertyChanged("TrueLabel", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTrueLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTrueLabel_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TrueLabel");
                }
            }
        }
        private string _TrueLabel;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.BoolProperty, string> OnTrueLabel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.BoolProperty, string> OnTrueLabel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.BoolProperty, string> OnTrueLabel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.BoolProperty> OnTrueLabel_IsValid;

        /// <summary>
        /// Returns the translated description
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDescription_BoolProperty")]
        public override string GetDescription()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDescription_BoolProperty != null)
            {
                OnGetDescription_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetDescription();
            }
            return e.Result;
        }
        public static event GetDescription_Handler<BoolProperty> OnGetDescription_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetDescription_BoolProperty_CanExec;

        [EventBasedMethod("OnGetDescription_BoolProperty_CanExec")]
        public override bool GetDescriptionCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDescription_BoolProperty_CanExec != null)
				{
					OnGetDescription_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDescriptionCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetDescription_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetDescription_BoolProperty_CanExecReason")]
        public override string GetDescriptionCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDescription_BoolProperty_CanExecReason != null)
				{
					OnGetDescription_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDescriptionCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// The element type for multi-valued properties. The property type string in all other cases.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetElementTypeString_BoolProperty")]
        public override string GetElementTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetElementTypeString_BoolProperty != null)
            {
                OnGetElementTypeString_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetElementTypeString();
            }
            return e.Result;
        }
        public static event GetElementTypeString_Handler<BoolProperty> OnGetElementTypeString_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetElementTypeString_BoolProperty_CanExec;

        [EventBasedMethod("OnGetElementTypeString_BoolProperty_CanExec")]
        public override bool GetElementTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetElementTypeString_BoolProperty_CanExec != null)
				{
					OnGetElementTypeString_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetElementTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetElementTypeString_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetElementTypeString_BoolProperty_CanExecReason")]
        public override string GetElementTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetElementTypeString_BoolProperty_CanExecReason != null)
				{
					OnGetElementTypeString_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetElementTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_BoolProperty")]
        public override string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_BoolProperty != null)
            {
                OnGetLabel_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetLabel();
            }
            return e.Result;
        }
        public static event GetLabel_Handler<BoolProperty> OnGetLabel_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetLabel_BoolProperty_CanExec;

        [EventBasedMethod("OnGetLabel_BoolProperty_CanExec")]
        public override bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_BoolProperty_CanExec != null)
				{
					OnGetLabel_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetLabelCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetLabel_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetLabel_BoolProperty_CanExecReason")]
        public override string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_BoolProperty_CanExecReason != null)
				{
					OnGetLabel_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetLabelCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_BoolProperty")]
        public override string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_BoolProperty != null)
            {
                OnGetName_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetName();
            }
            return e.Result;
        }
        public static event GetName_Handler<BoolProperty> OnGetName_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetName_BoolProperty_CanExec;

        [EventBasedMethod("OnGetName_BoolProperty_CanExec")]
        public override bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_BoolProperty_CanExec != null)
				{
					OnGetName_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetNameCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetName_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetName_BoolProperty_CanExecReason")]
        public override string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_BoolProperty_CanExecReason != null)
				{
					OnGetName_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetNameCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyType_BoolProperty")]
        public override System.Type GetPropertyType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_BoolProperty != null)
            {
                OnGetPropertyType_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyType();
            }
            return e.Result;
        }
        public static event GetPropertyType_Handler<BoolProperty> OnGetPropertyType_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetPropertyType_BoolProperty_CanExec;

        [EventBasedMethod("OnGetPropertyType_BoolProperty_CanExec")]
        public override bool GetPropertyTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyType_BoolProperty_CanExec != null)
				{
					OnGetPropertyType_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetPropertyType_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetPropertyType_BoolProperty_CanExecReason")]
        public override string GetPropertyTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyType_BoolProperty_CanExecReason != null)
				{
					OnGetPropertyType_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyTypeString_BoolProperty")]
        public override string GetPropertyTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_BoolProperty != null)
            {
                OnGetPropertyTypeString_BoolProperty(this, e);
            }
            else
            {
                e.Result = base.GetPropertyTypeString();
            }
            return e.Result;
        }
        public static event GetPropertyTypeString_Handler<BoolProperty> OnGetPropertyTypeString_BoolProperty;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<BoolProperty> OnGetPropertyTypeString_BoolProperty_CanExec;

        [EventBasedMethod("OnGetPropertyTypeString_BoolProperty_CanExec")]
        public override bool GetPropertyTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyTypeString_BoolProperty_CanExec != null)
				{
					OnGetPropertyTypeString_BoolProperty_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<BoolProperty> OnGetPropertyTypeString_BoolProperty_CanExecReason;

        [EventBasedMethod("OnGetPropertyTypeString_BoolProperty_CanExecReason")]
        public override string GetPropertyTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyTypeString_BoolProperty_CanExecReason != null)
				{
					OnGetPropertyTypeString_BoolProperty_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetPropertyTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(BoolProperty);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (BoolProperty)obj;
            var otherImpl = (BoolPropertyMemoryImpl)obj;
            var me = (BoolProperty)this;

            me.FalseLabel = other.FalseLabel;
            me.NullLabel = other.NullLabel;
            me.TrueLabel = other.TrueLabel;
            this._fk_FalseIcon = otherImpl._fk_FalseIcon;
            this._fk_NullIcon = otherImpl._fk_NullIcon;
            this._fk_TrueIcon = otherImpl._fk_TrueIcon;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "FalseIcon":
                    {
                        var __oldValue = _fk_FalseIcon;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("FalseIcon", __oldValue, __newValue);
                        _fk_FalseIcon = __newValue;
                        NotifyPropertyChanged("FalseIcon", __oldValue, __newValue);
                    }
                    break;
                case "NullIcon":
                    {
                        var __oldValue = _fk_NullIcon;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("NullIcon", __oldValue, __newValue);
                        _fk_NullIcon = __newValue;
                        NotifyPropertyChanged("NullIcon", __oldValue, __newValue);
                    }
                    break;
                case "TrueIcon":
                    {
                        var __oldValue = _fk_TrueIcon;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("TrueIcon", __oldValue, __newValue);
                        _fk_TrueIcon = __newValue;
                        NotifyPropertyChanged("TrueIcon", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "FalseIcon":
                case "FalseLabel":
                case "NullIcon":
                case "NullLabel":
                case "TrueIcon":
                case "TrueLabel":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "FalseIcon":
                return TriggerFetchFalseIconAsync();
            case "NullIcon":
                return TriggerFetchNullIconAsync();
            case "TrueIcon":
                return TriggerFetchTrueIconAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_FalseIcon.HasValue)
                FalseIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_FalseIcon.Value);
            else
            if (_fk_FalseIcon.HasValue)
                FalseIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.Find<Zetbox.App.GUI.Icon>(_fk_FalseIcon.Value);
            else
                FalseIconImpl = null;

            if (_fk_guid_NullIcon.HasValue)
                NullIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_NullIcon.Value);
            else
            if (_fk_NullIcon.HasValue)
                NullIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.Find<Zetbox.App.GUI.Icon>(_fk_NullIcon.Value);
            else
                NullIconImpl = null;

            if (_fk_guid_TrueIcon.HasValue)
                TrueIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.Icon>(_fk_guid_TrueIcon.Value);
            else
            if (_fk_TrueIcon.HasValue)
                TrueIconImpl = (Zetbox.App.GUI.IconMemoryImpl)Context.Find<Zetbox.App.GUI.Icon>(_fk_TrueIcon.Value);
            else
                TrueIconImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("784846d0-2eea-4966-b63d-72a0f13b418b"),
                        "FalseIcon",
                        null,
                        obj => obj.FalseIcon,
                        (obj, val) => obj.FalseIcon = val,
						obj => OnFalseIcon_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, string>(
                        lazyCtx,
                        new Guid("09381f52-98e2-4dea-9855-7358e5f9cdae"),
                        "FalseLabel",
                        null,
                        obj => obj.FalseLabel,
                        (obj, val) => obj.FalseLabel = val,
						obj => OnFalseLabel_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("62454172-467d-4c8e-8f1a-a959946d3fdb"),
                        "NullIcon",
                        null,
                        obj => obj.NullIcon,
                        (obj, val) => obj.NullIcon = val,
						obj => OnNullIcon_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, string>(
                        lazyCtx,
                        new Guid("55fae41e-499d-40e3-b386-9839ec8b1d0a"),
                        "NullLabel",
                        null,
                        obj => obj.NullLabel,
                        (obj, val) => obj.NullLabel = val,
						obj => OnNullLabel_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, Zetbox.App.GUI.Icon>(
                        lazyCtx,
                        new Guid("bb8fd69f-437a-45d5-a169-64c9586bfc1d"),
                        "TrueIcon",
                        null,
                        obj => obj.TrueIcon,
                        (obj, val) => obj.TrueIcon = val,
						obj => OnTrueIcon_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<BoolProperty, string>(
                        lazyCtx,
                        new Guid("f7da0495-3d3f-48c5-8fba-95a317ca7949"),
                        "TrueLabel",
                        null,
                        obj => obj.TrueLabel,
                        (obj, val) => obj.TrueLabel = val,
						obj => OnTrueLabel_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_BoolProperty")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_BoolProperty != null)
            {
                OnToString_BoolProperty(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<BoolProperty> OnToString_BoolProperty;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_BoolProperty")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_BoolProperty != null)
            {
                OnObjectIsValid_BoolProperty(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<BoolProperty> OnObjectIsValid_BoolProperty;

        [EventBasedMethod("OnNotifyPreSave_BoolProperty")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_BoolProperty != null) OnNotifyPreSave_BoolProperty(this);
        }
        public static event ObjectEventHandler<BoolProperty> OnNotifyPreSave_BoolProperty;

        [EventBasedMethod("OnNotifyPostSave_BoolProperty")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_BoolProperty != null) OnNotifyPostSave_BoolProperty(this);
        }
        public static event ObjectEventHandler<BoolProperty> OnNotifyPostSave_BoolProperty;

        [EventBasedMethod("OnNotifyCreated_BoolProperty")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("FalseIcon");
            SetNotInitializedProperty("FalseLabel");
            SetNotInitializedProperty("NullIcon");
            SetNotInitializedProperty("NullLabel");
            SetNotInitializedProperty("TrueIcon");
            SetNotInitializedProperty("TrueLabel");
            base.NotifyCreated();
            if (OnNotifyCreated_BoolProperty != null) OnNotifyCreated_BoolProperty(this);
        }
        public static event ObjectEventHandler<BoolProperty> OnNotifyCreated_BoolProperty;

        [EventBasedMethod("OnNotifyDeleting_BoolProperty")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_BoolProperty != null) OnNotifyDeleting_BoolProperty(this);
            FalseIcon = null;
            NullIcon = null;
            TrueIcon = null;
        }
        public static event ObjectEventHandler<BoolProperty> OnNotifyDeleting_BoolProperty;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(FalseIcon != null ? FalseIcon.ID : (int?)null);
            binStream.Write(this._FalseLabel);
            binStream.Write(NullIcon != null ? NullIcon.ID : (int?)null);
            binStream.Write(this._NullLabel);
            binStream.Write(TrueIcon != null ? TrueIcon.ID : (int?)null);
            binStream.Write(this._TrueLabel);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._fk_FalseIcon = binStream.ReadNullableInt32();
            this._FalseLabel = binStream.ReadString();
            this._fk_NullIcon = binStream.ReadNullableInt32();
            this._NullLabel = binStream.ReadString();
            this._fk_TrueIcon = binStream.ReadNullableInt32();
            this._TrueLabel = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(FalseIcon != null ? FalseIcon.ExportGuid : (Guid?)null, xml, "FalseIcon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._FalseLabel, xml, "FalseLabel", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(NullIcon != null ? NullIcon.ExportGuid : (Guid?)null, xml, "NullIcon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._NullLabel, xml, "NullLabel", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(TrueIcon != null ? TrueIcon.ExportGuid : (Guid?)null, xml, "TrueIcon", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._TrueLabel, xml, "TrueLabel", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|FalseIcon":
                this._fk_guid_FalseIcon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|FalseLabel":
                this._FalseLabel = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|NullIcon":
                this._fk_guid_NullIcon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|NullLabel":
                this._NullLabel = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|TrueIcon":
                this._fk_guid_TrueIcon = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|TrueLabel":
                this._TrueLabel = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
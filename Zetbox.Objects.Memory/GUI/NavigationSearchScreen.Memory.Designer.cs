// <autogenerated/>

namespace Zetbox.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// Navigation screen for searching objects
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("NavigationSearchScreen")]
    public class NavigationSearchScreenMemoryImpl : Zetbox.App.GUI.NavigationScreenMemoryImpl, NavigationSearchScreen
    {
        private static readonly Guid _objectClassID = new Guid("cccc4b79-4e6d-449b-8866-c1827c4dcdc1");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public NavigationSearchScreenMemoryImpl()
            : base(null)
        {
        }

        public NavigationSearchScreenMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowAddNew
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowAddNew;
                if (OnAllowAddNew_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowAddNew_Getter(this, __e);
                    __result = _AllowAddNew = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowAddNew != value)
                {
                    var __oldValue = _AllowAddNew;
                    var __newValue = value;
                    if (OnAllowAddNew_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowAddNew_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowAddNew", __oldValue, __newValue);
                    _AllowAddNew = __newValue;
                    NotifyPropertyChanged("AllowAddNew", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowAddNew_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowAddNew_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowAddNew");
                }
            }
        }
        private bool? _AllowAddNew;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowAddNew_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowAddNew_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowDelete
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowDelete;
                if (OnAllowDelete_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowDelete_Getter(this, __e);
                    __result = _AllowDelete = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowDelete != value)
                {
                    var __oldValue = _AllowDelete;
                    var __newValue = value;
                    if (OnAllowDelete_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowDelete_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowDelete", __oldValue, __newValue);
                    _AllowDelete = __newValue;
                    NotifyPropertyChanged("AllowDelete", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowDelete_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowDelete_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowDelete");
                }
            }
        }
        private bool? _AllowDelete;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowDelete_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowDelete_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowExport
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowExport;
                if (OnAllowExport_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowExport_Getter(this, __e);
                    __result = _AllowExport = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowExport != value)
                {
                    var __oldValue = _AllowExport;
                    var __newValue = value;
                    if (OnAllowExport_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowExport_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowExport", __oldValue, __newValue);
                    _AllowExport = __newValue;
                    NotifyPropertyChanged("AllowExport", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowExport_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowExport_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowExport");
                }
            }
        }
        private bool? _AllowExport;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowExport_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowExport_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowExport_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowExport_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowOpen
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowOpen;
                if (OnAllowOpen_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowOpen_Getter(this, __e);
                    __result = _AllowOpen = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowOpen != value)
                {
                    var __oldValue = _AllowOpen;
                    var __newValue = value;
                    if (OnAllowOpen_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowOpen_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowOpen", __oldValue, __newValue);
                    _AllowOpen = __newValue;
                    NotifyPropertyChanged("AllowOpen", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowOpen_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowOpen_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowOpen");
                }
            }
        }
        private bool? _AllowOpen;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowOpen_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowOpen_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowOpen_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowOpen_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowSelectColumns
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowSelectColumns;
                if (OnAllowSelectColumns_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowSelectColumns_Getter(this, __e);
                    __result = _AllowSelectColumns = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowSelectColumns != value)
                {
                    var __oldValue = _AllowSelectColumns;
                    var __newValue = value;
                    if (OnAllowSelectColumns_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowSelectColumns_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowSelectColumns", __oldValue, __newValue);
                    _AllowSelectColumns = __newValue;
                    NotifyPropertyChanged("AllowSelectColumns", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowSelectColumns_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowSelectColumns_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowSelectColumns");
                }
            }
        }
        private bool? _AllowSelectColumns;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowSelectColumns_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowSelectColumns_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? AllowUserFilter
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowUserFilter;
                if (OnAllowUserFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnAllowUserFilter_Getter(this, __e);
                    __result = _AllowUserFilter = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AllowUserFilter != value)
                {
                    var __oldValue = _AllowUserFilter;
                    var __newValue = value;
                    if (OnAllowUserFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowUserFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowUserFilter", __oldValue, __newValue);
                    _AllowUserFilter = __newValue;
                    NotifyPropertyChanged("AllowUserFilter", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowUserFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnAllowUserFilter_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowUserFilter");
                }
            }
        }
        private bool? _AllowUserFilter;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnAllowUserFilter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnAllowUserFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? EnableAutoFilter
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _EnableAutoFilter;
                if (OnEnableAutoFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnEnableAutoFilter_Getter(this, __e);
                    __result = _EnableAutoFilter = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_EnableAutoFilter != value)
                {
                    var __oldValue = _EnableAutoFilter;
                    var __newValue = value;
                    if (OnEnableAutoFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnEnableAutoFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("EnableAutoFilter", __oldValue, __newValue);
                    _EnableAutoFilter = __newValue;
                    NotifyPropertyChanged("EnableAutoFilter", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnEnableAutoFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnEnableAutoFilter_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("EnableAutoFilter");
                }
            }
        }
        private bool? _EnableAutoFilter;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnEnableAutoFilter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnEnableAutoFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string InitialSort
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _InitialSort;
                if (OnInitialSort_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnInitialSort_Getter(this, __e);
                    __result = _InitialSort = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_InitialSort != value)
                {
                    var __oldValue = _InitialSort;
                    var __newValue = value;
                    if (OnInitialSort_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnInitialSort_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("InitialSort", __oldValue, __newValue);
                    _InitialSort = __newValue;
                    NotifyPropertyChanged("InitialSort", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnInitialSort_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnInitialSort_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("InitialSort");
                }
            }
        }
        private string _InitialSort;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, string> OnInitialSort_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, string> OnInitialSort_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, string> OnInitialSort_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnInitialSort_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.GUI.ListSortDirection? InitialSortDirection
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _InitialSortDirection;
                if (OnInitialSortDirection_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.GUI.ListSortDirection?>(__result);
                    OnInitialSortDirection_Getter(this, __e);
                    __result = _InitialSortDirection = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_InitialSortDirection != value)
                {
                    var __oldValue = _InitialSortDirection;
                    var __newValue = value;
                    if (OnInitialSortDirection_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ListSortDirection?>(__oldValue, __newValue);
                        OnInitialSortDirection_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("InitialSortDirection", __oldValue, __newValue);
                    _InitialSortDirection = __newValue;
                    NotifyPropertyChanged("InitialSortDirection", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnInitialSortDirection_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ListSortDirection?>(__oldValue, __newValue);
                        OnInitialSortDirection_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("InitialSortDirection");
                }
            }
        }
        private Zetbox.App.GUI.ListSortDirection? _InitialSortDirection;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ListSortDirection?> OnInitialSortDirection_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ListSortDirection?> OnInitialSortDirection_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ListSortDirection?> OnInitialSortDirection_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnInitialSortDirection_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? IsEditable
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsEditable;
                if (OnIsEditable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsEditable_Getter(this, __e);
                    __result = _IsEditable = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsEditable != value)
                {
                    var __oldValue = _IsEditable;
                    var __newValue = value;
                    if (OnIsEditable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsEditable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsEditable", __oldValue, __newValue);
                    _IsEditable = __newValue;
                    NotifyPropertyChanged("IsEditable", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsEditable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsEditable_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsEditable");
                }
            }
        }
        private bool? _IsEditable;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsEditable_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnIsEditable_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? IsMultiselect
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsMultiselect;
                if (OnIsMultiselect_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnIsMultiselect_Getter(this, __e);
                    __result = _IsMultiselect = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_IsMultiselect != value)
                {
                    var __oldValue = _IsMultiselect;
                    var __newValue = value;
                    if (OnIsMultiselect_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsMultiselect_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsMultiselect", __oldValue, __newValue);
                    _IsMultiselect = __newValue;
                    NotifyPropertyChanged("IsMultiselect", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsMultiselect_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnIsMultiselect_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsMultiselect");
                }
            }
        }
        private bool? _IsMultiselect;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnIsMultiselect_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnIsMultiselect_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedEditorKind
        // fkBackingName=_fk_RequestedEditorKind; fkGuidBackingName=_fk_guid_RequestedEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind RequestedEditorKind
        {
            get { return RequestedEditorKindImpl; }
            set { RequestedEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_RequestedEditorKindCache;

        private int? _fk_RequestedEditorKind {
            get
            {
                return __fk_RequestedEditorKindCache;
            }
            set
            {
                __fk_RequestedEditorKindCache = value;
                // Recreate task to clear it's cache
                _triggerFetchRequestedEditorKindTask = null;
            }
        }

        /// <summary>ForeignKey Property for RequestedEditorKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RequestedEditorKind
		{
			get { return _fk_RequestedEditorKind; }
			set { _fk_RequestedEditorKind = value; }
		}

        private Guid? _fk_guid_RequestedEditorKind = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> _triggerFetchRequestedEditorKindTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> TriggerFetchRequestedEditorKindAsync()
        {
            if (_triggerFetchRequestedEditorKindTask != null) return _triggerFetchRequestedEditorKindTask;

            if (_fk_RequestedEditorKind.HasValue)
                _triggerFetchRequestedEditorKindTask = Context.FindAsync<Zetbox.App.GUI.ControlKind>(_fk_RequestedEditorKind.Value);
            else
                _triggerFetchRequestedEditorKindTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchRequestedEditorKindTask.OnResult(t =>
            {
                if (OnRequestedEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(t.Result);
                    OnRequestedEditorKind_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchRequestedEditorKindTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl RequestedEditorKindImpl
        {
            get
            {
                return (Zetbox.App.GUI.ControlKindMemoryImpl)TriggerFetchRequestedEditorKindAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_RequestedEditorKind == null) || (value != null && value.ID == _fk_RequestedEditorKind))
                {
                    SetInitializedProperty("RequestedEditorKind");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = RequestedEditorKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedEditorKind", __oldValue, __newValue);

                if (OnRequestedEditorKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_RequestedEditorKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnRequestedEditorKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedEditorKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnRequestedEditorKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedWorkspaceKind
        // fkBackingName=_fk_RequestedWorkspaceKind; fkGuidBackingName=_fk_guid_RequestedWorkspaceKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.GUI.ControlKind RequestedWorkspaceKind
        {
            get { return RequestedWorkspaceKindImpl; }
            set { RequestedWorkspaceKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_RequestedWorkspaceKindCache;

        private int? _fk_RequestedWorkspaceKind {
            get
            {
                return __fk_RequestedWorkspaceKindCache;
            }
            set
            {
                __fk_RequestedWorkspaceKindCache = value;
                // Recreate task to clear it's cache
                _triggerFetchRequestedWorkspaceKindTask = null;
            }
        }

        /// <summary>ForeignKey Property for RequestedWorkspaceKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RequestedWorkspaceKind
		{
			get { return _fk_RequestedWorkspaceKind; }
			set { _fk_RequestedWorkspaceKind = value; }
		}

        private Guid? _fk_guid_RequestedWorkspaceKind = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> _triggerFetchRequestedWorkspaceKindTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind> TriggerFetchRequestedWorkspaceKindAsync()
        {
            if (_triggerFetchRequestedWorkspaceKindTask != null) return _triggerFetchRequestedWorkspaceKindTask;

            if (_fk_RequestedWorkspaceKind.HasValue)
                _triggerFetchRequestedWorkspaceKindTask = Context.FindAsync<Zetbox.App.GUI.ControlKind>(_fk_RequestedWorkspaceKind.Value);
            else
                _triggerFetchRequestedWorkspaceKindTask = new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchRequestedWorkspaceKindTask.OnResult(t =>
            {
                if (OnRequestedWorkspaceKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(t.Result);
                    OnRequestedWorkspaceKind_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchRequestedWorkspaceKindTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.GUI.ControlKindMemoryImpl RequestedWorkspaceKindImpl
        {
            get
            {
                return (Zetbox.App.GUI.ControlKindMemoryImpl)TriggerFetchRequestedWorkspaceKindAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_RequestedWorkspaceKind == null) || (value != null && value.ID == _fk_RequestedWorkspaceKind))
                {
                    SetInitializedProperty("RequestedWorkspaceKind");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = RequestedWorkspaceKindImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedWorkspaceKind", __oldValue, __newValue);

                if (OnRequestedWorkspaceKind_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedWorkspaceKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_RequestedWorkspaceKind = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedWorkspaceKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnRequestedWorkspaceKind_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedWorkspaceKind_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedWorkspaceKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedWorkspaceKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedWorkspaceKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.ControlKind> OnRequestedWorkspaceKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnRequestedWorkspaceKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? RespectRequiredFilter
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _RespectRequiredFilter;
                if (OnRespectRequiredFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnRespectRequiredFilter_Getter(this, __e);
                    __result = _RespectRequiredFilter = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_RespectRequiredFilter != value)
                {
                    var __oldValue = _RespectRequiredFilter;
                    var __newValue = value;
                    if (OnRespectRequiredFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnRespectRequiredFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("RespectRequiredFilter", __oldValue, __newValue);
                    _RespectRequiredFilter = __newValue;
                    NotifyPropertyChanged("RespectRequiredFilter", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnRespectRequiredFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnRespectRequiredFilter_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("RespectRequiredFilter");
                }
            }
        }
        private bool? _RespectRequiredFilter;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnRespectRequiredFilter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnRespectRequiredFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? ShowCommands
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowCommands;
                if (OnShowCommands_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowCommands_Getter(this, __e);
                    __result = _ShowCommands = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowCommands != value)
                {
                    var __oldValue = _ShowCommands;
                    var __newValue = value;
                    if (OnShowCommands_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowCommands_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowCommands", __oldValue, __newValue);
                    _ShowCommands = __newValue;
                    NotifyPropertyChanged("ShowCommands", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowCommands_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowCommands_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowCommands");
                }
            }
        }
        private bool? _ShowCommands;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowCommands_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowCommands_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowCommands_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnShowCommands_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? ShowFilter
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowFilter;
                if (OnShowFilter_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowFilter_Getter(this, __e);
                    __result = _ShowFilter = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowFilter != value)
                {
                    var __oldValue = _ShowFilter;
                    var __newValue = value;
                    if (OnShowFilter_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowFilter_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowFilter", __oldValue, __newValue);
                    _ShowFilter = __newValue;
                    NotifyPropertyChanged("ShowFilter", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowFilter_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowFilter_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowFilter");
                }
            }
        }
        private bool? _ShowFilter;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowFilter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnShowFilter_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? ShowMasterDetail
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ShowMasterDetail;
                if (OnShowMasterDetail_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnShowMasterDetail_Getter(this, __e);
                    __result = _ShowMasterDetail = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ShowMasterDetail != value)
                {
                    var __oldValue = _ShowMasterDetail;
                    var __newValue = value;
                    if (OnShowMasterDetail_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowMasterDetail_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ShowMasterDetail", __oldValue, __newValue);
                    _ShowMasterDetail = __newValue;
                    NotifyPropertyChanged("ShowMasterDetail", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnShowMasterDetail_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnShowMasterDetail_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ShowMasterDetail");
                }
            }
        }
        private bool? _ShowMasterDetail;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, bool?> OnShowMasterDetail_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnShowMasterDetail_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
        // fkBackingName=_fk_Type; fkGuidBackingName=_fk_guid_Type;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.ObjectClass Type
        {
            get { return TypeImpl; }
            set { TypeImpl = (Zetbox.App.Base.ObjectClassMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_TypeCache;

        private int? _fk_Type {
            get
            {
                return __fk_TypeCache;
            }
            set
            {
                __fk_TypeCache = value;
                // Recreate task to clear it's cache
                _triggerFetchTypeTask = null;
            }
        }

        /// <summary>ForeignKey Property for Type's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Type
		{
			get { return _fk_Type; }
			set { _fk_Type = value; }
		}

        private Guid? _fk_guid_Type = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass> _triggerFetchTypeTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass> TriggerFetchTypeAsync()
        {
            if (_triggerFetchTypeTask != null) return _triggerFetchTypeTask;

            if (_fk_Type.HasValue)
                _triggerFetchTypeTask = Context.FindAsync<Zetbox.App.Base.ObjectClass>(_fk_Type.Value);
            else
                _triggerFetchTypeTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchTypeTask.OnResult(t =>
            {
                if (OnType_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(t.Result);
                    OnType_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchTypeTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.ObjectClassMemoryImpl TypeImpl
        {
            get
            {
                return (Zetbox.App.Base.ObjectClassMemoryImpl)TriggerFetchTypeAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Type == null) || (value != null && value.ID == _fk_Type))
                {
                    SetInitializedProperty("Type");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = TypeImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Type", __oldValue, __newValue);

                if (OnType_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Type = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Type", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnType_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnType_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Type
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.Base.ObjectClass> OnType_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.Base.ObjectClass> OnType_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.Base.ObjectClass> OnType_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnType_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.GUI.InstanceListViewMethod? ViewMethod
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ViewMethod;
                if (OnViewMethod_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.GUI.InstanceListViewMethod?>(__result);
                    OnViewMethod_Getter(this, __e);
                    __result = _ViewMethod = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ViewMethod != value)
                {
                    var __oldValue = _ViewMethod;
                    var __newValue = value;
                    if (OnViewMethod_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.InstanceListViewMethod?>(__oldValue, __newValue);
                        OnViewMethod_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ViewMethod", __oldValue, __newValue);
                    _ViewMethod = __newValue;
                    NotifyPropertyChanged("ViewMethod", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnViewMethod_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.InstanceListViewMethod?>(__oldValue, __newValue);
                        OnViewMethod_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ViewMethod");
                }
            }
        }
        private Zetbox.App.GUI.InstanceListViewMethod? _ViewMethod;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.InstanceListViewMethod?> OnViewMethod_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.InstanceListViewMethod?> OnViewMethod_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.NavigationSearchScreen, Zetbox.App.GUI.InstanceListViewMethod?> OnViewMethod_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.NavigationSearchScreen> OnViewMethod_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen")]
        public override System.Object GetDefaultViewModel(Zetbox.API.IZetboxContext dataCtx, System.Object parent)
        {
            var e = new MethodReturnEventArgs<System.Object>();
            if (OnGetDefaultViewModel_NavigationSearchScreen != null)
            {
                OnGetDefaultViewModel_NavigationSearchScreen(this, e, dataCtx, parent);
            }
            else
            {
                e.Result = base.GetDefaultViewModel(dataCtx, parent);
            }
            return e.Result;
        }
        public static event GetDefaultViewModel_Handler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen_CanExec;

        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen_CanExec")]
        public override bool GetDefaultViewModelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDefaultViewModel_NavigationSearchScreen_CanExec != null)
				{
					OnGetDefaultViewModel_NavigationSearchScreen_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDefaultViewModelCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<NavigationSearchScreen> OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason;

        [EventBasedMethod("OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason")]
        public override string GetDefaultViewModelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason != null)
				{
					OnGetDefaultViewModel_NavigationSearchScreen_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDefaultViewModelCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationSearchScreen);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationSearchScreen)obj;
            var otherImpl = (NavigationSearchScreenMemoryImpl)obj;
            var me = (NavigationSearchScreen)this;

            me.AllowAddNew = other.AllowAddNew;
            me.AllowDelete = other.AllowDelete;
            me.AllowExport = other.AllowExport;
            me.AllowOpen = other.AllowOpen;
            me.AllowSelectColumns = other.AllowSelectColumns;
            me.AllowUserFilter = other.AllowUserFilter;
            me.EnableAutoFilter = other.EnableAutoFilter;
            me.InitialSort = other.InitialSort;
            me.InitialSortDirection = other.InitialSortDirection;
            me.IsEditable = other.IsEditable;
            me.IsMultiselect = other.IsMultiselect;
            me.RespectRequiredFilter = other.RespectRequiredFilter;
            me.ShowCommands = other.ShowCommands;
            me.ShowFilter = other.ShowFilter;
            me.ShowMasterDetail = other.ShowMasterDetail;
            me.ViewMethod = other.ViewMethod;
            this._fk_RequestedEditorKind = otherImpl._fk_RequestedEditorKind;
            this._fk_RequestedWorkspaceKind = otherImpl._fk_RequestedWorkspaceKind;
            this._fk_Type = otherImpl._fk_Type;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "RequestedEditorKind":
                    {
                        var __oldValue = _fk_RequestedEditorKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("RequestedEditorKind", __oldValue, __newValue);
                        _fk_RequestedEditorKind = __newValue;
                        NotifyPropertyChanged("RequestedEditorKind", __oldValue, __newValue);
                    }
                    break;
                case "RequestedWorkspaceKind":
                    {
                        var __oldValue = _fk_RequestedWorkspaceKind;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("RequestedWorkspaceKind", __oldValue, __newValue);
                        _fk_RequestedWorkspaceKind = __newValue;
                        NotifyPropertyChanged("RequestedWorkspaceKind", __oldValue, __newValue);
                    }
                    break;
                case "Type":
                    {
                        var __oldValue = _fk_Type;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Type", __oldValue, __newValue);
                        _fk_Type = __newValue;
                        NotifyPropertyChanged("Type", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "AllowAddNew":
                case "AllowDelete":
                case "AllowExport":
                case "AllowOpen":
                case "AllowSelectColumns":
                case "AllowUserFilter":
                case "EnableAutoFilter":
                case "InitialSort":
                case "InitialSortDirection":
                case "IsEditable":
                case "IsMultiselect":
                case "RequestedEditorKind":
                case "RequestedWorkspaceKind":
                case "RespectRequiredFilter":
                case "ShowCommands":
                case "ShowFilter":
                case "ShowMasterDetail":
                case "Type":
                case "ViewMethod":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "RequestedEditorKind":
                return TriggerFetchRequestedEditorKindAsync();
            case "RequestedWorkspaceKind":
                return TriggerFetchRequestedWorkspaceKindAsync();
            case "Type":
                return TriggerFetchTypeAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_RequestedEditorKind.HasValue)
                RequestedEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_RequestedEditorKind.Value);
            else
            if (_fk_RequestedEditorKind.HasValue)
                RequestedEditorKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_RequestedEditorKind.Value);
            else
                RequestedEditorKindImpl = null;

            if (_fk_guid_RequestedWorkspaceKind.HasValue)
                RequestedWorkspaceKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_RequestedWorkspaceKind.Value);
            else
            if (_fk_RequestedWorkspaceKind.HasValue)
                RequestedWorkspaceKindImpl = (Zetbox.App.GUI.ControlKindMemoryImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_RequestedWorkspaceKind.Value);
            else
                RequestedWorkspaceKindImpl = null;

            if (_fk_guid_Type.HasValue)
                TypeImpl = (Zetbox.App.Base.ObjectClassMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_Type.Value);
            else
            if (_fk_Type.HasValue)
                TypeImpl = (Zetbox.App.Base.ObjectClassMemoryImpl)Context.Find<Zetbox.App.Base.ObjectClass>(_fk_Type.Value);
            else
                TypeImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("e21de4ba-0ee2-446c-9758-3ca35c2f1845"),
                        "AllowAddNew",
                        null,
                        obj => obj.AllowAddNew,
                        (obj, val) => obj.AllowAddNew = val,
						obj => OnAllowAddNew_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("965b1750-5b17-458f-8824-b42df92d4635"),
                        "AllowDelete",
                        null,
                        obj => obj.AllowDelete,
                        (obj, val) => obj.AllowDelete = val,
						obj => OnAllowDelete_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("b7d18552-aa83-4968-97b3-ce34ff79753f"),
                        "AllowExport",
                        null,
                        obj => obj.AllowExport,
                        (obj, val) => obj.AllowExport = val,
						obj => OnAllowExport_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("84a66c05-9f95-475e-aa9d-a341a0de0ba6"),
                        "AllowOpen",
                        null,
                        obj => obj.AllowOpen,
                        (obj, val) => obj.AllowOpen = val,
						obj => OnAllowOpen_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("372dd9f8-3a34-473d-9c1b-b0712623abe0"),
                        "AllowSelectColumns",
                        null,
                        obj => obj.AllowSelectColumns,
                        (obj, val) => obj.AllowSelectColumns = val,
						obj => OnAllowSelectColumns_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("54ddf503-c60a-4cc8-a8cc-80ab682dfc02"),
                        "AllowUserFilter",
                        null,
                        obj => obj.AllowUserFilter,
                        (obj, val) => obj.AllowUserFilter = val,
						obj => OnAllowUserFilter_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("720bda5a-7bfd-4594-8571-a6ebeea074e7"),
                        "EnableAutoFilter",
                        null,
                        obj => obj.EnableAutoFilter,
                        (obj, val) => obj.EnableAutoFilter = val,
						obj => OnEnableAutoFilter_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, string>(
                        lazyCtx,
                        new Guid("632994f1-9e97-4045-b2e8-92aa12ac80be"),
                        "InitialSort",
                        null,
                        obj => obj.InitialSort,
                        (obj, val) => obj.InitialSort = val,
						obj => OnInitialSort_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, Zetbox.App.GUI.ListSortDirection?>(
                        lazyCtx,
                        new Guid("b43b05fe-e036-44b1-a8a6-43f4826df116"),
                        "InitialSortDirection",
                        null,
                        obj => obj.InitialSortDirection,
                        (obj, val) => obj.InitialSortDirection = val,
						obj => OnInitialSortDirection_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("0e71d44f-2373-4cfe-b902-c49373761cbe"),
                        "IsEditable",
                        null,
                        obj => obj.IsEditable,
                        (obj, val) => obj.IsEditable = val,
						obj => OnIsEditable_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("6e27c254-f0b6-45df-97b3-053636864df8"),
                        "IsMultiselect",
                        null,
                        obj => obj.IsMultiselect,
                        (obj, val) => obj.IsMultiselect = val,
						obj => OnIsMultiselect_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("80987e44-841a-4d56-88d2-92c28efb70a1"),
                        "RequestedEditorKind",
                        null,
                        obj => obj.RequestedEditorKind,
                        (obj, val) => obj.RequestedEditorKind = val,
						obj => OnRequestedEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("e0a94b30-5225-45e6-9dfc-c88dbf0648f5"),
                        "RequestedWorkspaceKind",
                        null,
                        obj => obj.RequestedWorkspaceKind,
                        (obj, val) => obj.RequestedWorkspaceKind = val,
						obj => OnRequestedWorkspaceKind_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("9323c1cf-f8d6-4b29-b854-41ceb509b57e"),
                        "RespectRequiredFilter",
                        null,
                        obj => obj.RespectRequiredFilter,
                        (obj, val) => obj.RespectRequiredFilter = val,
						obj => OnRespectRequiredFilter_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("21b4324b-110f-48f2-a5d0-a3645d45604a"),
                        "ShowCommands",
                        null,
                        obj => obj.ShowCommands,
                        (obj, val) => obj.ShowCommands = val,
						obj => OnShowCommands_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("055fd120-c058-436b-9f9e-e6a2a0fec2e5"),
                        "ShowFilter",
                        null,
                        obj => obj.ShowFilter,
                        (obj, val) => obj.ShowFilter = val,
						obj => OnShowFilter_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, bool?>(
                        lazyCtx,
                        new Guid("c7978c7d-92cc-46a4-a8e8-bd9c24597dda"),
                        "ShowMasterDetail",
                        null,
                        obj => obj.ShowMasterDetail,
                        (obj, val) => obj.ShowMasterDetail = val,
						obj => OnShowMasterDetail_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("0bbea63f-f609-4fc2-848e-7464bef87fb4"),
                        "Type",
                        null,
                        obj => obj.Type,
                        (obj, val) => obj.Type = val,
						obj => OnType_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<NavigationSearchScreen, Zetbox.App.GUI.InstanceListViewMethod?>(
                        lazyCtx,
                        new Guid("3b671e20-eb7e-4f24-b183-19bdf2666651"),
                        "ViewMethod",
                        null,
                        obj => obj.ViewMethod,
                        (obj, val) => obj.ViewMethod = val,
						obj => OnViewMethod_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_NavigationSearchScreen")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_NavigationSearchScreen != null)
            {
                OnToString_NavigationSearchScreen(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<NavigationSearchScreen> OnToString_NavigationSearchScreen;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_NavigationSearchScreen")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_NavigationSearchScreen != null)
            {
                OnObjectIsValid_NavigationSearchScreen(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<NavigationSearchScreen> OnObjectIsValid_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyPreSave_NavigationSearchScreen")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_NavigationSearchScreen != null) OnNotifyPreSave_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyPreSave_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyPostSave_NavigationSearchScreen")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_NavigationSearchScreen != null) OnNotifyPostSave_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyPostSave_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyCreated_NavigationSearchScreen")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("AllowAddNew");
            SetNotInitializedProperty("AllowDelete");
            SetNotInitializedProperty("AllowExport");
            SetNotInitializedProperty("AllowOpen");
            SetNotInitializedProperty("AllowSelectColumns");
            SetNotInitializedProperty("AllowUserFilter");
            SetNotInitializedProperty("EnableAutoFilter");
            SetNotInitializedProperty("InitialSort");
            SetNotInitializedProperty("InitialSortDirection");
            SetNotInitializedProperty("IsEditable");
            SetNotInitializedProperty("IsMultiselect");
            SetNotInitializedProperty("RequestedEditorKind");
            SetNotInitializedProperty("RequestedWorkspaceKind");
            SetNotInitializedProperty("RespectRequiredFilter");
            SetNotInitializedProperty("ShowCommands");
            SetNotInitializedProperty("ShowFilter");
            SetNotInitializedProperty("ShowMasterDetail");
            SetNotInitializedProperty("Type");
            SetNotInitializedProperty("ViewMethod");
            base.NotifyCreated();
            if (OnNotifyCreated_NavigationSearchScreen != null) OnNotifyCreated_NavigationSearchScreen(this);
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyCreated_NavigationSearchScreen;

        [EventBasedMethod("OnNotifyDeleting_NavigationSearchScreen")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_NavigationSearchScreen != null) OnNotifyDeleting_NavigationSearchScreen(this);
            RequestedEditorKind = null;
            RequestedWorkspaceKind = null;
            Type = null;
        }
        public static event ObjectEventHandler<NavigationSearchScreen> OnNotifyDeleting_NavigationSearchScreen;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._AllowAddNew);
            binStream.Write(this._AllowDelete);
            binStream.Write(this._AllowExport);
            binStream.Write(this._AllowOpen);
            binStream.Write(this._AllowSelectColumns);
            binStream.Write(this._AllowUserFilter);
            binStream.Write(this._EnableAutoFilter);
            binStream.Write(this._InitialSort);
            binStream.Write((int?)this._InitialSortDirection);
            binStream.Write(this._IsEditable);
            binStream.Write(this._IsMultiselect);
            binStream.Write(RequestedEditorKind != null ? RequestedEditorKind.ID : (int?)null);
            binStream.Write(RequestedWorkspaceKind != null ? RequestedWorkspaceKind.ID : (int?)null);
            binStream.Write(this._RespectRequiredFilter);
            binStream.Write(this._ShowCommands);
            binStream.Write(this._ShowFilter);
            binStream.Write(this._ShowMasterDetail);
            binStream.Write(Type != null ? Type.ID : (int?)null);
            binStream.Write((int?)this._ViewMethod);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._AllowAddNew = binStream.ReadNullableBoolean();
            this._AllowDelete = binStream.ReadNullableBoolean();
            this._AllowExport = binStream.ReadNullableBoolean();
            this._AllowOpen = binStream.ReadNullableBoolean();
            this._AllowSelectColumns = binStream.ReadNullableBoolean();
            this._AllowUserFilter = binStream.ReadNullableBoolean();
            this._EnableAutoFilter = binStream.ReadNullableBoolean();
            this._InitialSort = binStream.ReadString();
            this._InitialSortDirection = (Zetbox.App.GUI.ListSortDirection?)binStream.ReadNullableInt32();
            this._IsEditable = binStream.ReadNullableBoolean();
            this._IsMultiselect = binStream.ReadNullableBoolean();
            this._fk_RequestedEditorKind = binStream.ReadNullableInt32();
            this._fk_RequestedWorkspaceKind = binStream.ReadNullableInt32();
            this._RespectRequiredFilter = binStream.ReadNullableBoolean();
            this._ShowCommands = binStream.ReadNullableBoolean();
            this._ShowFilter = binStream.ReadNullableBoolean();
            this._ShowMasterDetail = binStream.ReadNullableBoolean();
            this._fk_Type = binStream.ReadNullableInt32();
            this._ViewMethod = (Zetbox.App.GUI.InstanceListViewMethod?)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowAddNew, xml, "AllowAddNew", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowDelete, xml, "AllowDelete", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowExport, xml, "AllowExport", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowOpen, xml, "AllowOpen", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowSelectColumns, xml, "AllowSelectColumns", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._AllowUserFilter, xml, "AllowUserFilter", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._EnableAutoFilter, xml, "EnableAutoFilter", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._InitialSort, xml, "InitialSort", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream((int?)this._InitialSortDirection, xml, "InitialSortDirection", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._IsEditable, xml, "IsEditable", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._IsMultiselect, xml, "IsMultiselect", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(RequestedEditorKind != null ? RequestedEditorKind.ExportGuid : (Guid?)null, xml, "RequestedEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(RequestedWorkspaceKind != null ? RequestedWorkspaceKind.ExportGuid : (Guid?)null, xml, "RequestedWorkspaceKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._RespectRequiredFilter, xml, "RespectRequiredFilter", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowCommands, xml, "ShowCommands", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowFilter, xml, "ShowFilter", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ShowMasterDetail, xml, "ShowMasterDetail", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(Type != null ? Type.ExportGuid : (Guid?)null, xml, "Type", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream((int?)this._ViewMethod, xml, "ViewMethod", "Zetbox.App.GUI");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|AllowAddNew":
                this._AllowAddNew = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|AllowDelete":
                this._AllowDelete = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|AllowExport":
                this._AllowExport = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|AllowOpen":
                this._AllowOpen = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|AllowSelectColumns":
                this._AllowSelectColumns = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|AllowUserFilter":
                this._AllowUserFilter = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|EnableAutoFilter":
                this._EnableAutoFilter = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|InitialSort":
                this._InitialSort = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|InitialSortDirection":
                this._InitialSortDirection = (Zetbox.App.GUI.ListSortDirection?)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.GUI|IsEditable":
                this._IsEditable = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|IsMultiselect":
                this._IsMultiselect = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|RequestedEditorKind":
                this._fk_guid_RequestedEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|RequestedWorkspaceKind":
                this._fk_guid_RequestedWorkspaceKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|RespectRequiredFilter":
                this._RespectRequiredFilter = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|ShowCommands":
                this._ShowCommands = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|ShowFilter":
                this._ShowFilter = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|ShowMasterDetail":
                this._ShowMasterDetail = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.GUI|Type":
                this._fk_guid_Type = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ViewMethod":
                this._ViewMethod = (Zetbox.App.GUI.InstanceListViewMethod?)XmlStreamer.ReadNullableInt32(xml);
               break;
            }
        }

        #endregion

    }
}
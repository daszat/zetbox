// <autogenerated/>

namespace at.dasz.DocumentManagement
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// A file. Can be readonly, can have revisions.
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("File")]
    public class FileMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, File, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("8043ccd8-6ff1-4b45-b04b-e0a0f19ce1b6");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public FileMemoryImpl()
            : base(null)
        {
            AttachedToImpl = new Zetbox.App.Base.AnyReferenceMemoryImpl(null, this, "AttachedTo");
        }

        public FileMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
            AttachedToImpl = new Zetbox.App.Base.AnyReferenceMemoryImpl(lazyCtx, this, "AttachedTo");
        }

        /// <summary>
        /// Primary attached to
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.AnyReference AttachedTo
        {
            get { return AttachedToImpl; }
            set { AttachedToImpl = (Zetbox.App.Base.AnyReferenceMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for AttachedTo</summary>
        private Zetbox.App.Base.AnyReferenceMemoryImpl _AttachedTo;

        /// <summary>backing property for AttachedTo, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.AnyReferenceMemoryImpl AttachedToImpl
        {
            get
            {
                return _AttachedTo;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_AttachedTo, value))
                {
                    var __oldValue = _AttachedTo;
                    var __newValue = value;

                    NotifyPropertyChanging("AttachedTo", __oldValue, __newValue);

                    if (_AttachedTo != null)
                    {
                        _AttachedTo.DetachFromObject(this, "AttachedTo");
                    }
                    __newValue = (Zetbox.App.Base.AnyReferenceMemoryImpl)__newValue.Clone();
                    _AttachedTo = __newValue;
                    _AttachedTo.AttachToObject(this, "AttachedTo");

                    NotifyPropertyChanged("AttachedTo", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnAttachedTo_IsValid;

        /// <summary>
        /// Current File Content
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Blob
        // fkBackingName=_fk_Blob; fkGuidBackingName=_fk_guid_Blob;
        // referencedInterface=Zetbox.App.Base.Blob; moduleNamespace=at.dasz.DocumentManagement;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Blob Blob
        {
            get { return BlobImpl; }
            set { BlobImpl = (Zetbox.App.Base.BlobMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_BlobCache;

        private int? _fk_Blob {
            get
            {
                return __fk_BlobCache;
            }
            set
            {
                __fk_BlobCache = value;
                // Recreate task to clear it's cache
                _triggerFetchBlobTask = null;
            }
        }

        /// <summary>ForeignKey Property for Blob's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Blob
		{
			get { return _fk_Blob; }
			set { _fk_Blob = value; }
		}

        private Guid? _fk_guid_Blob = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Blob> _triggerFetchBlobTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Blob> TriggerFetchBlobAsync()
        {
            if (_triggerFetchBlobTask != null) return _triggerFetchBlobTask;

            if (_fk_Blob.HasValue)
                _triggerFetchBlobTask = Context.FindAsync<Zetbox.App.Base.Blob>(_fk_Blob.Value);
            else
                _triggerFetchBlobTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Blob>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchBlobTask.OnResult(t =>
            {
                if (OnBlob_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Blob>(t.Result);
                    OnBlob_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchBlobTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.BlobMemoryImpl BlobImpl
        {
            get
            {
                return (Zetbox.App.Base.BlobMemoryImpl)TriggerFetchBlobAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Blob == null) || (value != null && value.ID == _fk_Blob))
                {
                    SetInitializedProperty("Blob");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = BlobImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Blob", __oldValue, __newValue);

                if (OnBlob_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Blob>(__oldValue, __newValue);
                    OnBlob_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.BlobMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Blob = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Blob", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnBlob_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Blob>(__oldValue, __newValue);
                    OnBlob_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Blob
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Blob> OnBlob_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Blob> OnBlob_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Blob> OnBlob_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnBlob_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=at.dasz.DocumentManagement;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("c144678d-632d-4a83-8041-280d674f4453"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'File.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=at.dasz.DocumentManagement;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("e1892507-375b-4b52-ab20-16095dfc3514"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'File.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnCreatedOn_IsValid;

        /// <summary>
        /// A searchable excerpt
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Excerpt
        // fkBackingName=_fk_Excerpt; fkGuidBackingName=_fk_guid_Excerpt;
        // referencedInterface=at.dasz.DocumentManagement.Excerpt; moduleNamespace=at.dasz.DocumentManagement;
        // inverse Navigator=File; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public at.dasz.DocumentManagement.Excerpt Excerpt
        {
            get { return ExcerptImpl; }
            set { ExcerptImpl = (at.dasz.DocumentManagement.ExcerptMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ExcerptCache;

        private int? _fk_Excerpt {
            get
            {
                return __fk_ExcerptCache;
            }
            set
            {
                __fk_ExcerptCache = value;
                // Recreate task to clear it's cache
                _triggerFetchExcerptTask = null;
            }
        }

        /// <summary>ForeignKey Property for Excerpt's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Excerpt
		{
			get { return _fk_Excerpt; }
			set { _fk_Excerpt = value; }
		}


        Zetbox.API.Async.ZbTask<at.dasz.DocumentManagement.Excerpt> _triggerFetchExcerptTask;
        public Zetbox.API.Async.ZbTask<at.dasz.DocumentManagement.Excerpt> TriggerFetchExcerptAsync()
        {
            if (_triggerFetchExcerptTask != null) return _triggerFetchExcerptTask;

            if (_fk_Excerpt.HasValue)
                _triggerFetchExcerptTask = Context.FindAsync<at.dasz.DocumentManagement.Excerpt>(_fk_Excerpt.Value);
            else
                _triggerFetchExcerptTask = new Zetbox.API.Async.ZbTask<at.dasz.DocumentManagement.Excerpt>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchExcerptTask.OnResult(t =>
            {
                if (OnExcerpt_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<at.dasz.DocumentManagement.Excerpt>(t.Result);
                    OnExcerpt_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchExcerptTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal at.dasz.DocumentManagement.ExcerptMemoryImpl ExcerptImpl
        {
            get
            {
                return (at.dasz.DocumentManagement.ExcerptMemoryImpl)TriggerFetchExcerptAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Excerpt == null) || (value != null && value.ID == _fk_Excerpt))
                {
                    SetInitializedProperty("Excerpt");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ExcerptImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Excerpt", __oldValue, __newValue);

                if (OnExcerpt_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<at.dasz.DocumentManagement.Excerpt>(__oldValue, __newValue);
                    OnExcerpt_PreSetter(this, e);
                    __newValue = (at.dasz.DocumentManagement.ExcerptMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Excerpt = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.File = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.File = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("Excerpt", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnExcerpt_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<at.dasz.DocumentManagement.Excerpt>(__oldValue, __newValue);
                    OnExcerpt_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Excerpt
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, at.dasz.DocumentManagement.Excerpt> OnExcerpt_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, at.dasz.DocumentManagement.Excerpt> OnExcerpt_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, at.dasz.DocumentManagement.Excerpt> OnExcerpt_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnExcerpt_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("91566b41-879d-4e72-b48b-9677cc156649"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'File.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnExportGuid_IsValid;

        /// <summary>
        /// This file cannot be changed when the flas is set
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsFileReadonly
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsFileReadonly;
                if (!_isIsFileReadonlySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("6942c3e7-ba7b-4e9c-b7fb-644c5aa1c73f"));
                    if (__p != null) {
                        _isIsFileReadonlySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsFileReadonly = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'File.IsFileReadonly'");
                    }
                }
                if (OnIsFileReadonly_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsFileReadonly_Getter(this, __e);
                    __result = _IsFileReadonly = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsFileReadonlySet = true;
                if (_IsFileReadonly != value)
                {
                    var __oldValue = _IsFileReadonly;
                    var __newValue = value;
                    if (OnIsFileReadonly_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFileReadonly_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsFileReadonly", __oldValue, __newValue);
                    _IsFileReadonly = __newValue;
                    NotifyPropertyChanged("IsFileReadonly", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsFileReadonly_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFileReadonly_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsFileReadonly");
                }
            }
        }
        private bool _IsFileReadonly;
        private bool _isIsFileReadonlySet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, bool> OnIsFileReadonly_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, bool> OnIsFileReadonly_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, bool> OnIsFileReadonly_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnIsFileReadonly_IsValid;

        /// <summary>
        /// Keeps revisions of this file
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool KeepRevisions
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _KeepRevisions;
                if (!_isKeepRevisionsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("0b0775d4-9ded-472d-aac5-d1cd63b97237"));
                    if (__p != null) {
                        _isKeepRevisionsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._KeepRevisions = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'File.KeepRevisions'");
                    }
                }
                if (OnKeepRevisions_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnKeepRevisions_Getter(this, __e);
                    __result = _KeepRevisions = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isKeepRevisionsSet = true;
                if (_KeepRevisions != value)
                {
                    var __oldValue = _KeepRevisions;
                    var __newValue = value;
                    if (OnKeepRevisions_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnKeepRevisions_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("KeepRevisions", __oldValue, __newValue);
                    _KeepRevisions = __newValue;
                    NotifyPropertyChanged("KeepRevisions", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKeepRevisions_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnKeepRevisions_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("KeepRevisions");
                }
            }
        }
        private bool _KeepRevisions;
        private bool _isKeepRevisionsSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, bool> OnKeepRevisions_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, bool> OnKeepRevisions_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, bool> OnKeepRevisions_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnKeepRevisions_IsValid;

        /// <summary>
        /// Filename
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, string> OnName_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnName_IsValid;

        /// <summary>
        /// Revisions of this file
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Revisions
        public IList<Zetbox.App.Base.Blob> Revisions
        {
            get
            {
                if (_Revisions == null)
                {
                    TriggerFetchRevisionsAsync().Wait();
                }
                return (IList<Zetbox.App.Base.Blob>)_Revisions;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchRevisionsTask;
        public Zetbox.API.Async.ZbTask TriggerFetchRevisionsAsync()
        {
            if (_triggerFetchRevisionsTask != null) return _triggerFetchRevisionsTask;
            _triggerFetchRevisionsTask = Context.FetchRelationAsync<at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl>(new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad"), RelationEndRole.A, this);
            _triggerFetchRevisionsTask.OnResult(r =>
            {
                _Revisions
                    = new ObservableBSideListWrapper<at.dasz.DocumentManagement.File, Zetbox.App.Base.Blob, at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl, ICollection<at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl>(this.Context, this));
                        // _Revisions.CollectionChanged is managed by OnRevisionsCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchRevisionsTask;
        }

        internal void OnRevisionsCollectionChanged()
        {
            NotifyPropertyChanged("Revisions", null, null);
            if (OnRevisions_PostSetter != null && IsAttached)
                OnRevisions_PostSetter(this);
        }

        private ObservableBSideListWrapper<at.dasz.DocumentManagement.File, Zetbox.App.Base.Blob, at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl, ICollection<at.dasz.DocumentManagement.Document_has_Revisions_RelationEntryMemoryImpl>> _Revisions;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Revisions
public static event PropertyListChangedHandler<at.dasz.DocumentManagement.File> OnRevisions_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnRevisions_IsValid;

        /// <summary>
        /// Tags describing this file
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Tags
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Tags;
                if (OnTags_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTags_Getter(this, __e);
                    __result = _Tags = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Tags != value)
                {
                    var __oldValue = _Tags;
                    var __newValue = value;
                    if (OnTags_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTags_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Tags", __oldValue, __newValue);
                    _Tags = __newValue;
                    NotifyPropertyChanged("Tags", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTags_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTags_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Tags");
                }
            }
        }
        private string _Tags;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<at.dasz.DocumentManagement.File, string> OnTags_Getter;
		public static event PropertyPreSetterHandler<at.dasz.DocumentManagement.File, string> OnTags_PreSetter;
		public static event PropertyPostSetterHandler<at.dasz.DocumentManagement.File, string> OnTags_PostSetter;

        public static event PropertyIsValidHandler<at.dasz.DocumentManagement.File> OnTags_IsValid;

        /// <summary>
        /// Creates an excerpt from the current file
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnExtractText_File")]
        public virtual void ExtractText()
        {
            // base.ExtractText();
            if (OnExtractText_File != null)
            {
                OnExtractText_File(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method File.ExtractText");
            }
        }
        public delegate void ExtractText_Handler<T>(T obj);
        public static event ExtractText_Handler<File> OnExtractText_File;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<File> OnExtractText_File_CanExec;

        [EventBasedMethod("OnExtractText_File_CanExec")]
        public virtual bool ExtractTextCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnExtractText_File_CanExec != null)
				{
					OnExtractText_File_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<File> OnExtractText_File_CanExecReason;

        [EventBasedMethod("OnExtractText_File_CanExecReason")]
        public virtual string ExtractTextCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnExtractText_File_CanExecReason != null)
				{
					OnExtractText_File_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Handles the change of the current blob
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnHandleBlobChange_File")]
        public virtual Zetbox.App.Base.Blob HandleBlobChange(Zetbox.App.Base.Blob oldBlob, Zetbox.App.Base.Blob newBlob)
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Blob>();
            if (OnHandleBlobChange_File != null)
            {
                OnHandleBlobChange_File(this, e, oldBlob, newBlob);
            }
            else
            {
                throw new NotImplementedException("No handler registered on File.HandleBlobChange");
            }
            return e.Result;
        }
        public delegate void HandleBlobChange_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Blob> ret, Zetbox.App.Base.Blob oldBlob, Zetbox.App.Base.Blob newBlob);
        public static event HandleBlobChange_Handler<File> OnHandleBlobChange_File;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<File> OnHandleBlobChange_File_CanExec;

        [EventBasedMethod("OnHandleBlobChange_File_CanExec")]
        public virtual bool HandleBlobChangeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnHandleBlobChange_File_CanExec != null)
				{
					OnHandleBlobChange_File_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<File> OnHandleBlobChange_File_CanExecReason;

        [EventBasedMethod("OnHandleBlobChange_File_CanExecReason")]
        public virtual string HandleBlobChangeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnHandleBlobChange_File_CanExecReason != null)
				{
					OnHandleBlobChange_File_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Öffnet das Dokument schreibgeschützt
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnOpen_File")]
        public virtual void Open()
        {
            // base.Open();
            if (OnOpen_File != null)
            {
                OnOpen_File(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method File.Open");
            }
        }
        public delegate void Open_Handler<T>(T obj);
        public static event Open_Handler<File> OnOpen_File;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<File> OnOpen_File_CanExec;

        [EventBasedMethod("OnOpen_File_CanExec")]
        public virtual bool OpenCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnOpen_File_CanExec != null)
				{
					OnOpen_File_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<File> OnOpen_File_CanExecReason;

        [EventBasedMethod("OnOpen_File_CanExecReason")]
        public virtual string OpenCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnOpen_File_CanExecReason != null)
				{
					OnOpen_File_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Uploads a new Content
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnUpload_File")]
        public virtual void Upload()
        {
            // base.Upload();
            if (OnUpload_File != null)
            {
                OnUpload_File(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method File.Upload");
            }
        }
        public delegate void Upload_Handler<T>(T obj);
        public static event Upload_Handler<File> OnUpload_File;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<File> OnUpload_File_CanExec;

        [EventBasedMethod("OnUpload_File_CanExec")]
        public virtual bool UploadCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnUpload_File_CanExec != null)
				{
					OnUpload_File_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<File> OnUpload_File_CanExecReason;

        [EventBasedMethod("OnUpload_File_CanExecReason")]
        public virtual string UploadCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnUpload_File_CanExecReason != null)
				{
					OnUpload_File_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(File);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (File)obj;
            var otherImpl = (FileMemoryImpl)obj;
            var me = (File)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.IsFileReadonly = other.IsFileReadonly;
            me.KeepRevisions = other.KeepRevisions;
            me.Name = other.Name;
            me.Tags = other.Tags;
            if (me.AttachedTo == null && other.AttachedTo != null) {
                me.AttachedTo = (Zetbox.App.Base.AnyReference)other.AttachedTo.Clone();
            } else if (me.AttachedTo != null && other.AttachedTo == null) {
                me.AttachedTo = null;
            } else if (me.AttachedTo != null && other.AttachedTo != null) {
                me.AttachedTo.ApplyChangesFrom(other.AttachedTo);
            }
            this._fk_Blob = otherImpl._fk_Blob;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Excerpt = otherImpl._fk_Excerpt;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Blob":
                    {
                        var __oldValue = _fk_Blob;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Blob", __oldValue, __newValue);
                        _fk_Blob = __newValue;
                        NotifyPropertyChanged("Blob", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "AttachedTo":
                case "Blob":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Excerpt":
                case "ExportGuid":
                case "IsFileReadonly":
                case "KeepRevisions":
                case "Name":
                case "Tags":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Excerpt":
                case "Revisions":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Blob":
                return TriggerFetchBlobAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Excerpt":
                return TriggerFetchExcerptAsync();
            case "Revisions":
                return TriggerFetchRevisionsAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_Blob.HasValue)
                BlobImpl = (Zetbox.App.Base.BlobMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Base.Blob>(_fk_guid_Blob.Value);
            else
            if (_fk_Blob.HasValue)
                BlobImpl = (Zetbox.App.Base.BlobMemoryImpl)Context.Find<Zetbox.App.Base.Blob>(_fk_Blob.Value);
            else
                BlobImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_Excerpt.HasValue)
                ExcerptImpl = (at.dasz.DocumentManagement.ExcerptMemoryImpl)Context.Find<at.dasz.DocumentManagement.Excerpt>(_fk_Excerpt.Value);
            else
                ExcerptImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<File, Zetbox.App.Base.AnyReference>(
                        lazyCtx,
                        new Guid("98c240a8-e01c-4567-865d-3d83848c8eb1"),
                        "AttachedTo",
                        null,
                        obj => obj.AttachedTo,
                        (obj, val) => obj.AttachedTo = val,
						obj => OnAttachedTo_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, Zetbox.App.Base.Blob>(
                        lazyCtx,
                        new Guid("ef5addda-340f-4a87-83c9-3ee419519343"),
                        "Blob",
                        null,
                        obj => obj.Blob,
                        (obj, val) => obj.Blob = val,
						obj => OnBlob_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c22516f3-b897-4827-a025-27d1515aadcd"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, DateTime>(
                        lazyCtx,
                        new Guid("c144678d-632d-4a83-8041-280d674f4453"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("dc8da15a-a432-43fd-b93f-9b3530ce3144"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, DateTime>(
                        lazyCtx,
                        new Guid("e1892507-375b-4b52-ab20-16095dfc3514"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, at.dasz.DocumentManagement.Excerpt>(
                        lazyCtx,
                        new Guid("76e29530-9252-4c2a-bae4-503f3b6dcd29"),
                        "Excerpt",
                        null,
                        obj => obj.Excerpt,
                        (obj, val) => obj.Excerpt = val,
						obj => OnExcerpt_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, Guid>(
                        lazyCtx,
                        new Guid("91566b41-879d-4e72-b48b-9677cc156649"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, bool>(
                        lazyCtx,
                        new Guid("6942c3e7-ba7b-4e9c-b7fb-644c5aa1c73f"),
                        "IsFileReadonly",
                        null,
                        obj => obj.IsFileReadonly,
                        (obj, val) => obj.IsFileReadonly = val,
						obj => OnIsFileReadonly_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, bool>(
                        lazyCtx,
                        new Guid("0b0775d4-9ded-472d-aac5-d1cd63b97237"),
                        "KeepRevisions",
                        null,
                        obj => obj.KeepRevisions,
                        (obj, val) => obj.KeepRevisions = val,
						obj => OnKeepRevisions_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, string>(
                        lazyCtx,
                        new Guid("1c5f2bea-9915-4634-8ff9-5fd6f0871704"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<File, IList<Zetbox.App.Base.Blob>>(
                        lazyCtx,
                        new Guid("ec544fe0-8189-4bb2-a3d1-3cb61d815aa5"),
                        "Revisions",
                        null,
                        obj => obj.Revisions,
                        null, // lists are read-only properties
                        obj => OnRevisions_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<File, string>(
                        lazyCtx,
                        new Guid("b4f41179-44f8-4235-b272-48f3f1452da7"),
                        "Tags",
                        null,
                        obj => obj.Tags,
                        (obj, val) => obj.Tags = val,
						obj => OnTags_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_File")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_File != null)
            {
                OnToString_File(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<File> OnToString_File;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_File")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_File != null)
            {
                OnObjectIsValid_File(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<File> OnObjectIsValid_File;

        [EventBasedMethod("OnNotifyPreSave_File")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_File != null) OnNotifyPreSave_File(this);
        }
        public static event ObjectEventHandler<File> OnNotifyPreSave_File;

        [EventBasedMethod("OnNotifyPostSave_File")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_File != null) OnNotifyPostSave_File(this);
        }
        public static event ObjectEventHandler<File> OnNotifyPostSave_File;

        [EventBasedMethod("OnNotifyCreated_File")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Blob");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Excerpt");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Tags");
            base.NotifyCreated();
            if (OnNotifyCreated_File != null) OnNotifyCreated_File(this);
        }
        public static event ObjectEventHandler<File> OnNotifyCreated_File;

        [EventBasedMethod("OnNotifyDeleting_File")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_File != null) OnNotifyDeleting_File(this);
            Revisions.Clear();
            Blob = null;
            ChangedBy = null;
            CreatedBy = null;
            Excerpt = null;
        }
        public static event ObjectEventHandler<File> OnNotifyDeleting_File;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this.AttachedTo);
            binStream.Write(Blob != null ? Blob.ID : (int?)null);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(Excerpt != null ? Excerpt.ID : (int?)null);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._isIsFileReadonlySet);
            if (this._isIsFileReadonlySet) {
                binStream.Write(this._IsFileReadonly);
            }
            binStream.Write(this._isKeepRevisionsSet);
            if (this._isKeepRevisionsSet) {
                binStream.Write(this._KeepRevisions);
            }
            binStream.Write(this._Name);
            binStream.Write(this._Tags);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            {
                // use backing store to avoid notifications
                this.AttachedToImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AnyReferenceMemoryImpl>();
                this.AttachedToImpl.AttachToObject(this, "AttachedTo");
            }
            this._fk_Blob = binStream.ReadNullableInt32();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._fk_Excerpt = binStream.ReadNullableInt32();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._isIsFileReadonlySet = binStream.ReadBoolean();
            if (this._isIsFileReadonlySet) {
                this._IsFileReadonly = binStream.ReadBoolean();
            }
            this._isKeepRevisionsSet = binStream.ReadBoolean();
            if (this._isKeepRevisionsSet) {
                this._KeepRevisions = binStream.ReadBoolean();
            }
            this._Name = binStream.ReadString();
            this._Tags = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ExportCompoundObject(this.AttachedTo, xml, "AttachedTo", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(Blob != null ? Blob.ExportGuid : (Guid?)null, xml, "Blob", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._IsFileReadonly, xml, "IsFileReadonly", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._KeepRevisions, xml, "KeepRevisions", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._Name, xml, "Name", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._Tags, xml, "Tags", "at.dasz.DocumentManagement");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "at.dasz.DocumentManagement|AttachedTo":
                XmlStreamer.MergeImportCompoundObject(this.AttachedToImpl, xml);
                break;
            case "at.dasz.DocumentManagement|Blob":
                this._fk_guid_Blob = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "at.dasz.DocumentManagement|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "at.dasz.DocumentManagement|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "at.dasz.DocumentManagement|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "at.dasz.DocumentManagement|IsFileReadonly":
                // Import must have default value set
                this._IsFileReadonly = XmlStreamer.ReadBoolean(xml);
                this._isIsFileReadonlySet = true;
                break;
            case "at.dasz.DocumentManagement|KeepRevisions":
                // Import must have default value set
                this._KeepRevisions = XmlStreamer.ReadBoolean(xml);
                this._isKeepRevisionsSet = true;
                break;
            case "at.dasz.DocumentManagement|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "at.dasz.DocumentManagement|Tags":
                this._Tags = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// A calendar event
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Event")]
    public class EventMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Event, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("fd0b9bf4-0891-4317-9d2e-d08a410d5c4c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public EventMemoryImpl()
            : base(null)
        {
            RecurrenceImpl = new Zetbox.App.Base.RecurrenceRuleMemoryImpl(null, this, "Recurrence");
            SourceImpl = new Zetbox.App.Base.AnyReferenceMemoryImpl(null, this, "Source");
        }

        public EventMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
            RecurrenceImpl = new Zetbox.App.Base.RecurrenceRuleMemoryImpl(lazyCtx, this, "Recurrence");
            SourceImpl = new Zetbox.App.Base.AnyReferenceMemoryImpl(lazyCtx, this, "Source");
        }

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Body
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Body;
                if (OnBody_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnBody_Getter(this, __e);
                    __result = _Body = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Body != value)
                {
                    var __oldValue = _Body;
                    var __newValue = value;
                    if (OnBody_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnBody_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Body", __oldValue, __newValue);
                    _Body = __newValue;
                    NotifyPropertyChanged("Body", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBody_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnBody_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Body");
                }
            }
        }
        private string _Body;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnBody_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnBody_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnBody_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnBody_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
        // fkBackingName=_fk_Calendar; fkGuidBackingName=_fk_guid_Calendar;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Calendar.CalendarBook Calendar
        {
            get { return CalendarImpl; }
            set { CalendarImpl = (Zetbox.App.Calendar.CalendarBookMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CalendarCache;

        private int? _fk_Calendar {
            get
            {
                return __fk_CalendarCache;
            }
            set
            {
                __fk_CalendarCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCalendarTask = null;
            }
        }

        /// <summary>ForeignKey Property for Calendar's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Calendar
		{
			get { return _fk_Calendar; }
			set { _fk_Calendar = value; }
		}

        private Guid? _fk_guid_Calendar = null;

        Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook> _triggerFetchCalendarTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook> TriggerFetchCalendarAsync()
        {
            if (_triggerFetchCalendarTask != null) return _triggerFetchCalendarTask;

            if (_fk_Calendar.HasValue)
                _triggerFetchCalendarTask = Context.FindAsync<Zetbox.App.Calendar.CalendarBook>(_fk_Calendar.Value);
            else
                _triggerFetchCalendarTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCalendarTask.OnResult(t =>
            {
                if (OnCalendar_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.CalendarBook>(t.Result);
                    OnCalendar_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCalendarTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Calendar.CalendarBookMemoryImpl CalendarImpl
        {
            get
            {
                return (Zetbox.App.Calendar.CalendarBookMemoryImpl)TriggerFetchCalendarAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_Calendar == null) || (value != null && value.ID == _fk_Calendar))
                {
                    SetInitializedProperty("Calendar");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CalendarImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Calendar", __oldValue, __newValue);

                if (OnCalendar_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.CalendarBook>(__oldValue, __newValue);
                    OnCalendar_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.CalendarBookMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_Calendar = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCalendar_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.CalendarBook>(__oldValue, __newValue);
                    OnCalendar_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Calendar
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Calendar.CalendarBook> OnCalendar_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCalendar_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("36344f62-2391-4961-b707-fb7b96018cb9"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Event.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9a88ae72-e738-4cba-a2cf-54df69f1e221"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Event.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime EndDate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _EndDate;
                if (OnEndDate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnEndDate_Getter(this, __e);
                    __result = _EndDate = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_EndDate != value)
                {
                    var __oldValue = _EndDate;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnEndDate_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnEndDate_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("EndDate", __oldValue, __newValue);
                    _EndDate = __newValue;
                    NotifyPropertyChanged("EndDate", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnEndDate_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnEndDate_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("EndDate");
                }
            }
        }
        private DateTime _EndDate;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnEndDate_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnEndDate_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9e8ad42a-67fa-4ee6-8923-2563fd2e069c"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Event.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsAllDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsAllDay;
                if (!_isIsAllDaySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d8ddeb5c-7c5d-4780-8540-857932cb3813"));
                    if (__p != null) {
                        _isIsAllDaySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsAllDay = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Event.IsAllDay'");
                    }
                }
                if (OnIsAllDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAllDay_Getter(this, __e);
                    __result = _IsAllDay = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsAllDaySet = true;
                if (_IsAllDay != value)
                {
                    var __oldValue = _IsAllDay;
                    var __newValue = value;
                    if (OnIsAllDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAllDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAllDay", __oldValue, __newValue);
                    _IsAllDay = __newValue;
                    NotifyPropertyChanged("IsAllDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsAllDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAllDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsAllDay");
                }
            }
        }
        private bool _IsAllDay;
        private bool _isIsAllDaySet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsAllDay_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnIsAllDay_IsValid;

        /// <summary>
        /// The current event is read only. This property is set by code.
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool IsViewReadOnly
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsViewReadOnly;
                if (!_isIsViewReadOnlySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("15534345-ecd4-407b-a605-236375eafa66"));
                    if (__p != null) {
                        _isIsViewReadOnlySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsViewReadOnly = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Event.IsViewReadOnly'");
                    }
                }
                if (OnIsViewReadOnly_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsViewReadOnly_Getter(this, __e);
                    __result = _IsViewReadOnly = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsViewReadOnlySet = true;
                if (_IsViewReadOnly != value)
                {
                    var __oldValue = _IsViewReadOnly;
                    var __newValue = value;
                    if (OnIsViewReadOnly_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsViewReadOnly_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsViewReadOnly", __oldValue, __newValue);
                    _IsViewReadOnly = __newValue;
                    NotifyPropertyChanged("IsViewReadOnly", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsViewReadOnly_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsViewReadOnly_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsViewReadOnly");
                }
            }
        }
        private bool _IsViewReadOnly;
        private bool _isIsViewReadOnlySet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, bool> OnIsViewReadOnly_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnIsViewReadOnly_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Location
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Location;
                if (OnLocation_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLocation_Getter(this, __e);
                    __result = _Location = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Location != value)
                {
                    var __oldValue = _Location;
                    var __newValue = value;
                    if (OnLocation_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLocation_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Location", __oldValue, __newValue);
                    _Location = __newValue;
                    NotifyPropertyChanged("Location", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLocation_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLocation_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Location");
                }
            }
        }
        private string _Location;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnLocation_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnLocation_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.RecurrenceRule Recurrence
        {
            get { return RecurrenceImpl; }
            set { RecurrenceImpl = (Zetbox.App.Base.RecurrenceRuleMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for Recurrence</summary>
        private Zetbox.App.Base.RecurrenceRuleMemoryImpl _Recurrence;

        /// <summary>backing property for Recurrence, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.RecurrenceRuleMemoryImpl RecurrenceImpl
        {
            get
            {
                return _Recurrence;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_Recurrence, value))
                {
                    var __oldValue = _Recurrence;
                    var __newValue = value;

                    NotifyPropertyChanging("Recurrence", __oldValue, __newValue);

                    if (_Recurrence != null)
                    {
                        _Recurrence.DetachFromObject(this, "Recurrence");
                    }
                    __newValue = (Zetbox.App.Base.RecurrenceRuleMemoryImpl)__newValue.Clone();
                    _Recurrence = __newValue;
                    _Recurrence.AttachToObject(this, "Recurrence");

                    NotifyPropertyChanged("Recurrence", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnRecurrence_IsValid;

        /// <summary>
        /// A attached data item
        /// </summary>
        // CompoundObject property
        // BEGIN Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.AnyReference Source
        {
            get { return SourceImpl; }
            set { SourceImpl = (Zetbox.App.Base.AnyReferenceMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>backing store for Source</summary>
        private Zetbox.App.Base.AnyReferenceMemoryImpl _Source;

        /// <summary>backing property for Source, takes care of attaching/detaching the values</summary>
        public Zetbox.App.Base.AnyReferenceMemoryImpl SourceImpl
        {
            get
            {
                return _Source;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_Source, value))
                {
                    var __oldValue = _Source;
                    var __newValue = value;

                    NotifyPropertyChanging("Source", __oldValue, __newValue);

                    if (_Source != null)
                    {
                        _Source.DetachFromObject(this, "Source");
                    }
                    __newValue = (Zetbox.App.Base.AnyReferenceMemoryImpl)__newValue.Clone();
                    _Source = __newValue;
                    _Source.AttachToObject(this, "Source");

                    NotifyPropertyChanged("Source", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSource_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime StartDate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _StartDate;
                if (OnStartDate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnStartDate_Getter(this, __e);
                    __result = _StartDate = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_StartDate != value)
                {
                    var __oldValue = _StartDate;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnStartDate_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnStartDate_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("StartDate", __oldValue, __newValue);
                    _StartDate = __newValue;
                    NotifyPropertyChanged("StartDate", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnStartDate_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnStartDate_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("StartDate");
                }
            }
        }
        private DateTime _StartDate;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, DateTime> OnStartDate_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnStartDate_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Summary
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Summary;
                if (OnSummary_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSummary_Getter(this, __e);
                    __result = _Summary = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Summary != value)
                {
                    var __oldValue = _Summary;
                    var __newValue = value;
                    if (OnSummary_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSummary_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Summary", __oldValue, __newValue);
                    _Summary = __newValue;
                    NotifyPropertyChanged("Summary", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSummary_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSummary_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Summary");
                }
            }
        }
        private string _Summary;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnSummary_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSummary_IsValid;

        /// <summary>
        /// A hash used by a sync provider
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string SyncHash
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _SyncHash;
                if (OnSyncHash_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnSyncHash_Getter(this, __e);
                    __result = _SyncHash = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_SyncHash != value)
                {
                    var __oldValue = _SyncHash;
                    var __newValue = value;
                    if (OnSyncHash_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnSyncHash_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("SyncHash", __oldValue, __newValue);
                    _SyncHash = __newValue;
                    NotifyPropertyChanged("SyncHash", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnSyncHash_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnSyncHash_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("SyncHash");
                }
            }
        }
        private string _SyncHash;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.Event, string> OnSyncHash_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.Event> OnSyncHash_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Event);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Event)obj;
            var otherImpl = (EventMemoryImpl)obj;
            var me = (Event)this;

            me.Body = other.Body;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.EndDate = other.EndDate;
            me.ExportGuid = other.ExportGuid;
            me.IsAllDay = other.IsAllDay;
            me.IsViewReadOnly = other.IsViewReadOnly;
            me.Location = other.Location;
            me.StartDate = other.StartDate;
            me.Summary = other.Summary;
            me.SyncHash = other.SyncHash;
            if (me.Recurrence == null && other.Recurrence != null) {
                me.Recurrence = (Zetbox.App.Base.RecurrenceRule)other.Recurrence.Clone();
            } else if (me.Recurrence != null && other.Recurrence == null) {
                me.Recurrence = null;
            } else if (me.Recurrence != null && other.Recurrence != null) {
                me.Recurrence.ApplyChangesFrom(other.Recurrence);
            }
            if (me.Source == null && other.Source != null) {
                me.Source = (Zetbox.App.Base.AnyReference)other.Source.Clone();
            } else if (me.Source != null && other.Source == null) {
                me.Source = null;
            } else if (me.Source != null && other.Source != null) {
                me.Source.ApplyChangesFrom(other.Source);
            }
            this._fk_Calendar = otherImpl._fk_Calendar;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Calendar":
                    {
                        var __oldValue = _fk_Calendar;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Calendar", __oldValue, __newValue);
                        _fk_Calendar = __newValue;
                        NotifyPropertyChanged("Calendar", __oldValue, __newValue);
                    }
                    break;
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Body":
                case "Calendar":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "EndDate":
                case "ExportGuid":
                case "IsAllDay":
                case "IsViewReadOnly":
                case "Location":
                case "Recurrence":
                case "Source":
                case "StartDate":
                case "Summary":
                case "SyncHash":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Calendar":
                return TriggerFetchCalendarAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_Calendar.HasValue)
                CalendarImpl = (Zetbox.App.Calendar.CalendarBookMemoryImpl)Context.FindPersistenceObject<Zetbox.App.Calendar.CalendarBook>(_fk_guid_Calendar.Value);
            else
            if (_fk_Calendar.HasValue)
                CalendarImpl = (Zetbox.App.Calendar.CalendarBookMemoryImpl)Context.Find<Zetbox.App.Calendar.CalendarBook>(_fk_Calendar.Value);
            else
                CalendarImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<Event, string>(
                        lazyCtx,
                        new Guid("db075997-89bd-4b98-bf60-40eecebfc664"),
                        "Body",
                        null,
                        obj => obj.Body,
                        (obj, val) => obj.Body = val,
						obj => OnBody_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Zetbox.App.Calendar.CalendarBook>(
                        lazyCtx,
                        new Guid("d80b3380-9cc2-4237-960c-9cd409d793e3"),
                        "Calendar",
                        null,
                        obj => obj.Calendar,
                        (obj, val) => obj.Calendar = val,
						obj => OnCalendar_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("664e51f9-1091-458b-accc-72ccb50900ce"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("36344f62-2391-4961-b707-fb7b96018cb9"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("15d27941-fbe2-40cf-a431-d9d417b883ec"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("9a88ae72-e738-4cba-a2cf-54df69f1e221"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("b8dd3910-ffaa-49dd-8e00-e80575e15cab"),
                        "EndDate",
                        null,
                        obj => obj.EndDate,
                        (obj, val) => obj.EndDate = val,
						obj => OnEndDate_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Guid>(
                        lazyCtx,
                        new Guid("9e8ad42a-67fa-4ee6-8923-2563fd2e069c"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, bool>(
                        lazyCtx,
                        new Guid("d8ddeb5c-7c5d-4780-8540-857932cb3813"),
                        "IsAllDay",
                        null,
                        obj => obj.IsAllDay,
                        (obj, val) => obj.IsAllDay = val,
						obj => OnIsAllDay_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, bool>(
                        lazyCtx,
                        new Guid("15534345-ecd4-407b-a605-236375eafa66"),
                        "IsViewReadOnly",
                        null,
                        obj => obj.IsViewReadOnly,
                        (obj, val) => obj.IsViewReadOnly = val,
						obj => OnIsViewReadOnly_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, string>(
                        lazyCtx,
                        new Guid("3c517754-f4a4-459e-8a24-3b85e1949b21"),
                        "Location",
                        null,
                        obj => obj.Location,
                        (obj, val) => obj.Location = val,
						obj => OnLocation_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Zetbox.App.Base.RecurrenceRule>(
                        lazyCtx,
                        new Guid("2eb0c6f4-c5bc-4b9a-8677-ec2598c74beb"),
                        "Recurrence",
                        null,
                        obj => obj.Recurrence,
                        (obj, val) => obj.Recurrence = val,
						obj => OnRecurrence_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, Zetbox.App.Base.AnyReference>(
                        lazyCtx,
                        new Guid("086bf775-297d-49bf-be32-95b19f5eda8a"),
                        "Source",
                        null,
                        obj => obj.Source,
                        (obj, val) => obj.Source = val,
						obj => OnSource_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, DateTime>(
                        lazyCtx,
                        new Guid("93bf17bd-4dfb-468d-84d4-75fce8214fa3"),
                        "StartDate",
                        null,
                        obj => obj.StartDate,
                        (obj, val) => obj.StartDate = val,
						obj => OnStartDate_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, string>(
                        lazyCtx,
                        new Guid("e0cbb876-3119-4e90-afc5-6e97b67e2005"),
                        "Summary",
                        null,
                        obj => obj.Summary,
                        (obj, val) => obj.Summary = val,
						obj => OnSummary_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Event, string>(
                        lazyCtx,
                        new Guid("b9095bc6-a8cb-422e-8320-e1c07c8c6252"),
                        "SyncHash",
                        null,
                        obj => obj.SyncHash,
                        (obj, val) => obj.SyncHash = val,
						obj => OnSyncHash_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Event")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Event != null)
            {
                OnToString_Event(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Event> OnToString_Event;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Event")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Event != null)
            {
                OnObjectIsValid_Event(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Event> OnObjectIsValid_Event;

        [EventBasedMethod("OnNotifyPreSave_Event")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Event != null) OnNotifyPreSave_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyPreSave_Event;

        [EventBasedMethod("OnNotifyPostSave_Event")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Event != null) OnNotifyPostSave_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyPostSave_Event;

        [EventBasedMethod("OnNotifyCreated_Event")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Body");
            SetNotInitializedProperty("Calendar");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("EndDate");
            SetNotInitializedProperty("Location");
            SetNotInitializedProperty("StartDate");
            SetNotInitializedProperty("Summary");
            SetNotInitializedProperty("SyncHash");
            base.NotifyCreated();
            if (OnNotifyCreated_Event != null) OnNotifyCreated_Event(this);
        }
        public static event ObjectEventHandler<Event> OnNotifyCreated_Event;

        [EventBasedMethod("OnNotifyDeleting_Event")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Event != null) OnNotifyDeleting_Event(this);
            Calendar = null;
            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Event> OnNotifyDeleting_Event;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._Body);
            binStream.Write(Calendar != null ? Calendar.ID : (int?)null);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._EndDate);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._isIsAllDaySet);
            if (this._isIsAllDaySet) {
                binStream.Write(this._IsAllDay);
            }
            binStream.Write(this._isIsViewReadOnlySet);
            if (this._isIsViewReadOnlySet) {
                binStream.Write(this._IsViewReadOnly);
            }
            binStream.Write(this._Location);
            binStream.Write(this.Recurrence);
            binStream.Write(this.Source);
            binStream.Write(this._StartDate);
            binStream.Write(this._Summary);
            binStream.Write(this._SyncHash);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._Body = binStream.ReadString();
            this._fk_Calendar = binStream.ReadNullableInt32();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._EndDate = binStream.ReadDateTime();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._isIsAllDaySet = binStream.ReadBoolean();
            if (this._isIsAllDaySet) {
                this._IsAllDay = binStream.ReadBoolean();
            }
            this._isIsViewReadOnlySet = binStream.ReadBoolean();
            if (this._isIsViewReadOnlySet) {
                this._IsViewReadOnly = binStream.ReadBoolean();
            }
            this._Location = binStream.ReadString();
            {
                // use backing store to avoid notifications
                this.RecurrenceImpl = binStream.ReadCompoundObject<Zetbox.App.Base.RecurrenceRuleMemoryImpl>();
                this.RecurrenceImpl.AttachToObject(this, "Recurrence");
            }
            {
                // use backing store to avoid notifications
                this.SourceImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AnyReferenceMemoryImpl>();
                this.SourceImpl.AttachToObject(this, "Source");
            }
            this._StartDate = binStream.ReadDateTime();
            this._Summary = binStream.ReadString();
            this._SyncHash = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._Body, xml, "Body", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(Calendar != null ? Calendar.ExportGuid : (Guid?)null, xml, "Calendar", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._EndDate, xml, "EndDate", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._IsAllDay, xml, "IsAllDay", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._IsViewReadOnly, xml, "IsViewReadOnly", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._Location, xml, "Location", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ExportCompoundObject(this.Recurrence, xml, "Recurrence", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ExportCompoundObject(this.Source, xml, "Source", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._StartDate, xml, "StartDate", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._Summary, xml, "Summary", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._SyncHash, xml, "SyncHash", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|Body":
                this._Body = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|Calendar":
                this._fk_guid_Calendar = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|EndDate":
                this._EndDate = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|IsAllDay":
                // Import must have default value set
                this._IsAllDay = XmlStreamer.ReadBoolean(xml);
                this._isIsAllDaySet = true;
                break;
            case "Zetbox.App.Calendar|IsViewReadOnly":
                // Import must have default value set
                this._IsViewReadOnly = XmlStreamer.ReadBoolean(xml);
                this._isIsViewReadOnlySet = true;
                break;
            case "Zetbox.App.Calendar|Location":
                this._Location = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|Recurrence":
                XmlStreamer.MergeImportCompoundObject(this.RecurrenceImpl, xml);
                break;
            case "Zetbox.App.Calendar|Source":
                XmlStreamer.MergeImportCompoundObject(this.SourceImpl, xml);
                break;
            case "Zetbox.App.Calendar|StartDate":
                this._StartDate = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Calendar|Summary":
                this._Summary = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|SyncHash":
                this._SyncHash = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Muhblah")]
    public class MuhblahMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Muhblah
    {
        private static readonly Guid _objectClassID = new Guid("fd357e42-2c2c-4bef-8110-69a466d09af0");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public MuhblahMemoryImpl()
            : base(null)
        {
        }

        public MuhblahMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value list property
		// Zetbox.Generator.Templates.Properties.ValueCollectionProperty
		public ICollection<string> StringCollection
		{
			get
			{
				if (_StringCollection == null)
				{
				    _StringCollection 
				        = new ClientValueCollectionWrapper<Muhblah, string, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntry, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl>>(
							this.Context,
				            this, 
				            () => { this.NotifyPropertyChanged("StringCollection", null, null); if(OnStringCollection_PostSetter != null && IsAttached) OnStringCollection_PostSetter(this); },
				            _StringCollectionCollection);
				}
				return _StringCollection;
			}
		}

		private ClientValueCollectionWrapper<Muhblah, string, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntry, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl>> _StringCollection;
		private ObservableCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl> _StringCollectionCollection = new ObservableCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryMemoryImpl>();
public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnStringCollection_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnStringCollection_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public bool? TestBool
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestBool;
                if (OnTestBool_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnTestBool_Getter(this, __e);
                    __result = _TestBool = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestBool != value)
                {
                    var __oldValue = _TestBool;
                    var __newValue = value;
                    if (OnTestBool_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestBool", __oldValue, __newValue);
                    _TestBool = __newValue;
                    NotifyPropertyChanged("TestBool", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestBool_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestBool");
                }
            }
        }
        private bool? _TestBool;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestBool_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Test.TestCustomObject> TestCustomObjects_List_Nav
        {
            get
            {
                if (_TestCustomObjects_List_Nav == null)
                {
                    TriggerFetchTestCustomObjects_List_NavAsync().Wait();
                }
                return _TestCustomObjects_List_Nav;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchTestCustomObjects_List_NavTask;
        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_List_NavAsync()
        {
            if (_triggerFetchTestCustomObjects_List_NavTask != null) return _triggerFetchTestCustomObjects_List_NavTask;

            List<Zetbox.App.Test.TestCustomObject> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                _triggerFetchTestCustomObjects_List_NavTask = Context.GetListOfAsync<Zetbox.App.Test.TestCustomObject>(this, "TestCustomObjects_List_Nav")
                    .OnResult(t =>
                    {
                        serverList = t.Result;
                    });
            }
            else
            {
                _triggerFetchTestCustomObjects_List_NavTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Test.TestCustomObject>();
                });
            }

            _triggerFetchTestCustomObjects_List_NavTask.OnResult(t =>
            {
                _TestCustomObjects_List_Nav = new OneNRelationList<Zetbox.App.Test.TestCustomObject>(
                    "MubBlah_Nav",
                    null,
                    this,
                    OnTestCustomObjects_List_NavCollectionChanged,
                    serverList);
            });
            return _triggerFetchTestCustomObjects_List_NavTask;
        }

        internal void OnTestCustomObjects_List_NavCollectionChanged()
        {
            NotifyPropertyChanged("TestCustomObjects_List_Nav", null, null);
            if (OnTestCustomObjects_List_Nav_PostSetter != null && IsAttached)
                OnTestCustomObjects_List_Nav_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Test.TestCustomObject> _TestCustomObjects_List_Nav;
public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_List_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_List_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for TestCustomObjects_ManyList_Nav
        public ICollection<Zetbox.App.Test.TestCustomObject> TestCustomObjects_ManyList_Nav
        {
            get
            {
                if (_TestCustomObjects_ManyList_Nav == null)
                {
                    TriggerFetchTestCustomObjects_ManyList_NavAsync().Wait();
                }
                return (ICollection<Zetbox.App.Test.TestCustomObject>)_TestCustomObjects_ManyList_Nav;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchTestCustomObjects_ManyList_NavTask;
        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_ManyList_NavAsync()
        {
            if (_triggerFetchTestCustomObjects_ManyList_NavTask != null) return _triggerFetchTestCustomObjects_ManyList_NavTask;
            _triggerFetchTestCustomObjects_ManyList_NavTask = Context.FetchRelationAsync<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl>(new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97"), RelationEndRole.A, this);
            _triggerFetchTestCustomObjects_ManyList_NavTask.OnResult(r =>
            {
                _TestCustomObjects_ManyList_Nav
                    = new ObservableBSideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl, ICollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl>(this.Context, this));
                        // _TestCustomObjects_ManyList_Nav.CollectionChanged is managed by OnTestCustomObjects_ManyList_NavCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchTestCustomObjects_ManyList_NavTask;
        }

        internal void OnTestCustomObjects_ManyList_NavCollectionChanged()
        {
            NotifyPropertyChanged("TestCustomObjects_ManyList_Nav", null, null);
            if (OnTestCustomObjects_ManyList_Nav_PostSetter != null && IsAttached)
                OnTestCustomObjects_ManyList_Nav_PostSetter(this);
        }

        private ObservableBSideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl, ICollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryMemoryImpl>> _TestCustomObjects_ManyList_Nav;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for TestCustomObjects_ManyList_Nav
public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_ManyList_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_ManyList_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
        // fkBackingName=_fk_TestCustomObjects_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_Nav;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=MubBlah_List_Nav; is list;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Test.TestCustomObject TestCustomObjects_Nav
        {
            get { return TestCustomObjects_NavImpl; }
            set { TestCustomObjects_NavImpl = (Zetbox.App.Test.TestCustomObjectMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_TestCustomObjects_NavCache;

        private int? _fk_TestCustomObjects_Nav {
            get
            {
                return __fk_TestCustomObjects_NavCache;
            }
            set
            {
                __fk_TestCustomObjects_NavCache = value;
                // Recreate task to clear it's cache
                _triggerFetchTestCustomObjects_NavTask = null;
            }
        }

        /// <summary>ForeignKey Property for TestCustomObjects_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_TestCustomObjects_Nav
		{
			get { return _fk_TestCustomObjects_Nav; }
			set { _fk_TestCustomObjects_Nav = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject> _triggerFetchTestCustomObjects_NavTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject> TriggerFetchTestCustomObjects_NavAsync()
        {
            if (_triggerFetchTestCustomObjects_NavTask != null) return _triggerFetchTestCustomObjects_NavTask;

            if (_fk_TestCustomObjects_Nav.HasValue)
                _triggerFetchTestCustomObjects_NavTask = Context.FindAsync<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_Nav.Value);
            else
                _triggerFetchTestCustomObjects_NavTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchTestCustomObjects_NavTask.OnResult(t =>
            {
                if (OnTestCustomObjects_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestCustomObject>(t.Result);
                    OnTestCustomObjects_Nav_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchTestCustomObjects_NavTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Test.TestCustomObjectMemoryImpl TestCustomObjects_NavImpl
        {
            get
            {
                return (Zetbox.App.Test.TestCustomObjectMemoryImpl)TriggerFetchTestCustomObjects_NavAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_TestCustomObjects_Nav == null) || (value != null && value.ID == _fk_TestCustomObjects_Nav))
                {
                    SetInitializedProperty("TestCustomObjects_Nav");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = TestCustomObjects_NavImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_Nav", __oldValue, __newValue);

                if (OnTestCustomObjects_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.TestCustomObjectMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_TestCustomObjects_Nav = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // remove from old list
                    (__oldValue.MubBlah_List_Nav as IRelationListSync<Zetbox.App.Test.Muhblah>).RemoveWithoutClearParent(this);
                }

                if (__newValue != null)
                {
                    // add to new list
                    (__newValue.MubBlah_List_Nav as IRelationListSync<Zetbox.App.Test.Muhblah>).AddWithoutSetParent(this);
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_Nav", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnTestCustomObjects_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
        // fkBackingName=_fk_TestCustomObjects_One_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_One_Nav;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=MuhBlah_One_Nav; is reference;
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Test.TestCustomObject TestCustomObjects_One_Nav
        {
            get { return TestCustomObjects_One_NavImpl; }
            set { TestCustomObjects_One_NavImpl = (Zetbox.App.Test.TestCustomObjectMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_TestCustomObjects_One_NavCache;

        private int? _fk_TestCustomObjects_One_Nav {
            get
            {
                return __fk_TestCustomObjects_One_NavCache;
            }
            set
            {
                __fk_TestCustomObjects_One_NavCache = value;
                // Recreate task to clear it's cache
                _triggerFetchTestCustomObjects_One_NavTask = null;
            }
        }

        /// <summary>ForeignKey Property for TestCustomObjects_One_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_TestCustomObjects_One_Nav
		{
			get { return _fk_TestCustomObjects_One_Nav; }
			set { _fk_TestCustomObjects_One_Nav = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject> _triggerFetchTestCustomObjects_One_NavTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject> TriggerFetchTestCustomObjects_One_NavAsync()
        {
            if (_triggerFetchTestCustomObjects_One_NavTask != null) return _triggerFetchTestCustomObjects_One_NavTask;

            if (_fk_TestCustomObjects_One_Nav.HasValue)
                _triggerFetchTestCustomObjects_One_NavTask = Context.FindAsync<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_One_Nav.Value);
            else
                _triggerFetchTestCustomObjects_One_NavTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchTestCustomObjects_One_NavTask.OnResult(t =>
            {
                if (OnTestCustomObjects_One_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestCustomObject>(t.Result);
                    OnTestCustomObjects_One_Nav_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchTestCustomObjects_One_NavTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Test.TestCustomObjectMemoryImpl TestCustomObjects_One_NavImpl
        {
            get
            {
                return (Zetbox.App.Test.TestCustomObjectMemoryImpl)TriggerFetchTestCustomObjects_One_NavAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_TestCustomObjects_One_Nav == null) || (value != null && value.ID == _fk_TestCustomObjects_One_Nav))
                {
                    SetInitializedProperty("TestCustomObjects_One_Nav");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = TestCustomObjects_One_NavImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_One_Nav", __oldValue, __newValue);

                if (OnTestCustomObjects_One_Nav_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.TestCustomObjectMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_TestCustomObjects_One_Nav = __newValue == null ? (int?)null : __newValue.ID;

                // now fixup redundant, inverse references
                // The inverse navigator will also fire events when changed, so should
                // only be touched after setting the local value above.
                // TODO: for complete correctness, the "other" Changing event should also fire
                //       before the local value is changed
                if (__oldValue != null)
                {
                    // unset old reference
                    __oldValue.MuhBlah_One_Nav = null;
                }

                if (__newValue != null)
                {
                    // set new reference
                    __newValue.MuhBlah_One_Nav = this;
                }
                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_One_Nav", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnTestCustomObjects_One_Nav_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_One_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? TestDateTime
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestDateTime;
                if (OnTestDateTime_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnTestDateTime_Getter(this, __e);
                    __result = _TestDateTime = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestDateTime != value)
                {
                    var __oldValue = _TestDateTime;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnTestDateTime_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestDateTime", __oldValue, __newValue);
                    _TestDateTime = __newValue;
                    NotifyPropertyChanged("TestDateTime", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestDateTime_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestDateTime");
                }
            }
        }
        private DateTime? _TestDateTime;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestDateTime_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Zetbox.App.Test.TestEnum TestEnum
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestEnum;
                if (OnTestEnum_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum>(__result);
                    OnTestEnum_Getter(this, __e);
                    __result = _TestEnum = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestEnum != value)
                {
                    var __oldValue = _TestEnum;
                    var __newValue = value;
                    if (OnTestEnum_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestEnum", __oldValue, __newValue);
                    _TestEnum = __newValue;
                    NotifyPropertyChanged("TestEnum", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestEnum_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestEnum");
                }
            }
        }
        private Zetbox.App.Test.TestEnum _TestEnum;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestEnum_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string TestString
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestString;
                if (OnTestString_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTestString_Getter(this, __e);
                    __result = _TestString = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestString != value)
                {
                    var __oldValue = _TestString;
                    var __newValue = value;
                    if (OnTestString_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestString", __oldValue, __newValue);
                    _TestString = __newValue;
                    NotifyPropertyChanged("TestString", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestString_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestString");
                }
            }
        }
        private string _TestString;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestString_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah)obj;
            var otherImpl = (MuhblahMemoryImpl)obj;
            var me = (Muhblah)this;

            SynchronizeCollections(this._StringCollectionCollection, otherImpl._StringCollectionCollection);
            me.TestBool = other.TestBool;
            me.TestDateTime = other.TestDateTime;
            me.TestEnum = other.TestEnum;
            me.TestString = other.TestString;
            this._fk_TestCustomObjects_Nav = otherImpl._fk_TestCustomObjects_Nav;
            this._fk_TestCustomObjects_One_Nav = otherImpl._fk_TestCustomObjects_One_Nav;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "TestCustomObjects_Nav":
                    {
                        var __oldValue = _fk_TestCustomObjects_Nav;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("TestCustomObjects_Nav", __oldValue, __newValue);
                        _fk_TestCustomObjects_Nav = __newValue;
                        NotifyPropertyChanged("TestCustomObjects_Nav", __oldValue, __newValue);
                    }
                    break;
                case "TestCustomObjects_One_Nav":
                    {
                        var __oldValue = _fk_TestCustomObjects_One_Nav;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("TestCustomObjects_One_Nav", __oldValue, __newValue);
                        _fk_TestCustomObjects_One_Nav = __newValue;
                        NotifyPropertyChanged("TestCustomObjects_One_Nav", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "TestBool":
                case "TestCustomObjects_Nav":
                case "TestCustomObjects_One_Nav":
                case "TestDateTime":
                case "TestEnum":
                case "TestString":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "TestCustomObjects_List_Nav":
                case "TestCustomObjects_ManyList_Nav":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "TestCustomObjects_List_Nav":
                return TriggerFetchTestCustomObjects_List_NavAsync();
            case "TestCustomObjects_ManyList_Nav":
                return TriggerFetchTestCustomObjects_ManyList_NavAsync();
            case "TestCustomObjects_Nav":
                return TriggerFetchTestCustomObjects_NavAsync();
            case "TestCustomObjects_One_Nav":
                return TriggerFetchTestCustomObjects_One_NavAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_TestCustomObjects_Nav.HasValue)
                TestCustomObjects_NavImpl = (Zetbox.App.Test.TestCustomObjectMemoryImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_Nav.Value);
            else
                TestCustomObjects_NavImpl = null;

            if (_fk_TestCustomObjects_One_Nav.HasValue)
                TestCustomObjects_One_NavImpl = (Zetbox.App.Test.TestCustomObjectMemoryImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_One_Nav.Value);
            else
                TestCustomObjects_One_NavImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Muhblah, ICollection<string>>(
                        lazyCtx,
                        new Guid("b89fc0d2-8603-40d7-8649-61431a9fb09b"),
                        "StringCollection",
                        null,
                        obj => obj.StringCollection,
                        null, // lists are read-only properties
                        obj => OnStringCollection_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, bool?>(
                        lazyCtx,
                        new Guid("9206e71e-85ea-4d74-85ea-59ee2484ed2a"),
                        "TestBool",
                        null,
                        obj => obj.TestBool,
                        (obj, val) => obj.TestBool = val,
						obj => OnTestBool_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Muhblah, ICollection<Zetbox.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("1f944324-673f-4f14-94c8-dc570ea3022d"),
                        "TestCustomObjects_List_Nav",
                        null,
                        obj => obj.TestCustomObjects_List_Nav,
                        null, // lists are read-only properties
                        obj => OnTestCustomObjects_List_Nav_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Muhblah, ICollection<Zetbox.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("a3ad7340-4dc1-488c-bc9a-29ac931b1f0d"),
                        "TestCustomObjects_ManyList_Nav",
                        null,
                        obj => obj.TestCustomObjects_ManyList_Nav,
                        null, // lists are read-only properties
                        obj => OnTestCustomObjects_ManyList_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, Zetbox.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("aabd7cb7-c45e-43c9-97fd-76e50c310ab3"),
                        "TestCustomObjects_Nav",
                        null,
                        obj => obj.TestCustomObjects_Nav,
                        (obj, val) => obj.TestCustomObjects_Nav = val,
						obj => OnTestCustomObjects_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, Zetbox.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("42c6bc2f-0428-488a-b928-539c4c6e3e65"),
                        "TestCustomObjects_One_Nav",
                        null,
                        obj => obj.TestCustomObjects_One_Nav,
                        (obj, val) => obj.TestCustomObjects_One_Nav = val,
						obj => OnTestCustomObjects_One_Nav_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, DateTime?>(
                        lazyCtx,
                        new Guid("c5a66e0b-1fdb-45e4-b9e4-2ae4ee35a201"),
                        "TestDateTime",
                        null,
                        obj => obj.TestDateTime,
                        (obj, val) => obj.TestDateTime = val,
						obj => OnTestDateTime_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, Zetbox.App.Test.TestEnum>(
                        lazyCtx,
                        new Guid("1a5484e4-4be0-4641-9c25-1aa30d1c0e7a"),
                        "TestEnum",
                        null,
                        obj => obj.TestEnum,
                        (obj, val) => obj.TestEnum = val,
						obj => OnTestEnum_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Muhblah, string>(
                        lazyCtx,
                        new Guid("e9516350-fa66-426b-808a-bd8a5f432427"),
                        "TestString",
                        null,
                        obj => obj.TestString,
                        (obj, val) => obj.TestString = val,
						obj => OnTestString_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Muhblah")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Muhblah != null)
            {
                OnToString_Muhblah(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Muhblah> OnToString_Muhblah;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Muhblah")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Muhblah != null)
            {
                OnObjectIsValid_Muhblah(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Muhblah> OnObjectIsValid_Muhblah;

        [EventBasedMethod("OnNotifyPreSave_Muhblah")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Muhblah != null) OnNotifyPreSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyPreSave_Muhblah;

        [EventBasedMethod("OnNotifyPostSave_Muhblah")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Muhblah != null) OnNotifyPostSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyPostSave_Muhblah;

        [EventBasedMethod("OnNotifyCreated_Muhblah")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("TestBool");
            SetNotInitializedProperty("TestCustomObjects_Nav");
            SetNotInitializedProperty("TestCustomObjects_One_Nav");
            SetNotInitializedProperty("TestDateTime");
            SetNotInitializedProperty("TestEnum");
            SetNotInitializedProperty("TestString");
            base.NotifyCreated();
            if (OnNotifyCreated_Muhblah != null) OnNotifyCreated_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyCreated_Muhblah;

        [EventBasedMethod("OnNotifyDeleting_Muhblah")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Muhblah != null) OnNotifyDeleting_Muhblah(this);
            StringCollection.Clear();
            TestCustomObjects_List_Nav.Clear();
            TestCustomObjects_ManyList_Nav.Clear();
            TestCustomObjects_Nav = null;
            TestCustomObjects_One_Nav = null;
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyDeleting_Muhblah;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.WriteCollectionEntries(this._StringCollectionCollection);
            binStream.Write(this._TestBool);
            binStream.Write(TestCustomObjects_Nav != null ? TestCustomObjects_Nav.ID : (int?)null);
            binStream.Write(TestCustomObjects_One_Nav != null ? TestCustomObjects_One_Nav.ID : (int?)null);
            binStream.Write(this._TestDateTime);
            binStream.Write((int?)this._TestEnum);
            binStream.Write(this._TestString);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.ReadCollectionEntries(this, this._StringCollectionCollection);
            this._TestBool = binStream.ReadNullableBoolean();
            this._fk_TestCustomObjects_Nav = binStream.ReadNullableInt32();
            this._fk_TestCustomObjects_One_Nav = binStream.ReadNullableInt32();
            this._TestDateTime = binStream.ReadNullableDateTime();
            this._TestEnum = (Zetbox.App.Test.TestEnum)binStream.ReadNullableInt32();
            this._TestString = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}
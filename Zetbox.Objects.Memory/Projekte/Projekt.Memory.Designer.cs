// <autogenerated/>

namespace Zetbox.App.Projekte
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Projekt")]
    public class ProjektMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Projekt, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("885939e8-82e1-4fdf-b80e-5f612d5131d3");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public ProjektMemoryImpl()
            : base(null)
        {
        }

        public ProjektMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Eine Liste der Änderungen an diesem Datensatz.
        /// </summary>
        // CompoundObject list property
		// Zetbox.Generator.Templates.Properties.ValueCollectionProperty
		public ICollection<Zetbox.App.Base.AuditEntry> AuditJournal
		{
			get
			{
				if (_AuditJournal == null)
				{
				    _AuditJournal 
				        = new ClientValueCollectionWrapper<Projekt, Zetbox.App.Base.AuditEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl>>(
							this.Context,
				            this, 
				            () => { this.NotifyPropertyChanged("AuditJournal", null, null); if(OnAuditJournal_PostSetter != null && IsAttached) OnAuditJournal_PostSetter(this); },
				            _AuditJournalCollection);
				}
				return _AuditJournal;
			}
		}

		private ClientValueCollectionWrapper<Projekt, Zetbox.App.Base.AuditEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntry, Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl>> _AuditJournal;
		private ObservableCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl> _AuditJournalCollection = new ObservableCollection<Zetbox.App.Projekte.Projekt_AuditJournal_CollectionEntryMemoryImpl>();
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnAuditJournal_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnAuditJournal_IsValid;

        /// <summary>
        /// Aufträge
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Projekte.Auftrag> Auftraege
        {
            get
            {
                if (_Auftraege == null)
                {
                    TriggerFetchAuftraegeAsync().Wait();
                }
                return _Auftraege;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchAuftraegeTask;
        public Zetbox.API.Async.ZbTask TriggerFetchAuftraegeAsync()
        {
            if (_triggerFetchAuftraegeTask != null) return _triggerFetchAuftraegeTask;

            List<Zetbox.App.Projekte.Auftrag> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                _triggerFetchAuftraegeTask = Context.GetListOfAsync<Zetbox.App.Projekte.Auftrag>(this, "Auftraege")
                    .OnResult(t =>
                    {
                        serverList = t.Result;
                    });
            }
            else
            {
                _triggerFetchAuftraegeTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Projekte.Auftrag>();
                });
            }

            _triggerFetchAuftraegeTask.OnResult(t =>
            {
                _Auftraege = new OneNRelationList<Zetbox.App.Projekte.Auftrag>(
                    "Projekt",
                    null,
                    this,
                    OnAuftraegeCollectionChanged,
                    serverList);
            });
            return _triggerFetchAuftraegeTask;
        }

        internal void OnAuftraegeCollectionChanged()
        {
            NotifyPropertyChanged("Auftraege", null, null);
            if (OnAuftraege_PostSetter != null && IsAttached)
                OnAuftraege_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Projekte.Auftrag> _Auftraege;
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnAuftraege_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnAuftraege_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public double? AufwandGes
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AufwandGes;
                if (_AufwandGes_IsDirty && OnAufwandGes_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<double?>(__result);
                    OnAufwandGes_Getter(this, __e);
                    _AufwandGes_IsDirty = false;
                    __result = _AufwandGes = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_AufwandGes != value)
                {
                    var __oldValue = _AufwandGes;
                    var __newValue = value;
                    NotifyPropertyChanging("AufwandGes", __oldValue, __newValue);
                    _AufwandGes = __newValue;
                    NotifyPropertyChanged("AufwandGes", __oldValue, __newValue);
                    _AufwandGes_IsDirty = false;

                }
                else
                {
                    SetInitializedProperty("AufwandGes");
                }
            }
        }
        private double? _AufwandGes;
        private bool _AufwandGes_IsDirty = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, double?> OnAufwandGes_Getter;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? Bis
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Bis;
                if (OnBis_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnBis_Getter(this, __e);
                    __result = _Bis = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Bis != value)
                {
                    var __oldValue = _Bis;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnBis_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBis_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Bis", __oldValue, __newValue);
                    _Bis = __newValue;
                    NotifyPropertyChanged("Bis", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnBis_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnBis_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Bis");
                }
            }
        }
        private DateTime? _Bis;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnBis_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnBis_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d1f821b0-5991-44a7-9c4d-8be66834ea9c"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Projekt.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("7119febf-e750-411f-a4f2-5a2181e45dc7"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Projekt.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("df36d615-9f6e-4075-ae1c-8c5cd8a4ef91"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Projekt.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime KickOffAm
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _KickOffAm;
                if (OnKickOffAm_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnKickOffAm_Getter(this, __e);
                    __result = _KickOffAm = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_KickOffAm != value)
                {
                    var __oldValue = _KickOffAm;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnKickOffAm_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnKickOffAm_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("KickOffAm", __oldValue, __newValue);
                    _KickOffAm = __newValue;
                    NotifyPropertyChanged("KickOffAm", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKickOffAm_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnKickOffAm_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("KickOffAm");
                }
            }
        }
        private DateTime _KickOffAm;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnKickOffAm_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKickOffAm_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime? KickOffBis
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _KickOffBis;
                if (OnKickOffBis_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnKickOffBis_Getter(this, __e);
                    __result = _KickOffBis = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_KickOffBis != value)
                {
                    var __oldValue = _KickOffBis;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnKickOffBis_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnKickOffBis_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("KickOffBis", __oldValue, __newValue);
                    _KickOffBis = __newValue;
                    NotifyPropertyChanged("KickOffBis", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKickOffBis_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnKickOffBis_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("KickOffBis");
                }
            }
        }
        private DateTime? _KickOffBis;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime?> OnKickOffBis_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKickOffBis_IsValid;

        /// <summary>
        /// Bitte geben Sie den Kundennamen ein
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Kundenname
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Kundenname;
                if (OnKundenname_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnKundenname_Getter(this, __e);
                    __result = _Kundenname = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Kundenname != value)
                {
                    var __oldValue = _Kundenname;
                    var __newValue = value;
                    if (OnKundenname_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Kundenname", __oldValue, __newValue);
                    _Kundenname = __newValue;
                    NotifyPropertyChanged("Kundenname", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKundenname_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Kundenname");
                }
            }
        }
        private string _Kundenname;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, string> OnKundenname_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnKundenname_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // collection entry list property
        // BEGIN Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Mitarbeiter
        public IList<Zetbox.App.Projekte.Mitarbeiter> Mitarbeiter
        {
            get
            {
                if (_Mitarbeiter == null)
                {
                    TriggerFetchMitarbeiterAsync().Wait();
                }
                return (IList<Zetbox.App.Projekte.Mitarbeiter>)_Mitarbeiter;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchMitarbeiterTask;
        public Zetbox.API.Async.ZbTask TriggerFetchMitarbeiterAsync()
        {
            if (_triggerFetchMitarbeiterTask != null) return _triggerFetchMitarbeiterTask;
            _triggerFetchMitarbeiterTask = Context.FetchRelationAsync<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl>(new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e"), RelationEndRole.A, this);
            _triggerFetchMitarbeiterTask.OnResult(r =>
            {
                _Mitarbeiter
                    = new ObservableBSideListWrapper<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl, ICollection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl>>(
                        this,
                        new RelationshipFilterASideCollection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl>(this.Context, this));
                        // _Mitarbeiter.CollectionChanged is managed by OnMitarbeiterCollectionChanged() and called from the RelationEntry
            });
            return _triggerFetchMitarbeiterTask;
        }

        internal void OnMitarbeiterCollectionChanged()
        {
            NotifyPropertyChanged("Mitarbeiter", null, null);
            if (OnMitarbeiter_PostSetter != null && IsAttached)
                OnMitarbeiter_PostSetter(this);
        }

        private ObservableBSideListWrapper<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl, ICollection<Zetbox.App.Projekte.Projekte_haben_Mitarbeiter_RelationEntryMemoryImpl>> _Mitarbeiter;
        // END Zetbox.Generator.Templates.Properties.CollectionEntryListProperty for Mitarbeiter
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnMitarbeiter_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnMitarbeiter_IsValid;

        /// <summary>
        /// Projektname
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // object list property
        // Zetbox.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Projekte.Task> Tasks
        {
            get
            {
                if (_Tasks == null)
                {
                    TriggerFetchTasksAsync().Wait();
                }
                return _Tasks;
            }
        }

        Zetbox.API.Async.ZbTask _triggerFetchTasksTask;
        public Zetbox.API.Async.ZbTask TriggerFetchTasksAsync()
        {
            if (_triggerFetchTasksTask != null) return _triggerFetchTasksTask;

            List<Zetbox.App.Projekte.Task> serverList = null;
            if (Helper.IsPersistedObject(this))
            {
                _triggerFetchTasksTask = Context.GetListOfAsync<Zetbox.App.Projekte.Task>(this, "Tasks")
                    .OnResult(t =>
                    {
                        serverList = t.Result;
                    });
            }
            else
            {
                _triggerFetchTasksTask = new Zetbox.API.Async.ZbTask(Zetbox.API.Async.ZbTask.Synchron, () =>
                {
                    serverList = new List<Zetbox.App.Projekte.Task>();
                });
            }

            _triggerFetchTasksTask.OnResult(t =>
            {
                _Tasks = new OneNRelationList<Zetbox.App.Projekte.Task>(
                    "Projekt",
                    null,
                    this,
                    OnTasksCollectionChanged,
                    serverList);
            });
            return _triggerFetchTasksTask;
        }

        internal void OnTasksCollectionChanged()
        {
            NotifyPropertyChanged("Tasks", null, null);
            if (OnTasks_PostSetter != null && IsAttached)
                OnTasks_PostSetter(this);
        }

        private OneNRelationList<Zetbox.App.Projekte.Task> _Tasks;
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Projekt> OnTasks_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnTasks_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime Von
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Von;
                if (OnVon_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnVon_Getter(this, __e);
                    __result = _Von = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Von != value)
                {
                    var __oldValue = _Von;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnVon_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnVon_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Von", __oldValue, __newValue);
                    _Von = __newValue;
                    NotifyPropertyChanged("Von", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnVon_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnVon_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Von");
                }
            }
        }
        private DateTime _Von;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Projekt, DateTime> OnVon_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Projekt> OnVon_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetFulltextIndexBody_Projekt")]
        public virtual string GetFulltextIndexBody()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetFulltextIndexBody_Projekt != null)
            {
                OnGetFulltextIndexBody_Projekt(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Projekt.GetFulltextIndexBody");
            }
            return e.Result;
        }
        public delegate void GetFulltextIndexBody_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetFulltextIndexBody_Handler<Projekt> OnGetFulltextIndexBody_Projekt;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Projekt> OnGetFulltextIndexBody_Projekt_CanExec;

        [EventBasedMethod("OnGetFulltextIndexBody_Projekt_CanExec")]
        public virtual bool GetFulltextIndexBodyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetFulltextIndexBody_Projekt_CanExec != null)
				{
					OnGetFulltextIndexBody_Projekt_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Projekt> OnGetFulltextIndexBody_Projekt_CanExecReason;

        [EventBasedMethod("OnGetFulltextIndexBody_Projekt_CanExecReason")]
        public virtual string GetFulltextIndexBodyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetFulltextIndexBody_Projekt_CanExecReason != null)
				{
					OnGetFulltextIndexBody_Projekt_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetSummaryReport_Projekt")]
        public virtual System.Object GetSummaryReport(string title, Zetbox.App.Base.DateTimeRange range)
        {
            var e = new MethodReturnEventArgs<System.Object>();
            if (OnGetSummaryReport_Projekt != null)
            {
                OnGetSummaryReport_Projekt(this, e, title, range);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Projekt.GetSummaryReport");
            }
            return e.Result;
        }
        public delegate void GetSummaryReport_Handler<T>(T obj, MethodReturnEventArgs<System.Object> ret, string title, Zetbox.App.Base.DateTimeRange range);
        public static event GetSummaryReport_Handler<Projekt> OnGetSummaryReport_Projekt;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Projekt> OnGetSummaryReport_Projekt_CanExec;

        [EventBasedMethod("OnGetSummaryReport_Projekt_CanExec")]
        public virtual bool GetSummaryReportCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetSummaryReport_Projekt_CanExec != null)
				{
					OnGetSummaryReport_Projekt_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Projekt> OnGetSummaryReport_Projekt_CanExecReason;

        [EventBasedMethod("OnGetSummaryReport_Projekt_CanExecReason")]
        public virtual string GetSummaryReportCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetSummaryReport_Projekt_CanExecReason != null)
				{
					OnGetSummaryReport_Projekt_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt)obj;
            var otherImpl = (ProjektMemoryImpl)obj;
            var me = (Projekt)this;

            this.AufwandGes = otherImpl.AufwandGes;
            me.Bis = other.Bis;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.KickOffAm = other.KickOffAm;
            me.KickOffBis = other.KickOffBis;
            me.Kundenname = other.Kundenname;
            me.Name = other.Name;
            me.Von = other.Von;
            SynchronizeCollections(this._AuditJournalCollection, otherImpl._AuditJournalCollection);
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
            _AufwandGes_IsDirty = true;
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Bis":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "KickOffAm":
                case "KickOffBis":
                case "Kundenname":
                case "Name":
                case "Von":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "AufwandGes":
                    NotifyPropertyChanging(property, null, null);
                    _AufwandGes_IsDirty = true;
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Auftraege":
                case "Mitarbeiter":
                case "Tasks":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "Auftraege":
                return TriggerFetchAuftraegeAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Mitarbeiter":
                return TriggerFetchMitarbeiterAsync();
            case "Tasks":
                return TriggerFetchTasksAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Projekt, ICollection<Zetbox.App.Base.AuditEntry>>(
                        lazyCtx,
                        new Guid("4bef0e48-79c8-4776-a5de-bbb250599a40"),
                        "AuditJournal",
                        null,
                        obj => obj.AuditJournal,
                        null, // lists are read-only properties
                        obj => OnAuditJournal_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Projekt, ICollection<Zetbox.App.Projekte.Auftrag>>(
                        lazyCtx,
                        new Guid("30a1d8b6-4db5-45a0-a9a8-531472a9107e"),
                        "Auftraege",
                        null,
                        obj => obj.Auftraege,
                        null, // lists are read-only properties
                        obj => OnAuftraege_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, double?>(
                        lazyCtx,
                        new Guid("a26cec7d-1e5c-44f5-9c56-92af595739eb"),
                        "AufwandGes",
                        null,
                        obj => obj.AufwandGes,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime?>(
                        lazyCtx,
                        new Guid("b1e079e3-9236-4774-8f21-7b2abfcf9fb0"),
                        "Bis",
                        null,
                        obj => obj.Bis,
                        (obj, val) => obj.Bis = val,
						obj => OnBis_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("2fe9d894-c359-412f-b787-d3ed3a26a0a2"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("d1f821b0-5991-44a7-9c4d-8be66834ea9c"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("fbe34f93-21ec-470a-b9d4-6e4664729466"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("7119febf-e750-411f-a4f2-5a2181e45dc7"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, Guid>(
                        lazyCtx,
                        new Guid("df36d615-9f6e-4075-ae1c-8c5cd8a4ef91"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("d9b9e70b-e9d2-4da4-8731-a4eee7bf6d87"),
                        "KickOffAm",
                        null,
                        obj => obj.KickOffAm,
                        (obj, val) => obj.KickOffAm = val,
						obj => OnKickOffAm_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime?>(
                        lazyCtx,
                        new Guid("a5057dbd-bd31-4e0a-81c2-e0fa551fa34d"),
                        "KickOffBis",
                        null,
                        obj => obj.KickOffBis,
                        (obj, val) => obj.KickOffBis = val,
						obj => OnKickOffBis_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, string>(
                        lazyCtx,
                        new Guid("cd6be045-d1bd-4086-b848-c83249f5ca9b"),
                        "Kundenname",
                        null,
                        obj => obj.Kundenname,
                        (obj, val) => obj.Kundenname = val,
						obj => OnKundenname_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Projekt, IList<Zetbox.App.Projekte.Mitarbeiter>>(
                        lazyCtx,
                        new Guid("3e60fe29-ac50-4232-bbeb-af023ede02f6"),
                        "Mitarbeiter",
                        null,
                        obj => obj.Mitarbeiter,
                        null, // lists are read-only properties
                        obj => OnMitarbeiter_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, string>(
                        lazyCtx,
                        new Guid("b5482479-fd14-4990-86f4-49872e2eeeb8"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Projekt, ICollection<Zetbox.App.Projekte.Task>>(
                        lazyCtx,
                        new Guid("f6ff71b0-ccaf-4c7d-8e2b-1210a9df4b0f"),
                        "Tasks",
                        null,
                        obj => obj.Tasks,
                        null, // lists are read-only properties
                        obj => OnTasks_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Projekt, DateTime>(
                        lazyCtx,
                        new Guid("94ea407f-9816-470e-9e52-6607830c7c0b"),
                        "Von",
                        null,
                        obj => obj.Von,
                        (obj, val) => obj.Von = val,
						obj => OnVon_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Projekt")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Projekt != null)
            {
                OnToString_Projekt(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Projekt> OnToString_Projekt;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Projekt")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Projekt != null)
            {
                OnObjectIsValid_Projekt(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Projekt> OnObjectIsValid_Projekt;

        [EventBasedMethod("OnNotifyPreSave_Projekt")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Projekt != null) OnNotifyPreSave_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyPreSave_Projekt;

        [EventBasedMethod("OnNotifyPostSave_Projekt")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Projekt != null) OnNotifyPostSave_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyPostSave_Projekt;

        [EventBasedMethod("OnNotifyCreated_Projekt")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Bis");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("KickOffAm");
            SetNotInitializedProperty("KickOffBis");
            SetNotInitializedProperty("Kundenname");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Von");
            _AufwandGes_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Projekt != null) OnNotifyCreated_Projekt(this);
        }
        public static event ObjectEventHandler<Projekt> OnNotifyCreated_Projekt;

        [EventBasedMethod("OnNotifyDeleting_Projekt")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Projekt != null) OnNotifyDeleting_Projekt(this);
            AuditJournal.Clear();
            Auftraege.Clear();
            Mitarbeiter.Clear();
            Tasks.Clear();
            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Projekt> OnNotifyDeleting_Projekt;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.WriteCollectionEntries(this._AuditJournalCollection);
            binStream.Write(this._AufwandGes);
            binStream.Write(this._Bis);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._KickOffAm);
            binStream.Write(this._KickOffBis);
            binStream.Write(this._Kundenname);
            binStream.Write(this._Name);
            binStream.Write(this._Von);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.ReadCollectionEntries(this, this._AuditJournalCollection);
            this._AufwandGes = binStream.ReadNullableDouble();
            this._Bis = binStream.ReadNullableDateTime();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._KickOffAm = binStream.ReadDateTime();
            this._KickOffBis = binStream.ReadNullableDateTime();
            this._Kundenname = binStream.ReadString();
            this._Name = binStream.ReadString();
            this._Von = binStream.ReadDateTime();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ExportCollectionEntries(this._AuditJournalCollection.OrderBy(i => i.Value), xml, "AuditJournal", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._AufwandGes, xml, "AufwandGes", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Bis, xml, "Bis", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._KickOffAm, xml, "KickOffAm", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._KickOffBis, xml, "KickOffBis", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Kundenname, xml, "Kundenname", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Von, xml, "Von", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|AuditJournal":
                XmlStreamer.MergeImportCollectionEntries(this, this._AuditJournalCollection, xml);
                break;
            case "Zetbox.App.Projekte|AufwandGes":
                this._AufwandGes = XmlStreamer.ReadNullableDouble(xml);
                break;
            case "Zetbox.App.Projekte|Bis":
                this._Bis = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Projekte|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Projekte|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Projekte|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Projekte|KickOffAm":
                this._KickOffAm = XmlStreamer.ReadDateTime(xml);
                break;
            case "Zetbox.App.Projekte|KickOffBis":
                this._KickOffBis = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Projekte|Kundenname":
                this._Kundenname = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Von":
                this._Von = XmlStreamer.ReadDateTime(xml);
                break;
            }
        }

        #endregion

    }
}
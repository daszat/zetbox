// <autogenerated/>

namespace Zetbox.App.Projekte
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using Zetbox.DalProvider.Base;
    using Zetbox.DalProvider.Memory;

    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerDisplay("Kunde")]
    public class KundeMemoryImpl : Zetbox.DalProvider.Memory.DataObjectMemoryImpl, Kunde, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("b9ddd097-4f45-40c5-87e9-7331ab58727c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public KundeMemoryImpl()
            : base(null)
        {
        }

        public KundeMemoryImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Adresse &amp;amp; Hausnummer
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Adresse
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Adresse;
                if (OnAdresse_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnAdresse_Getter(this, __e);
                    __result = _Adresse = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Adresse != value)
                {
                    var __oldValue = _Adresse;
                    var __newValue = value;
                    if (OnAdresse_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnAdresse_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Adresse", __oldValue, __newValue);
                    _Adresse = __newValue;
                    NotifyPropertyChanged("Adresse", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAdresse_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnAdresse_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Adresse");
                }
            }
        }
        private string _Adresse;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, string> OnAdresse_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, string> OnAdresse_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, string> OnAdresse_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnAdresse_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_ChangedByCache;

        private int? _fk_ChangedBy {
            get
            {
                return __fk_ChangedByCache;
            }
            set
            {
                __fk_ChangedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchChangedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return _fk_ChangedBy; }
			set { _fk_ChangedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchChangedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchChangedByAsync()
        {
            if (_triggerFetchChangedByTask != null) return _triggerFetchChangedByTask;

            if (_fk_ChangedBy.HasValue)
                _triggerFetchChangedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                _triggerFetchChangedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchChangedByTask.OnResult(t =>
            {
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnChangedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchChangedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl ChangedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchChangedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_ChangedBy == null) || (value != null && value.ID == _fk_ChangedBy))
                {
                    SetInitializedProperty("ChangedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = ChangedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_ChangedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnChangedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("028ff0b0-1beb-486d-b400-bfe3cdf73c5f"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kunde.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn;
        private bool _isChangedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Projekte;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable; does call events

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        private int? __fk_CreatedByCache;

        private int? _fk_CreatedBy {
            get
            {
                return __fk_CreatedByCache;
            }
            set
            {
                __fk_CreatedByCache = value;
                // Recreate task to clear it's cache
                _triggerFetchCreatedByTask = null;
            }
        }

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return _fk_CreatedBy; }
			set { _fk_CreatedBy = value; }
		}


        Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> _triggerFetchCreatedByTask;
        public Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity> TriggerFetchCreatedByAsync()
        {
            if (_triggerFetchCreatedByTask != null) return _triggerFetchCreatedByTask;

            if (_fk_CreatedBy.HasValue)
                _triggerFetchCreatedByTask = Context.FindAsync<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                _triggerFetchCreatedByTask = new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(Zetbox.API.Async.ZbTask.Synchron, () => null);

            _triggerFetchCreatedByTask.OnResult(t =>
            {
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(t.Result);
                    OnCreatedBy_Getter(this, e);
                    t.Result = e.Result;
                }
            });

            return _triggerFetchCreatedByTask;
        }

        // internal implementation
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        internal Zetbox.App.Base.IdentityMemoryImpl CreatedByImpl
        {
            get
            {
                return (Zetbox.App.Base.IdentityMemoryImpl)TriggerFetchCreatedByAsync().Result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                // shortcut noops
                if ((value == null && _fk_CreatedBy == null) || (value != null && value.ID == _fk_CreatedBy))
                {
                    SetInitializedProperty("CreatedBy");
                    return;
                }

                // cache old value to remove inverse references later
                var __oldValue = CreatedByImpl;
                var __newValue = value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null && IsAttached)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityMemoryImpl)e.Result;
                }

                // next, set the local reference
                _fk_CreatedBy = __newValue == null ? (int?)null : __newValue.ID;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;

                if (OnCreatedBy_PostSetter != null && IsAttached)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }
            }
        }
        // END Zetbox.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("1c23561e-07d4-4363-8ceb-3b13f3125634"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kunde.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn;
        private bool _isCreatedOnSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnCreatedOn_IsValid;

        /// <summary>
        /// EMails des Kunden - können mehrere sein
        /// </summary>
        // value list property
		// Zetbox.Generator.Templates.Properties.ValueCollectionProperty
		public ICollection<string> EMails
		{
			get
			{
				if (_EMails == null)
				{
				    _EMails 
				        = new ClientValueCollectionWrapper<Kunde, string, Zetbox.App.Projekte.Kunde_EMails_CollectionEntry, Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl>>(
							this.Context,
				            this, 
				            () => { this.NotifyPropertyChanged("EMails", null, null); if(OnEMails_PostSetter != null && IsAttached) OnEMails_PostSetter(this); },
				            _EMailsCollection);
				}
				return _EMails;
			}
		}

		private ClientValueCollectionWrapper<Kunde, string, Zetbox.App.Projekte.Kunde_EMails_CollectionEntry, Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl, ObservableCollection<Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl>> _EMails;
		private ObservableCollection<Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl> _EMailsCollection = new ObservableCollection<Zetbox.App.Projekte.Kunde_EMails_CollectionEntryMemoryImpl>();
public static event PropertyListChangedHandler<Zetbox.App.Projekte.Kunde> OnEMails_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnEMails_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("01f74ef3-9369-4e29-a811-293fc27f7c27"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Kunde.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid;
        private bool _isExportGuidSet = false;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnExportGuid_IsValid;

        /// <summary>
        /// Name des Kunden
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Kundenname
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Kundenname;
                if (OnKundenname_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnKundenname_Getter(this, __e);
                    __result = _Kundenname = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Kundenname != value)
                {
                    var __oldValue = _Kundenname;
                    var __newValue = value;
                    if (OnKundenname_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Kundenname", __oldValue, __newValue);
                    _Kundenname = __newValue;
                    NotifyPropertyChanged("Kundenname", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnKundenname_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnKundenname_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Kundenname");
                }
            }
        }
        private string _Kundenname;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, string> OnKundenname_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, string> OnKundenname_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, string> OnKundenname_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnKundenname_IsValid;

        /// <summary>
        /// Land
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Land
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Land;
                if (OnLand_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLand_Getter(this, __e);
                    __result = _Land = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Land != value)
                {
                    var __oldValue = _Land;
                    var __newValue = value;
                    if (OnLand_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLand_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Land", __oldValue, __newValue);
                    _Land = __newValue;
                    NotifyPropertyChanged("Land", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLand_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLand_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Land");
                }
            }
        }
        private string _Land;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, string> OnLand_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, string> OnLand_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, string> OnLand_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnLand_IsValid;

        /// <summary>
        /// Ort
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string Ort
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Ort;
                if (OnOrt_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnOrt_Getter(this, __e);
                    __result = _Ort = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Ort != value)
                {
                    var __oldValue = _Ort;
                    var __newValue = value;
                    if (OnOrt_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnOrt_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Ort", __oldValue, __newValue);
                    _Ort = __newValue;
                    NotifyPropertyChanged("Ort", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnOrt_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnOrt_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Ort");
                }
            }
        }
        private string _Ort;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, string> OnOrt_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, string> OnOrt_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, string> OnOrt_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnOrt_IsValid;

        /// <summary>
        /// Postleitzahl
        /// </summary>
        // value type property
        // BEGIN Zetbox.Generator.Templates.Properties.NotifyingDataProperty
        public string PLZ
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _PLZ;
                if (OnPLZ_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnPLZ_Getter(this, __e);
                    __result = _PLZ = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_PLZ != value)
                {
                    var __oldValue = _PLZ;
                    var __newValue = value;
                    if (OnPLZ_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnPLZ_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("PLZ", __oldValue, __newValue);
                    _PLZ = __newValue;
                    NotifyPropertyChanged("PLZ", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnPLZ_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnPLZ_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("PLZ");
                }
            }
        }
        private string _PLZ;
        // END Zetbox.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Projekte.Kunde, string> OnPLZ_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Projekte.Kunde, string> OnPLZ_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Projekte.Kunde, string> OnPLZ_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Projekte.Kunde> OnPLZ_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Kunde);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Kunde)obj;
            var otherImpl = (KundeMemoryImpl)obj;
            var me = (Kunde)this;

            me.Adresse = other.Adresse;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            SynchronizeCollections(this._EMailsCollection, otherImpl._EMailsCollection);
            me.ExportGuid = other.ExportGuid;
            me.Kundenname = other.Kundenname;
            me.Land = other.Land;
            me.Ort = other.Ort;
            me.PLZ = other.PLZ;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
        }
        public override void SetNew()
        {
            base.SetNew();
        }

        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "ChangedBy":
                    {
                        var __oldValue = _fk_ChangedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);
                        _fk_ChangedBy = __newValue;
                        NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                    }
                    break;
                case "CreatedBy":
                    {
                        var __oldValue = _fk_CreatedBy;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);
                        _fk_CreatedBy = __newValue;
                        NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
        #region Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "Adresse":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "Kundenname":
                case "Land":
                case "Ort":
                case "PLZ":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityMemoryImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, string>(
                        lazyCtx,
                        new Guid("7ba07561-15f4-495a-b2eb-59006e4210e5"),
                        "Adresse",
                        null,
                        obj => obj.Adresse,
                        (obj, val) => obj.Adresse = val,
						obj => OnAdresse_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d2148600-ebba-4782-8379-a8b03a31362b"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, DateTime>(
                        lazyCtx,
                        new Guid("028ff0b0-1beb-486d-b400-bfe3cdf73c5f"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("acc46d95-0f07-40cd-b2b1-79d093d6e7b4"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, DateTime>(
                        lazyCtx,
                        new Guid("1c23561e-07d4-4363-8ceb-3b13f3125634"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorMemoryImpl<Kunde, ICollection<string>>(
                        lazyCtx,
                        new Guid("1d0f6da6-4b69-48d7-9e94-bfb5466654b9"),
                        "EMails",
                        null,
                        obj => obj.EMails,
                        null, // lists are read-only properties
                        obj => OnEMails_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, Guid>(
                        lazyCtx,
                        new Guid("01f74ef3-9369-4e29-a811-293fc27f7c27"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, string>(
                        lazyCtx,
                        new Guid("2817a845-b2d5-43ed-b0f1-5a6692a62183"),
                        "Kundenname",
                        null,
                        obj => obj.Kundenname,
                        (obj, val) => obj.Kundenname = val,
						obj => OnKundenname_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, string>(
                        lazyCtx,
                        new Guid("c01afb40-9f28-494f-9058-9d0eca79a125"),
                        "Land",
                        null,
                        obj => obj.Land,
                        (obj, val) => obj.Land = val,
						obj => OnLand_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, string>(
                        lazyCtx,
                        new Guid("5281cbe0-8f63-4a2d-bb9e-2ee04588202d"),
                        "Ort",
                        null,
                        obj => obj.Ort,
                        (obj, val) => obj.Ort = val,
						obj => OnOrt_IsValid), 
                    // else
                    new PropertyDescriptorMemoryImpl<Kunde, string>(
                        lazyCtx,
                        new Guid("cafb4b93-4a1a-4753-8ec0-c65936a0d129"),
                        "PLZ",
                        null,
                        obj => obj.PLZ,
                        (obj, val) => obj.PLZ = val,
						obj => OnPLZ_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Kunde")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Kunde != null)
            {
                OnToString_Kunde(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Kunde> OnToString_Kunde;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Kunde")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Kunde != null)
            {
                OnObjectIsValid_Kunde(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Kunde> OnObjectIsValid_Kunde;

        [EventBasedMethod("OnNotifyPreSave_Kunde")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Kunde != null) OnNotifyPreSave_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnNotifyPreSave_Kunde;

        [EventBasedMethod("OnNotifyPostSave_Kunde")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Kunde != null) OnNotifyPostSave_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnNotifyPostSave_Kunde;

        [EventBasedMethod("OnNotifyCreated_Kunde")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("Adresse");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Kundenname");
            SetNotInitializedProperty("Land");
            SetNotInitializedProperty("Ort");
            SetNotInitializedProperty("PLZ");
            base.NotifyCreated();
            if (OnNotifyCreated_Kunde != null) OnNotifyCreated_Kunde(this);
        }
        public static event ObjectEventHandler<Kunde> OnNotifyCreated_Kunde;

        [EventBasedMethod("OnNotifyDeleting_Kunde")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Kunde != null) OnNotifyDeleting_Kunde(this);
            EMails.Clear();
            ChangedBy = null;
            CreatedBy = null;
        }
        public static event ObjectEventHandler<Kunde> OnNotifyDeleting_Kunde;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._Adresse);
            binStream.Write(ChangedBy != null ? ChangedBy.ID : (int?)null);
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(CreatedBy != null ? CreatedBy.ID : (int?)null);
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.WriteCollectionEntries(this._EMailsCollection);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._Kundenname);
            binStream.Write(this._Land);
            binStream.Write(this._Ort);
            binStream.Write(this._PLZ);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._Adresse = binStream.ReadString();
            this._fk_ChangedBy = binStream.ReadNullableInt32();
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._fk_CreatedBy = binStream.ReadNullableInt32();
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            binStream.ReadCollectionEntries(this, this._EMailsCollection);
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._Kundenname = binStream.ReadString();
            this._Land = binStream.ReadString();
            this._Ort = binStream.ReadString();
            this._PLZ = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Adresse, xml, "Adresse", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ExportCollectionEntries(this._EMailsCollection.OrderBy(i => i.Value), xml, "EMails", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Kundenname, xml, "Kundenname", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Land, xml, "Land", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Ort, xml, "Ort", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._PLZ, xml, "PLZ", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|Adresse":
                this._Adresse = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Projekte|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Projekte|EMails":
                XmlStreamer.MergeImportCollectionEntries(this, this._EMailsCollection, xml);
                break;
            case "Zetbox.App.Projekte|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Projekte|Kundenname":
                this._Kundenname = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Land":
                this._Land = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|Ort":
                this._Ort = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Projekte|PLZ":
                this._PLZ = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
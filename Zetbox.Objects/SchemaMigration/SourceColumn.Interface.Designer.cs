// <autogenerated/>

namespace Zetbox.App.SchemaMigration
{
    using System;
    using System.Collections.Generic;

    using Zetbox.API;

    /// <summary>
    /// 
    /// </summary>
    [Zetbox.API.DefinitionGuid("e921bb2f-2cac-46d1-a7f4-120bb1a4afe2")]
    public interface SourceColumn : IDataObject, Zetbox.App.Base.IChangedBy, Zetbox.App.Base.IExportable 
    {

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("66bcca34-2297-4e06-84e8-ff19c5d4af35")]
        string Comment {
            get;
            set;
        }


        /// <summary>
        /// In some cases, when joining across source tables, nulls should be compared as equals, instead of not. This is especially true, when &quot;null&quot; is used as a domain value.
        /// </summary>
        [Zetbox.API.DefinitionGuid("09607800-4b5c-4d8a-a0cf-b508986c2f17")]
        bool CompareNulls {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("78873431-d503-4192-b658-5c5bc6442180")]
        Zetbox.App.SchemaMigration.ColumnType DbType {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("6273444e-5309-4481-8d2a-99a7a8a1b059")]
        string Description {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>

        [Zetbox.API.DefinitionGuid("38dce431-bb65-44c5-b67a-1f28202e51d9")]
        [System.Runtime.Serialization.IgnoreDataMember]
        IList<Zetbox.App.Base.Property> DestinationProperty { get; }

        /// <summary>
        /// 
        /// </summary>

        [Zetbox.API.DefinitionGuid("a040ea6b-c105-4815-815b-e36f0778e4cb")]
        [System.Runtime.Serialization.IgnoreDataMember]
        ICollection<Zetbox.App.SchemaMigration.SourceEnum> EnumEntries { get; }

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("817ccb79-7051-4b09-8386-941a21575bfc")]
        bool? IsNullable {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("a27f7d36-fd56-4271-bac0-88e22bc65027")]
        string Name {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("4d6faa25-d610-4e23-b12f-7ee4c78da70b")]
		[System.Runtime.Serialization.IgnoreDataMember]
        Zetbox.App.SchemaMigration.SourceColumn References {
            get;
            set;
        }

		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
		int? FK_References 
		{ 
			get; 
			set;
		}

        /// <summary>
        /// 
        /// </summary>

        [Zetbox.API.DefinitionGuid("71bed80f-57ec-4038-a9a4-9aabc0c2f60d")]
        [System.Runtime.Serialization.IgnoreDataMember]
        ICollection<Zetbox.App.SchemaMigration.SourceColumn> Referers { get; }

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("5a1dc7f1-7743-4603-9b65-1b31ca17d55d")]
        int? Size {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("d1dca069-f6b5-4da1-beee-a51853c109ba")]
		[System.Runtime.Serialization.IgnoreDataMember]
        Zetbox.App.SchemaMigration.SourceTable SourceTable {
            get;
            set;
        }

		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
		int? FK_SourceTable 
		{ 
			get; 
			set;
		}

        /// <summary>
        /// 
        /// </summary>
        [Zetbox.API.DefinitionGuid("bba3aa19-0097-4692-b649-d51fbc626182")]
        Zetbox.App.SchemaMigration.MappingStatus? Status {
            get;
            set;
        }


        /// <summary>
        /// 
        /// </summary>
        void CreateProperty();
    }
}

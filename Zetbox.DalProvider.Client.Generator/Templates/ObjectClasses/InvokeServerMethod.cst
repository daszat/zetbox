<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="ObjectClasses.InvokeServerMethod"
    ClassName="Zetbox.DalProvider.Client.Generator.Templates.ObjectClasses.InvokeServerMethod"
    Inherits="Zetbox.Generator.Templates.ObjectClasses.Method" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
        // BEGIN <%= this.GetType() %>

        <%= GetModifiers() %> async <%= GetReturnType() %> <%= m.Name %>(<%= GetParameterDefinitions() %>)
<%
    var returnParam = m.Parameter.SingleOrDefault(parameter => parameter.IsReturnParameter);

    string argumentDefs = m.GetArguments();
    if (!String.IsNullOrEmpty(argumentDefs))
    {
        // add leading comma for later usage
        argumentDefs = ", " + argumentDefs;
    }

    string argumentTypes = m.GetArgumentTypes().Result;
    // add leading comma for later usage
    argumentTypes = "new Type[] {" + argumentTypes + "}";


    if (returnParam == null)
    {
%>
        {
            await Context.ClientInternals().InvokeServerMethod(this, "<%= m.Name %>", typeof(<%= GetNativeReturnType() %>), <%= argumentTypes%><%= argumentDefs %>);
        }
<%
    }
    else
    {
%>
        {
            return (<%= GetNativeReturnType() %>)await Context.ClientInternals().InvokeServerMethod(this, "<%= m.Name %>", typeof(<%= GetNativeReturnType() %>), <%= argumentTypes %><%= argumentDefs %>);
        }
<%
    }

if(index == 0) {
	// Only for first overload
	Zetbox.Generator.Templates.ObjectClasses.MethodCanExec.Call(Host, ctx, dt, m, eventName);
}
%>
        // END <%= this.GetType() %>

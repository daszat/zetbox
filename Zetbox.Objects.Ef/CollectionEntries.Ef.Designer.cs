// <autogenerated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;

using Zetbox.API;
using Zetbox.DalProvider.Base.RelationWrappers;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using Zetbox.API.Server;
using Zetbox.DalProvider.Ef;

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="ASide_connectsTo_BSide_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("ASide_connectsTo_BSide_RelationEntryEfImpl")]
    public class ASide_connectsTo_BSide_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Test.N_to_M_relations_A, Zetbox.App.Test.N_to_M_relations_AEfImpl, Zetbox.App.Test.N_to_M_relations_B, Zetbox.App.Test.N_to_M_relations_BEfImpl>, ASide_connectsTo_BSide_RelationEntry
    {
        [Obsolete]
        public ASide_connectsTo_BSide_RelationEntryEfImpl()
            : base(null)
        {
        }

        public ASide_connectsTo_BSide_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3555da6e-0e9b-4f7c-903e-a51f3cce7cd9");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.N_to_M_relations_A)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.N_to_M_relations_B)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.N_to_M_relations_A; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for BSideImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.N_to_M_relations_A A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Test.N_to_M_relations_AEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ASide_connectsTo_BSide_A", "ASide")]
        public Zetbox.App.Test.N_to_M_relations_AEfImpl AImpl
        {
            get
            {
                Zetbox.App.Test.N_to_M_relations_AEfImpl __value;
                EntityReference<Zetbox.App.Test.N_to_M_relations_AEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_AEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_A",
                        "ASide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.N_to_M_relations_AEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_AEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_A",
                        "ASide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.N_to_M_relations_AEfImpl __oldValue = (Zetbox.App.Test.N_to_M_relations_AEfImpl)r.Value;
                Zetbox.App.Test.N_to_M_relations_AEfImpl __newValue = (Zetbox.App.Test.N_to_M_relations_AEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetBSideImplCollection();
                if (__newValue != null) __newValue.GetBSideImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.N_to_M_relations_AEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.N_to_M_relations_A>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.N_to_M_relations_B; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for ASideImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.N_to_M_relations_B B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Test.N_to_M_relations_BEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ASide_connectsTo_BSide_B", "BSide")]
        public Zetbox.App.Test.N_to_M_relations_BEfImpl BImpl
        {
            get
            {
                Zetbox.App.Test.N_to_M_relations_BEfImpl __value;
                EntityReference<Zetbox.App.Test.N_to_M_relations_BEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_BEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_B",
                        "BSide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.N_to_M_relations_BEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_BEfImpl>(
                        "Model.FK_ASide_connectsTo_BSide_B",
                        "BSide");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.N_to_M_relations_BEfImpl __oldValue = (Zetbox.App.Test.N_to_M_relations_BEfImpl)r.Value;
                Zetbox.App.Test.N_to_M_relations_BEfImpl __newValue = (Zetbox.App.Test.N_to_M_relations_BEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetASideImplCollection();
                if (__newValue != null) __newValue.GetASideImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.N_to_M_relations_BEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.N_to_M_relations_B>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_AEfImpl>("Model.FK_ASide_connectsTo_BSide_A", "ASide");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.N_to_M_relations_BEfImpl>("Model.FK_ASide_connectsTo_BSide_B", "BSide");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ASide_connectsTo_BSide_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ASide_connectsTo_BSide_RelationEntryEfImpl)obj;
            var me = (ASide_connectsTo_BSide_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Test.N_to_M_relations_AEfImpl)Context.Find<Zetbox.App.Test.N_to_M_relations_A>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Test.N_to_M_relations_BEfImpl)Context.Find<Zetbox.App.Test.N_to_M_relations_B>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl")]
    public class CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.CalculatedObjectReferenceProperty, Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyEfImpl>, CalculatedReference_dependsOn_InputProperties_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl()
            : base(null)
        {
        }

        public CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("47595643-e8d0-48ef-82c7-2d24de8a784e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.CalculatedObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.CalculatedObjectReferenceProperty; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for InputsImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.CalculatedObjectReferenceProperty A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference")]
        public Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl __value;
                EntityReference<Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_A",
                        "CalculatedReference");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl __oldValue = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)r.Value;
                Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl __newValue = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetInputsImplCollection();
                if (__newValue != null) __newValue.GetInputsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.CalculatedObjectReferenceProperty>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties")]
        public Zetbox.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.PropertyEfImpl __value;
                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_CalculatedReference_dependsOn_InputProperties_B",
                        "InputProperties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.PropertyEfImpl __oldValue = (Zetbox.App.Base.PropertyEfImpl)r.Value;
                Zetbox.App.Base.PropertyEfImpl __newValue = (Zetbox.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Property>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_A", "CalculatedReference");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(A);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>("Model.FK_CalculatedReference_dependsOn_InputProperties_B", "InputProperties");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(CalculatedReference_dependsOn_InputProperties_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl)obj;
            var me = (CalculatedReference_dependsOn_InputProperties_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.CalculatedObjectReferenceProperty>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.CalculatedObjectReferencePropertyEfImpl)Context.Find<Zetbox.App.Base.CalculatedObjectReferenceProperty>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.Find<Zetbox.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Calendar
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Calendar_shared_r_GroupReaders_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Calendar_shared_r_GroupReaders_RelationEntryEfImpl")]
    public class Calendar_shared_r_GroupReaders_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Calendar.CalendarBookEfImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupEfImpl>, Calendar_shared_r_GroupReaders_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public Calendar_shared_r_GroupReaders_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Calendar_shared_r_GroupReaders_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("775789a3-032e-478e-a01e-ec9f51580c5d");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Calendar.CalendarBook)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // will get inverse collection for notifications for GroupReadersImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.CalendarBook A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_r_GroupReaders_A", "Calendar")]
        public Zetbox.App.Calendar.CalendarBookEfImpl AImpl
        {
            get
            {
                Zetbox.App.Calendar.CalendarBookEfImpl __value;
                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_r_GroupReaders_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_r_GroupReaders_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.CalendarBookEfImpl __oldValue = (Zetbox.App.Calendar.CalendarBookEfImpl)r.Value;
                Zetbox.App.Calendar.CalendarBookEfImpl __newValue = (Zetbox.App.Calendar.CalendarBookEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetGroupReadersImplCollection();
                if (__newValue != null) __newValue.GetGroupReadersImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Calendar.CalendarBookEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_r_GroupReaders_B", "GroupReaders")]
        public Zetbox.App.Base.GroupEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.GroupEfImpl __value;
                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Calendar_shared_r_GroupReaders_B",
                        "GroupReaders");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Calendar_shared_r_GroupReaders_B",
                        "GroupReaders");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.GroupEfImpl __oldValue = (Zetbox.App.Base.GroupEfImpl)r.Value;
                Zetbox.App.Base.GroupEfImpl __newValue = (Zetbox.App.Base.GroupEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Group>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>("Model.FK_Calendar_shared_r_GroupReaders_A", "Calendar");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>("Model.FK_Calendar_shared_r_GroupReaders_B", "GroupReaders");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Calendar|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Calendar_shared_r_GroupReaders_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Calendar_shared_r_GroupReaders_RelationEntryEfImpl)obj;
            var me = (Calendar_shared_r_GroupReaders_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.FindPersistenceObject<Zetbox.App.Calendar.CalendarBook>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.Find<Zetbox.App.Calendar.CalendarBook>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.Find<Zetbox.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Calendar
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Calendar_shared_r_Readers_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Calendar_shared_r_Readers_RelationEntryEfImpl")]
    public class Calendar_shared_r_Readers_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Calendar.CalendarBookEfImpl, Zetbox.App.Base.Identity, Zetbox.App.Base.IdentityEfImpl>, Calendar_shared_r_Readers_RelationEntry
    {
        [Obsolete]
        public Calendar_shared_r_Readers_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Calendar_shared_r_Readers_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("385c829b-02d6-48d0-8184-b3b5df6c25be");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Calendar.CalendarBook)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Identity)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // will get inverse collection for notifications for ReadersImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.CalendarBook A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_r_Readers_A", "Calendar")]
        public Zetbox.App.Calendar.CalendarBookEfImpl AImpl
        {
            get
            {
                Zetbox.App.Calendar.CalendarBookEfImpl __value;
                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_r_Readers_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_r_Readers_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.CalendarBookEfImpl __oldValue = (Zetbox.App.Calendar.CalendarBookEfImpl)r.Value;
                Zetbox.App.Calendar.CalendarBookEfImpl __newValue = (Zetbox.App.Calendar.CalendarBookEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetReadersImplCollection();
                if (__newValue != null) __newValue.GetReadersImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Calendar.CalendarBookEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_r_Readers_B", "Readers")]
        public Zetbox.App.Base.IdentityEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Calendar_shared_r_Readers_B",
                        "Readers");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Calendar_shared_r_Readers_B",
                        "Readers");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>("Model.FK_Calendar_shared_r_Readers_A", "Calendar");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_Calendar_shared_r_Readers_B", "Readers");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Calendar_shared_r_Readers_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Calendar_shared_r_Readers_RelationEntryEfImpl)obj;
            var me = (Calendar_shared_r_Readers_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.Find<Zetbox.App.Calendar.CalendarBook>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Calendar
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Calendar_shared_w_GroupWriters_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Calendar_shared_w_GroupWriters_RelationEntryEfImpl")]
    public class Calendar_shared_w_GroupWriters_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Calendar.CalendarBookEfImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupEfImpl>, Calendar_shared_w_GroupWriters_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public Calendar_shared_w_GroupWriters_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Calendar_shared_w_GroupWriters_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("93f20ca2-6935-41bc-8f80-7a441b3cf69d");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Calendar.CalendarBook)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // will get inverse collection for notifications for GroupWritersImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.CalendarBook A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_w_GroupWriters_A", "Calendar")]
        public Zetbox.App.Calendar.CalendarBookEfImpl AImpl
        {
            get
            {
                Zetbox.App.Calendar.CalendarBookEfImpl __value;
                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_w_GroupWriters_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_w_GroupWriters_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.CalendarBookEfImpl __oldValue = (Zetbox.App.Calendar.CalendarBookEfImpl)r.Value;
                Zetbox.App.Calendar.CalendarBookEfImpl __newValue = (Zetbox.App.Calendar.CalendarBookEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetGroupWritersImplCollection();
                if (__newValue != null) __newValue.GetGroupWritersImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Calendar.CalendarBookEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_w_GroupWriters_B", "GroupWriters")]
        public Zetbox.App.Base.GroupEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.GroupEfImpl __value;
                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Calendar_shared_w_GroupWriters_B",
                        "GroupWriters");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Calendar_shared_w_GroupWriters_B",
                        "GroupWriters");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.GroupEfImpl __oldValue = (Zetbox.App.Base.GroupEfImpl)r.Value;
                Zetbox.App.Base.GroupEfImpl __newValue = (Zetbox.App.Base.GroupEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Group>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>("Model.FK_Calendar_shared_w_GroupWriters_A", "Calendar");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>("Model.FK_Calendar_shared_w_GroupWriters_B", "GroupWriters");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Calendar|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Calendar_shared_w_GroupWriters_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Calendar_shared_w_GroupWriters_RelationEntryEfImpl)obj;
            var me = (Calendar_shared_w_GroupWriters_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.FindPersistenceObject<Zetbox.App.Calendar.CalendarBook>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.Find<Zetbox.App.Calendar.CalendarBook>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.Find<Zetbox.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Calendar
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Calendar_shared_w_Writers_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Calendar_shared_w_Writers_RelationEntryEfImpl")]
    public class Calendar_shared_w_Writers_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Calendar.CalendarBook, Zetbox.App.Calendar.CalendarBookEfImpl, Zetbox.App.Base.Identity, Zetbox.App.Base.IdentityEfImpl>, Calendar_shared_w_Writers_RelationEntry
    {
        [Obsolete]
        public Calendar_shared_w_Writers_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Calendar_shared_w_Writers_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("af8843f9-0085-47ec-bcb6-f0f8a22a2c03");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Calendar.CalendarBook)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Identity)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Calendar.CalendarBook; moduleNamespace=Zetbox.App.Calendar;
        // will get inverse collection for notifications for WritersImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.CalendarBook A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_w_Writers_A", "Calendar")]
        public Zetbox.App.Calendar.CalendarBookEfImpl AImpl
        {
            get
            {
                Zetbox.App.Calendar.CalendarBookEfImpl __value;
                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_w_Writers_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.CalendarBookEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>(
                        "Model.FK_Calendar_shared_w_Writers_A",
                        "Calendar");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.CalendarBookEfImpl __oldValue = (Zetbox.App.Calendar.CalendarBookEfImpl)r.Value;
                Zetbox.App.Calendar.CalendarBookEfImpl __newValue = (Zetbox.App.Calendar.CalendarBookEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetWritersImplCollection();
                if (__newValue != null) __newValue.GetWritersImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Calendar.CalendarBookEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.CalendarBook>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Calendar_shared_w_Writers_B", "Writers")]
        public Zetbox.App.Base.IdentityEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Calendar_shared_w_Writers_B",
                        "Writers");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Calendar_shared_w_Writers_B",
                        "Writers");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.CalendarBookEfImpl>("Model.FK_Calendar_shared_w_Writers_A", "Calendar");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_Calendar_shared_w_Writers_B", "Writers");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Calendar_shared_w_Writers_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Calendar_shared_w_Writers_RelationEntryEfImpl)obj;
            var me = (Calendar_shared_w_Writers_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Calendar.CalendarBookEfImpl)Context.Find<Zetbox.App.Calendar.CalendarBook>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="DataType_implements_ImplementedInterfaces_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("DataType_implements_ImplementedInterfaces_RelationEntryEfImpl")]
    public class DataType_implements_ImplementedInterfaces_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.DataType, Zetbox.App.Base.DataTypeEfImpl, Zetbox.App.Base.Interface, Zetbox.App.Base.InterfaceEfImpl>, DataType_implements_ImplementedInterfaces_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public DataType_implements_ImplementedInterfaces_RelationEntryEfImpl()
            : base(null)
        {
        }

        public DataType_implements_ImplementedInterfaces_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("692c1064-37a2-4be3-a81e-4cb91f673aa3");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.DataType)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Interface)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.DataType; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for ImplementsInterfacesImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.DataType A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.DataTypeEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_DataType_implements_ImplementedInterfaces_A", "DataType")]
        public Zetbox.App.Base.DataTypeEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.DataTypeEfImpl __value;
                EntityReference<Zetbox.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_A",
                        "DataType");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_A",
                        "DataType");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.DataTypeEfImpl __oldValue = (Zetbox.App.Base.DataTypeEfImpl)r.Value;
                Zetbox.App.Base.DataTypeEfImpl __newValue = (Zetbox.App.Base.DataTypeEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetImplementsInterfacesImplCollection();
                if (__newValue != null) __newValue.GetImplementsInterfacesImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.DataTypeEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.DataType>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Interface; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Interface B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.InterfaceEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_DataType_implements_ImplementedInterfaces_B", "ImplementedInterfaces")]
        public Zetbox.App.Base.InterfaceEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.InterfaceEfImpl __value;
                EntityReference<Zetbox.App.Base.InterfaceEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.InterfaceEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_B",
                        "ImplementedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.InterfaceEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.InterfaceEfImpl>(
                        "Model.FK_DataType_implements_ImplementedInterfaces_B",
                        "ImplementedInterfaces");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.InterfaceEfImpl __oldValue = (Zetbox.App.Base.InterfaceEfImpl)r.Value;
                Zetbox.App.Base.InterfaceEfImpl __newValue = (Zetbox.App.Base.InterfaceEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.InterfaceEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Interface>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_A", "DataType");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.InterfaceEfImpl>("Model.FK_DataType_implements_ImplementedInterfaces_B", "ImplementedInterfaces");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(DataType_implements_ImplementedInterfaces_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (DataType_implements_ImplementedInterfaces_RelationEntryEfImpl)obj;
            var me = (DataType_implements_ImplementedInterfaces_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.DataTypeEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.DataType>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.DataTypeEfImpl)Context.Find<Zetbox.App.Base.DataType>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.InterfaceEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Interface>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.InterfaceEfImpl)Context.Find<Zetbox.App.Base.Interface>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace at.dasz.DocumentManagement
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Document_has_Revisions_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Document_has_Revisions_RelationEntryEfImpl")]
    public class Document_has_Revisions_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<at.dasz.DocumentManagement.File, at.dasz.DocumentManagement.FileEfImpl, Zetbox.App.Base.Blob, Zetbox.App.Base.BlobEfImpl>, Document_has_Revisions_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public Document_has_Revisions_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Document_has_Revisions_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("69d27812-e981-443b-a94b-dfe1a95f3aad");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (at.dasz.DocumentManagement.File)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Blob)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=at.dasz.DocumentManagement.File; moduleNamespace=at.dasz.DocumentManagement;
        // will get inverse collection for notifications for RevisionsImpl
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public at.dasz.DocumentManagement.File A
        {
            get { return AImpl; }
            set { AImpl = (at.dasz.DocumentManagement.FileEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_A", "Document")]
        public at.dasz.DocumentManagement.FileEfImpl AImpl
        {
            get
            {
                at.dasz.DocumentManagement.FileEfImpl __value;
                EntityReference<at.dasz.DocumentManagement.FileEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.FileEfImpl>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<at.dasz.DocumentManagement.FileEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.FileEfImpl>(
                        "Model.FK_Document_has_Revisions_A",
                        "Document");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                at.dasz.DocumentManagement.FileEfImpl __oldValue = (at.dasz.DocumentManagement.FileEfImpl)r.Value;
                at.dasz.DocumentManagement.FileEfImpl __newValue = (at.dasz.DocumentManagement.FileEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetRevisionsImplCollection();
                if (__newValue != null) __newValue.GetRevisionsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (at.dasz.DocumentManagement.FileEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<at.dasz.DocumentManagement.File>(this.A);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("A_pos");
                }
            }
        }
        private int? _A_pos_store;
        private int? _A_pos {
            get { return _A_pos_store; }
            set {
                ReportEfPropertyChanging("A_pos");
                _A_pos_store = value;
                ReportEfPropertyChanged("A_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Blob; moduleNamespace=at.dasz.DocumentManagement;
        // no inverse navigator handling
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Blob B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.BlobEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Document_has_Revisions_B", "Revisions")]
        public Zetbox.App.Base.BlobEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.BlobEfImpl __value;
                EntityReference<Zetbox.App.Base.BlobEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.BlobEfImpl>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.BlobEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.BlobEfImpl>(
                        "Model.FK_Document_has_Revisions_B",
                        "Revisions");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.BlobEfImpl __oldValue = (Zetbox.App.Base.BlobEfImpl)r.Value;
                Zetbox.App.Base.BlobEfImpl __newValue = (Zetbox.App.Base.BlobEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.BlobEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Blob>(this.B);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("B_pos");
                }
            }
        }
        private int? _B_pos_store;
        private int? _B_pos {
            get { return _B_pos_store; }
            set {
                ReportEfPropertyChanging("B_pos");
                _B_pos_store = value;
                ReportEfPropertyChanged("B_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<at.dasz.DocumentManagement.FileEfImpl>("Model.FK_Document_has_Revisions_A", "Document");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._A_pos);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.BlobEfImpl>("Model.FK_Document_has_Revisions_B", "Revisions");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this._A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this._B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "at.dasz.DocumentManagement");
            if (modules.Contains("*") || modules.Contains("at.dasz.DocumentManagement")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "at.dasz.DocumentManagement");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "at.dasz.DocumentManagement|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "at.dasz.DocumentManagement|A_pos":
                this._A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "at.dasz.DocumentManagement|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "at.dasz.DocumentManagement|B_pos":
                this._B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Document_has_Revisions_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Document_has_Revisions_RelationEntryEfImpl)obj;
            var me = (Document_has_Revisions_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (at.dasz.DocumentManagement.FileEfImpl)Context.FindPersistenceObject<at.dasz.DocumentManagement.File>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (at.dasz.DocumentManagement.FileEfImpl)Context.Find<at.dasz.DocumentManagement.File>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.BlobEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Blob>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.BlobEfImpl)Context.Find<Zetbox.App.Base.Blob>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Identities_memberOf_Groups_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Identities_memberOf_Groups_RelationEntryEfImpl")]
    public class Identities_memberOf_Groups_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.Identity, Zetbox.App.Base.IdentityEfImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupEfImpl>, Identities_memberOf_Groups_RelationEntry
    {
        [Obsolete]
        public Identities_memberOf_Groups_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Identities_memberOf_Groups_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("3efb7ae8-ba6b-40e3-9482-b45d1c101743");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.Identity)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for GroupsImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_A", "Identities")]
        public Zetbox.App.Base.IdentityEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_A",
                        "Identities");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetGroupsImplCollection();
                if (__newValue != null) __newValue.GetGroupsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for MemberImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Identities_memberOf_Groups_B", "Groups")]
        public Zetbox.App.Base.GroupEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.GroupEfImpl __value;
                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_Identities_memberOf_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.GroupEfImpl __oldValue = (Zetbox.App.Base.GroupEfImpl)r.Value;
                Zetbox.App.Base.GroupEfImpl __newValue = (Zetbox.App.Base.GroupEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetMemberImplCollection();
                if (__newValue != null) __newValue.GetMemberImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Group>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_Identities_memberOf_Groups_A", "Identities");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>("Model.FK_Identities_memberOf_Groups_B", "Groups");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Identities_memberOf_Groups_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Identities_memberOf_Groups_RelationEntryEfImpl)obj;
            var me = (Identities_memberOf_Groups_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.Find<Zetbox.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl")]
    public class MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Test.Muhblah, Zetbox.App.Test.MuhblahEfImpl, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectEfImpl>, MB_Many_Role_has_TCO_ManyList_Role_RelationEntry
    {
        [Obsolete]
        public MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl()
            : base(null)
        {
        }

        public MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("d1e0da3e-ce64-4587-b62d-70c0f4371d97");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.Muhblah)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.TestCustomObject)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.Muhblah; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for TestCustomObjects_ManyList_NavImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.Muhblah A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Test.MuhblahEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Many_Role_has_TCO_ManyList_Role_A", "MB_Many_Role")]
        public Zetbox.App.Test.MuhblahEfImpl AImpl
        {
            get
            {
                Zetbox.App.Test.MuhblahEfImpl __value;
                EntityReference<Zetbox.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A",
                        "MB_Many_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A",
                        "MB_Many_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.MuhblahEfImpl __oldValue = (Zetbox.App.Test.MuhblahEfImpl)r.Value;
                Zetbox.App.Test.MuhblahEfImpl __newValue = (Zetbox.App.Test.MuhblahEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetTestCustomObjects_ManyList_NavImplCollection();
                if (__newValue != null) __newValue.GetTestCustomObjects_ManyList_NavImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.MuhblahEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.Muhblah>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for MuhBlah_ManyList_NavImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Many_Role_has_TCO_ManyList_Role_B", "TCO_ManyList_Role")]
        public Zetbox.App.Test.TestCustomObjectEfImpl BImpl
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B",
                        "TCO_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B",
                        "TCO_ManyList_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.TestCustomObjectEfImpl __oldValue = (Zetbox.App.Test.TestCustomObjectEfImpl)r.Value;
                Zetbox.App.Test.TestCustomObjectEfImpl __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetMuhBlah_ManyList_NavImplCollection();
                if (__newValue != null) __newValue.GetMuhBlah_ManyList_NavImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.TestCustomObjectEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A", "MB_Many_Role");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>("Model.FK_MB_Many_Role_has_TCO_ManyList_Role_B", "TCO_ManyList_Role");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(MB_Many_Role_has_TCO_ManyList_Role_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl)obj;
            var me = (MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Test.MuhblahEfImpl)Context.Find<Zetbox.App.Test.Muhblah>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="NavigationScreen_accessed_by_Groups_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("NavigationScreen_accessed_by_Groups_RelationEntryEfImpl")]
    public class NavigationScreen_accessed_by_Groups_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.GUI.NavigationEntry, Zetbox.App.GUI.NavigationEntryEfImpl, Zetbox.App.Base.Group, Zetbox.App.Base.GroupEfImpl>, NavigationScreen_accessed_by_Groups_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public NavigationScreen_accessed_by_Groups_RelationEntryEfImpl()
            : base(null)
        {
        }

        public NavigationScreen_accessed_by_Groups_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("b88c12ac-eabe-4aee-913e-5edd9d2a193a");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.NavigationEntry)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Group)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.NavigationEntry; moduleNamespace=Zetbox.App.GUI;
        // will get inverse collection for notifications for GroupsImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.NavigationEntry A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.GUI.NavigationEntryEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_NavigationScreen_accessed_by_Groups_A", "NavigationScreen")]
        public Zetbox.App.GUI.NavigationEntryEfImpl AImpl
        {
            get
            {
                Zetbox.App.GUI.NavigationEntryEfImpl __value;
                EntityReference<Zetbox.App.GUI.NavigationEntryEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.NavigationEntryEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_A",
                        "NavigationScreen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.NavigationEntryEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.NavigationEntryEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_A",
                        "NavigationScreen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.NavigationEntryEfImpl __oldValue = (Zetbox.App.GUI.NavigationEntryEfImpl)r.Value;
                Zetbox.App.GUI.NavigationEntryEfImpl __newValue = (Zetbox.App.GUI.NavigationEntryEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetGroupsImplCollection();
                if (__newValue != null) __newValue.GetGroupsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.GUI.NavigationEntryEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.NavigationEntry>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Group; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Group B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.GroupEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_NavigationScreen_accessed_by_Groups_B", "Groups")]
        public Zetbox.App.Base.GroupEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.GroupEfImpl __value;
                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.GroupEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>(
                        "Model.FK_NavigationScreen_accessed_by_Groups_B",
                        "Groups");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.GroupEfImpl __oldValue = (Zetbox.App.Base.GroupEfImpl)r.Value;
                Zetbox.App.Base.GroupEfImpl __newValue = (Zetbox.App.Base.GroupEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.GroupEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Group>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.NavigationEntryEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_A", "NavigationScreen");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(A);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.GroupEfImpl>("Model.FK_NavigationScreen_accessed_by_Groups_B", "Groups");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(NavigationScreen_accessed_by_Groups_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (NavigationScreen_accessed_by_Groups_RelationEntryEfImpl)obj;
            var me = (NavigationScreen_accessed_by_Groups_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.GUI.NavigationEntryEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.NavigationEntry>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.GUI.NavigationEntryEfImpl)Context.Find<Zetbox.App.GUI.NavigationEntry>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Group>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.GroupEfImpl)Context.Find<Zetbox.App.Base.Group>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="ObjRefProp_shows_Methods_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("ObjRefProp_shows_Methods_RelationEntryEfImpl")]
    public class ObjRefProp_shows_Methods_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.ObjectReferenceProperty, Zetbox.App.Base.ObjectReferencePropertyEfImpl, Zetbox.App.Base.Method, Zetbox.App.Base.MethodEfImpl>, ObjRefProp_shows_Methods_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public ObjRefProp_shows_Methods_RelationEntryEfImpl()
            : base(null)
        {
        }

        public ObjRefProp_shows_Methods_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("02b3e9d5-fc2e-4ffe-8867-0977b88437cc");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.ObjectReferenceProperty)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Method)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.ObjectReferenceProperty; moduleNamespace=Zetbox.App.GUI;
        // will get inverse collection for notifications for MethodsImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.ObjectReferenceProperty A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjRefProp_shows_Methods_A", "ObjRefProp")]
        public Zetbox.App.Base.ObjectReferencePropertyEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.ObjectReferencePropertyEfImpl __value;
                EntityReference<Zetbox.App.Base.ObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectReferencePropertyEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_A",
                        "ObjRefProp");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ObjectReferencePropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectReferencePropertyEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_A",
                        "ObjRefProp");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ObjectReferencePropertyEfImpl __oldValue = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)r.Value;
                Zetbox.App.Base.ObjectReferencePropertyEfImpl __newValue = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetMethodsImplCollection();
                if (__newValue != null) __newValue.GetMethodsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectReferenceProperty>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Method; moduleNamespace=Zetbox.App.GUI;
        // will get inverse collection for notifications for ShowByPropertiesImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Method B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.MethodEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjRefProp_shows_Methods_B", "Methods")]
        public Zetbox.App.Base.MethodEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.MethodEfImpl __value;
                EntityReference<Zetbox.App.Base.MethodEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.MethodEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_B",
                        "Methods");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.MethodEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.MethodEfImpl>(
                        "Model.FK_ObjRefProp_shows_Methods_B",
                        "Methods");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.MethodEfImpl __oldValue = (Zetbox.App.Base.MethodEfImpl)r.Value;
                Zetbox.App.Base.MethodEfImpl __newValue = (Zetbox.App.Base.MethodEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetShowByPropertiesImplCollection();
                if (__newValue != null) __newValue.GetShowByPropertiesImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.MethodEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Method>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectReferencePropertyEfImpl>("Model.FK_ObjRefProp_shows_Methods_A", "ObjRefProp");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.MethodEfImpl>("Model.FK_ObjRefProp_shows_Methods_B", "Methods");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(ObjRefProp_shows_Methods_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjRefProp_shows_Methods_RelationEntryEfImpl)obj;
            var me = (ObjRefProp_shows_Methods_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.ObjectReferenceProperty>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.ObjectReferencePropertyEfImpl)Context.Find<Zetbox.App.Base.ObjectReferenceProperty>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.MethodEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Method>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.MethodEfImpl)Context.Find<Zetbox.App.Base.Method>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.GUI
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl")]
    public class Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ViewModelDescriptorEfImpl, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.ControlKindEfImpl>, Presentable_displayedBy_SecondaryControlKinds_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("5404456a-4527-4e40-a660-b4a5e96e4a47");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.GUI.ViewModelDescriptor)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.GUI.ControlKind)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // will get inverse collection for notifications for SecondaryControlKindsImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ViewModelDescriptor A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable")]
        public Zetbox.App.GUI.ViewModelDescriptorEfImpl AImpl
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __value;
                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                        "Presentable");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __oldValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)r.Value;
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __newValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetSecondaryControlKindsImplCollection();
                if (__newValue != null) __newValue.GetSecondaryControlKindsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ViewModelDescriptor>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds")]
        public Zetbox.App.GUI.ControlKindEfImpl BImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_displayedBy_SecondaryControlKinds_B",
                        "SecondaryControlKinds");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_A", "Presentable");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_displayedBy_SecondaryControlKinds_B", "SecondaryControlKinds");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.GUI|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Presentable_displayedBy_SecondaryControlKinds_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl)obj;
            var me = (Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.Find<Zetbox.App.GUI.ViewModelDescriptor>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Projekte_haben_Mitarbeiter_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Projekte_haben_Mitarbeiter_RelationEntryEfImpl")]
    public class Projekte_haben_Mitarbeiter_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.ProjektEfImpl, Zetbox.App.Projekte.Mitarbeiter, Zetbox.App.Projekte.MitarbeiterEfImpl>, Projekte_haben_Mitarbeiter_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public Projekte_haben_Mitarbeiter_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Projekte_haben_Mitarbeiter_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("c7b3cf10-cdc8-454c-826c-04a0f7e5ef3e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Projekte.Projekt)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Projekte.Mitarbeiter)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Projekte.Projekt; moduleNamespace=Zetbox.App.Projekte;
        // will get inverse collection for notifications for MitarbeiterImpl
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Projekt A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Projekte.ProjektEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_A", "Projekte")]
        public Zetbox.App.Projekte.ProjektEfImpl AImpl
        {
            get
            {
                Zetbox.App.Projekte.ProjektEfImpl __value;
                EntityReference<Zetbox.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_A",
                        "Projekte");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Projekte.ProjektEfImpl __oldValue = (Zetbox.App.Projekte.ProjektEfImpl)r.Value;
                Zetbox.App.Projekte.ProjektEfImpl __newValue = (Zetbox.App.Projekte.ProjektEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetMitarbeiterImplCollection();
                if (__newValue != null) __newValue.GetMitarbeiterImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Projekte.ProjektEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Projekte.Projekt>(this.A);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("A_pos");
                }
            }
        }
        private int? _A_pos_store;
        private int? _A_pos {
            get { return _A_pos_store; }
            set {
                ReportEfPropertyChanging("A_pos");
                _A_pos_store = value;
                ReportEfPropertyChanged("A_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Projekte.Mitarbeiter; moduleNamespace=Zetbox.App.Projekte;
        // will get inverse collection for notifications for ProjekteImpl
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Mitarbeiter B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Projekte.MitarbeiterEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter")]
        public Zetbox.App.Projekte.MitarbeiterEfImpl BImpl
        {
            get
            {
                Zetbox.App.Projekte.MitarbeiterEfImpl __value;
                EntityReference<Zetbox.App.Projekte.MitarbeiterEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.MitarbeiterEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Projekte.MitarbeiterEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.MitarbeiterEfImpl>(
                        "Model.FK_Projekte_haben_Mitarbeiter_B",
                        "Mitarbeiter");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Projekte.MitarbeiterEfImpl __oldValue = (Zetbox.App.Projekte.MitarbeiterEfImpl)r.Value;
                Zetbox.App.Projekte.MitarbeiterEfImpl __newValue = (Zetbox.App.Projekte.MitarbeiterEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetProjekteImplCollection();
                if (__newValue != null) __newValue.GetProjekteImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Projekte.MitarbeiterEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Projekte.Mitarbeiter>(this.B);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("B_pos");
                }
            }
        }
        private int? _B_pos_store;
        private int? _B_pos {
            get { return _B_pos_store; }
            set {
                ReportEfPropertyChanging("B_pos");
                _B_pos_store = value;
                ReportEfPropertyChanged("B_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_A", "Projekte");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._A_pos);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.MitarbeiterEfImpl>("Model.FK_Projekte_haben_Mitarbeiter_B", "Mitarbeiter");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this._A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this._B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Projekte");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Projekte|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Projekte|A_pos":
                this._A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Projekte|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Projekte|B_pos":
                this._B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Projekte_haben_Mitarbeiter_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekte_haben_Mitarbeiter_RelationEntryEfImpl)obj;
            var me = (Projekte_haben_Mitarbeiter_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Projekte.ProjektEfImpl)Context.FindPersistenceObject<Zetbox.App.Projekte.Projekt>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Projekte.ProjektEfImpl)Context.Find<Zetbox.App.Projekte.Projekt>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Projekte.MitarbeiterEfImpl)Context.FindPersistenceObject<Zetbox.App.Projekte.Mitarbeiter>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Projekte.MitarbeiterEfImpl)Context.Find<Zetbox.App.Projekte.Mitarbeiter>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="RoleMembership_resolves_Relations_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("RoleMembership_resolves_Relations_RelationEntryEfImpl")]
    public class RoleMembership_resolves_Relations_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.RoleMembership, Zetbox.App.Base.RoleMembershipEfImpl, Zetbox.App.Base.Relation, Zetbox.App.Base.RelationEfImpl>, RoleMembership_resolves_Relations_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public RoleMembership_resolves_Relations_RelationEntryEfImpl()
            : base(null)
        {
        }

        public RoleMembership_resolves_Relations_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("f74d425f-e733-4cba-baca-f4a05fbc0a80");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.RoleMembership)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Relation)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.RoleMembership; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for RelationsImpl
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.RoleMembership A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.RoleMembershipEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_A", "RoleMembership")]
        public Zetbox.App.Base.RoleMembershipEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.RoleMembershipEfImpl __value;
                EntityReference<Zetbox.App.Base.RoleMembershipEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.RoleMembershipEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.RoleMembershipEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.RoleMembershipEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_A",
                        "RoleMembership");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.RoleMembershipEfImpl __oldValue = (Zetbox.App.Base.RoleMembershipEfImpl)r.Value;
                Zetbox.App.Base.RoleMembershipEfImpl __newValue = (Zetbox.App.Base.RoleMembershipEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetRelationsImplCollection();
                if (__newValue != null) __newValue.GetRelationsImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.RoleMembershipEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.RoleMembership>(this.A);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("A_pos");
                }
            }
        }
        private int? _A_pos_store;
        private int? _A_pos {
            get { return _A_pos_store; }
            set {
                ReportEfPropertyChanging("A_pos");
                _A_pos_store = value;
                ReportEfPropertyChanged("A_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Relation; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Relation B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.RelationEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_RoleMembership_resolves_Relations_B", "Relations")]
        public Zetbox.App.Base.RelationEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.RelationEfImpl __value;
                EntityReference<Zetbox.App.Base.RelationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.RelationEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.RelationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.RelationEfImpl>(
                        "Model.FK_RoleMembership_resolves_Relations_B",
                        "Relations");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.RelationEfImpl __oldValue = (Zetbox.App.Base.RelationEfImpl)r.Value;
                Zetbox.App.Base.RelationEfImpl __newValue = (Zetbox.App.Base.RelationEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.RelationEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Relation>(this.B);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("B_pos");
                }
            }
        }
        private int? _B_pos_store;
        private int? _B_pos {
            get { return _B_pos_store; }
            set {
                ReportEfPropertyChanging("B_pos");
                _B_pos_store = value;
                ReportEfPropertyChanged("B_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.RoleMembershipEfImpl>("Model.FK_RoleMembership_resolves_Relations_A", "RoleMembership");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._A_pos);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.RelationEfImpl>("Model.FK_RoleMembership_resolves_Relations_B", "Relations");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this._A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this._B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|A_pos":
                this._A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B_pos":
                this._B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(RoleMembership_resolves_Relations_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (RoleMembership_resolves_Relations_RelationEntryEfImpl)obj;
            var me = (RoleMembership_resolves_Relations_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.RoleMembershipEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.RoleMembership>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.RoleMembershipEfImpl)Context.Find<Zetbox.App.Base.RoleMembership>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.RelationEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Relation>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.RelationEfImpl)Context.Find<Zetbox.App.Base.Relation>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.SchemaMigration
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="SourceColumn_created_Property_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("SourceColumn_created_Property_RelationEntryEfImpl")]
    public class SourceColumn_created_Property_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumnEfImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyEfImpl>, SourceColumn_created_Property_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public SourceColumn_created_Property_RelationEntryEfImpl()
            : base(null)
        {
        }

        public SourceColumn_created_Property_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("fb27e3f8-3615-4f3b-ae2a-2b89b8782e27");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.SchemaMigration.SourceColumn)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.SchemaMigration.SourceColumn; moduleNamespace=Zetbox.App.SchemaMigration;
        // will get inverse collection for notifications for DestinationPropertyImpl
        // PositionStorage=A_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.SchemaMigration.SourceColumn A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_created_Property_A", "SourceColumn")]
        public Zetbox.App.SchemaMigration.SourceColumnEfImpl AImpl
        {
            get
            {
                Zetbox.App.SchemaMigration.SourceColumnEfImpl __value;
                EntityReference<Zetbox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_SourceColumn_created_Property_A",
                        "SourceColumn");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.SchemaMigration.SourceColumnEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_SourceColumn_created_Property_A",
                        "SourceColumn");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.SchemaMigration.SourceColumnEfImpl __oldValue = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)r.Value;
                Zetbox.App.SchemaMigration.SourceColumnEfImpl __newValue = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetDestinationPropertyImplCollection();
                if (__newValue != null) __newValue.GetDestinationPropertyImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.SourceColumn>(this.A);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? A_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _A_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_A_pos != value)
                {
                    var __oldValue = _A_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("A_pos", __oldValue, __newValue);
                    _A_pos = __newValue;
                    NotifyPropertyChanged("A_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("A_pos");
                }
            }
        }
        private int? _A_pos_store;
        private int? _A_pos {
            get { return _A_pos_store; }
            set {
                ReportEfPropertyChanging("A_pos");
                _A_pos_store = value;
                ReportEfPropertyChanged("A_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=B_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_created_Property_B", "Property")]
        public Zetbox.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.PropertyEfImpl __value;
                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_SourceColumn_created_Property_B",
                        "Property");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_SourceColumn_created_Property_B",
                        "Property");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.PropertyEfImpl __oldValue = (Zetbox.App.Base.PropertyEfImpl)r.Value;
                Zetbox.App.Base.PropertyEfImpl __newValue = (Zetbox.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Property>(this.B);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? B_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _B_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_B_pos != value)
                {
                    var __oldValue = _B_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("B_pos", __oldValue, __newValue);
                    _B_pos = __newValue;
                    NotifyPropertyChanged("B_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("B_pos");
                }
            }
        }
        private int? _B_pos_store;
        private int? _B_pos {
            get { return _B_pos_store; }
            set {
                ReportEfPropertyChanging("B_pos");
                _B_pos_store = value;
                ReportEfPropertyChanged("B_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        /// <summary>
        /// Index into the A-side list of this relation
        /// </summary>
        public int? AIndex { get { return _A_pos; } set { _A_pos = value; } }

        /// <summary>
        /// Index into the B-side list of this relation
        /// </summary>
        public int? BIndex { get { return _B_pos; } set { _B_pos = value; } }

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.SourceColumnEfImpl>("Model.FK_SourceColumn_created_Property_A", "SourceColumn");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(A);
            }
            binStream.Write(this._A_pos);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>("Model.FK_SourceColumn_created_Property_B", "Property");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._B_pos);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            this._A_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_B);
            this._B_pos = binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._A_pos, xml, "A_pos", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._B_pos, xml, "B_pos", "Zetbox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|A_pos":
                this._A_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.SchemaMigration|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|B_pos":
                this._B_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(SourceColumn_created_Property_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceColumn_created_Property_RelationEntryEfImpl)obj;
            var me = (SourceColumn_created_Property_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me.AIndex = other.AIndex;
            me._fk_B = other._fk_B;
            me.BIndex = other.BIndex;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)Context.FindPersistenceObject<Zetbox.App.SchemaMigration.SourceColumn>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.SchemaMigration.SourceColumnEfImpl)Context.Find<Zetbox.App.SchemaMigration.SourceColumn>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.Find<Zetbox.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="Student_füllt_aus_Testbogen_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Student_füllt_aus_Testbogen_RelationEntryEfImpl")]
    public class Student_füllt_aus_Testbogen_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Test.TestStudent, Zetbox.App.Test.TestStudentEfImpl, Zetbox.App.Test.Fragebogen, Zetbox.App.Test.FragebogenEfImpl>, Student_füllt_aus_Testbogen_RelationEntry
    {
        [Obsolete]
        public Student_füllt_aus_Testbogen_RelationEntryEfImpl()
            : base(null)
        {
        }

        public Student_füllt_aus_Testbogen_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("6819ca86-571c-4d59-bc30-cc1fb0decc9e");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Test.TestStudent)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Test.Fragebogen)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Test.TestStudent; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for TestbogenImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestStudent A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Test.TestStudentEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_A", "Student")]
        public Zetbox.App.Test.TestStudentEfImpl AImpl
        {
            get
            {
                Zetbox.App.Test.TestStudentEfImpl __value;
                EntityReference<Zetbox.App.Test.TestStudentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestStudentEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.TestStudentEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestStudentEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_A",
                        "Student");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.TestStudentEfImpl __oldValue = (Zetbox.App.Test.TestStudentEfImpl)r.Value;
                Zetbox.App.Test.TestStudentEfImpl __newValue = (Zetbox.App.Test.TestStudentEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetTestbogenImplCollection();
                if (__newValue != null) __newValue.GetTestbogenImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.TestStudentEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestStudent>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Test.Fragebogen; moduleNamespace=Zetbox.App.Test;
        // will get inverse collection for notifications for StudentImpl
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.Fragebogen B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Test.FragebogenEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Student_füllt_aus_Testbogen_B", "Testbogen")]
        public Zetbox.App.Test.FragebogenEfImpl BImpl
        {
            get
            {
                Zetbox.App.Test.FragebogenEfImpl __value;
                EntityReference<Zetbox.App.Test.FragebogenEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.FragebogenEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.FragebogenEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.FragebogenEfImpl>(
                        "Model.FK_Student_füllt_aus_Testbogen_B",
                        "Testbogen");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.FragebogenEfImpl __oldValue = (Zetbox.App.Test.FragebogenEfImpl)r.Value;
                Zetbox.App.Test.FragebogenEfImpl __newValue = (Zetbox.App.Test.FragebogenEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetStudentImplCollection();
                if (__newValue != null) __newValue.GetStudentImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Test.FragebogenEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.Fragebogen>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestStudentEfImpl>("Model.FK_Student_füllt_aus_Testbogen_A", "Student");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.FragebogenEfImpl>("Model.FK_Student_füllt_aus_Testbogen_B", "Testbogen");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Student_füllt_aus_Testbogen_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Student_füllt_aus_Testbogen_RelationEntryEfImpl)obj;
            var me = (Student_füllt_aus_Testbogen_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Test.TestStudentEfImpl)Context.Find<Zetbox.App.Test.TestStudent>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Test.FragebogenEfImpl)Context.Find<Zetbox.App.Test.Fragebogen>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Base
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
    [EdmEntityType(NamespaceName="Model", Name="UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl")]
    public class UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl : Zetbox.DalProvider.Ef.RelationEntryEfImpl<Zetbox.App.Base.IndexConstraint, Zetbox.App.Base.IndexConstraintEfImpl, Zetbox.App.Base.Property, Zetbox.App.Base.PropertyEfImpl>, UniqueContraints_ensures_unique_on_Properties_RelationEntry, Zetbox.API.IExportableInternal, Zetbox.App.Base.IExportable
    {
        [Obsolete]
        public UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl()
            : base(null)
        {
        }

        public UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (_ExportGuid_store == Guid.Empty) {
                    __result = _ExportGuid_store = Guid.NewGuid();
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ExportGuidProperty
        #region RelationEntry.ApplyClassHeadTemplate

        private static readonly Guid _relationID = new Guid("29235ba6-5979-4ed8-8e75-6bd0837c7f28");
        public override Guid RelationID { get { return _relationID; } }

        IDataObject IRelationEntry.AObject
        {
            get
            {
                return A;
            }
            set
            {
                // settor will do checking for us
                A = (Zetbox.App.Base.IndexConstraint)value;
            }
        }

        IDataObject IRelationEntry.BObject
        {
            get
            {
                return B;
            }
            set
            {
                // settor will do checking for us
                B = (Zetbox.App.Base.Property)value;
            }
        }

        #endregion // RelationEntry.ApplyClassHeadTemplate


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A
        // fkBackingName=_fk_A; fkGuidBackingName=_fk_guid_A;
        // referencedInterface=Zetbox.App.Base.IndexConstraint; moduleNamespace=Zetbox.App.Base;
        // will get inverse collection for notifications for PropertiesImpl
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.IndexConstraint A
        {
            get { return AImpl; }
            set { AImpl = (Zetbox.App.Base.IndexConstraintEfImpl)value; }
        }

        private int? _fk_A;

        /// <summary>ForeignKey Property for A's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_A
		{
			get { return A != null ? A.ID : (int?)null; }
			set { _fk_A = value; }
		}

        private Guid? _fk_guid_A = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_UniqueContraints_ensures_unique_on_Properties_A", "UniqueContraints")]
        public Zetbox.App.Base.IndexConstraintEfImpl AImpl
        {
            get
            {
                Zetbox.App.Base.IndexConstraintEfImpl __value;
                EntityReference<Zetbox.App.Base.IndexConstraintEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IndexConstraintEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_A",
                        "UniqueContraints");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IndexConstraintEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IndexConstraintEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_A",
                        "UniqueContraints");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IndexConstraintEfImpl __oldValue = (Zetbox.App.Base.IndexConstraintEfImpl)r.Value;
                Zetbox.App.Base.IndexConstraintEfImpl __newValue = (Zetbox.App.Base.IndexConstraintEfImpl)value;

                // fetch collection proxy and attach change notifications
                if (__oldValue != null) __oldValue.GetPropertiesImplCollection();
                if (__newValue != null) __newValue.GetPropertiesImplCollection();

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("A", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.IndexConstraintEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("A", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.IndexConstraint>(this.A);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for A

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B
        // fkBackingName=_fk_B; fkGuidBackingName=_fk_guid_B;
        // referencedInterface=Zetbox.App.Base.Property; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Property B
        {
            get { return BImpl; }
            set { BImpl = (Zetbox.App.Base.PropertyEfImpl)value; }
        }

        private int? _fk_B;

        /// <summary>ForeignKey Property for B's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_B
		{
			get { return B != null ? B.ID : (int?)null; }
			set { _fk_B = value; }
		}

        private Guid? _fk_guid_B = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_UniqueContraints_ensures_unique_on_Properties_B", "Properties")]
        public Zetbox.App.Base.PropertyEfImpl BImpl
        {
            get
            {
                Zetbox.App.Base.PropertyEfImpl __value;
                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_B",
                        "Properties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.PropertyEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>(
                        "Model.FK_UniqueContraints_ensures_unique_on_Properties_B",
                        "Properties");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.PropertyEfImpl __oldValue = (Zetbox.App.Base.PropertyEfImpl)r.Value;
                Zetbox.App.Base.PropertyEfImpl __newValue = (Zetbox.App.Base.PropertyEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("B", __oldValue, __newValue);

                r.Value = (Zetbox.App.Base.PropertyEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("B", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Property>(this.B);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for B

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._ExportGuid);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IndexConstraintEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_A", "UniqueContraints");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.PropertyEfImpl>("Model.FK_UniqueContraints_ensures_unique_on_Properties_B", "Properties");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._ExportGuid = binStream.ReadGuid();
            binStream.Read(out this._fk_A);
            binStream.Read(out this._fk_B);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", _ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(A != null ? A.ExportGuid : (Guid?)null, xml, "A", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(B != null ? B.ExportGuid : (Guid?)null, xml, "B", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "|ExportGuid":
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                break;
            case "Zetbox.App.Base|A":
                this._fk_guid_A = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|B":
                this._fk_guid_B = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(UniqueContraints_ensures_unique_on_Properties_RelationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl)obj;
            var me = (UniqueContraints_ensures_unique_on_Properties_RelationEntryEfImpl)this;

            me._fk_A = other._fk_A;
            me._fk_B = other._fk_B;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_guid_A.HasValue)
                AImpl = (Zetbox.App.Base.IndexConstraintEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.IndexConstraint>(_fk_guid_A.Value);
            else
            if (_fk_A.HasValue)
                AImpl = (Zetbox.App.Base.IndexConstraintEfImpl)Context.Find<Zetbox.App.Base.IndexConstraint>(_fk_A.Value);
            else
                AImpl = null;

            if (_fk_guid_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Property>(_fk_guid_B.Value);
            else
            if (_fk_B.HasValue)
                BImpl = (Zetbox.App.Base.PropertyEfImpl)Context.Find<Zetbox.App.Base.Property>(_fk_B.Value);
            else
                BImpl = null;

        }


        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            if (property == "A" || property == "B")
            {
                var oldNotifier = (INotifyPropertyChanged)oldValue;
                var newNotifier = (INotifyPropertyChanged)newValue;

                if (oldNotifier != null) oldNotifier.PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                if (newNotifier != null) newNotifier.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(AB_PropertyChanged);
                ManageMyObjectState();
            }
        }

        void AB_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ObjectState")
            {
                ManageMyObjectState();
            }
        }

        private void ManageMyObjectState()
        {
            if (A != null && A.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);
            if (B != null && B.ObjectState == DataObjectState.Deleted && this.Context != null)
                this.Context.Delete(this);

            if (this.ObjectState == DataObjectState.Deleted && A != null && B != null && A.ObjectState != DataObjectState.Deleted && B.ObjectState != DataObjectState.Deleted)
                this.SetUnDeleted();
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.RelationEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="Kunde_EMails_CollectionEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Kunde_EMails_CollectionEntryEfImpl")]
    public class Kunde_EMails_CollectionEntryEfImpl : Zetbox.DalProvider.Ef.ValueCollectionEntryEfImpl<Zetbox.App.Projekte.Kunde, Zetbox.App.Projekte.KundeEfImpl, string>, Kunde_EMails_CollectionEntry, Zetbox.API.IExportableValueCollectionEntryInternal
    {
[Obsolete]
public Kunde_EMails_CollectionEntryEfImpl()
: base(null)
{
}
public Kunde_EMails_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
}
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        private static readonly Guid _propertyID = new Guid("1d0f6da6-4b69-48d7-9e94-bfb5466654b9");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Zetbox.App.Projekte.Kunde; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=EMails; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Kunde Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Zetbox.App.Projekte.KundeEfImpl)value; }
        }

        private int? _fk_Parent;

        /// <summary>ForeignKey Property for Parent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Parent
		{
			get { return Parent != null ? Parent.ID : (int?)null; }
			set { _fk_Parent = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Kunde_value_EMails", "Kunde")]
        public Zetbox.App.Projekte.KundeEfImpl ParentImpl
        {
            get
            {
                Zetbox.App.Projekte.KundeEfImpl __value;
                EntityReference<Zetbox.App.Projekte.KundeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.KundeEfImpl>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Projekte.KundeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.KundeEfImpl>(
                        "Model.FK_Kunde_value_EMails",
                        "Kunde");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Projekte.KundeEfImpl __oldValue = (Zetbox.App.Projekte.KundeEfImpl)r.Value;
                Zetbox.App.Projekte.KundeEfImpl __newValue = (Zetbox.App.Projekte.KundeEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("EMails", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("EMails", null, null);
                }

                r.Value = (Zetbox.App.Projekte.KundeEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("EMails", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("EMails", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchParentAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Projekte.Kunde>(this.Parent);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Projekte.KundeEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Value
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Value;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Value != value)
                {
                    var __oldValue = _Value;
                    var __newValue = value;
                    NotifyPropertyChanging("Value", __oldValue, __newValue);
                    _Value = __newValue;
                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("Value");
                }
            }
        }
        private string _Value_store;
        private string _Value {
            get { return _Value_store; }
            set {
                ReportEfPropertyChanging("Value");
                _Value_store = value;
                ReportEfPropertyChanged("Value");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (string)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.KundeEfImpl>("Model.FK_Kunde_value_EMails", "Kunde");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            this._Value = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ToStream(this._Value, xml, "Value", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|Value":
                this._Value = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Kunde_EMails_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Kunde_EMails_CollectionEntryEfImpl)obj;
            var me = (Kunde_EMails_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            me.Value = other.Value;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Zetbox.App.Projekte.KundeEfImpl)Context.Find<Zetbox.App.Projekte.Kunde>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="Muhblah_StringCollection_CollectionEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Muhblah_StringCollection_CollectionEntryEfImpl")]
    public class Muhblah_StringCollection_CollectionEntryEfImpl : Zetbox.DalProvider.Ef.ValueCollectionEntryEfImpl<Zetbox.App.Test.Muhblah, Zetbox.App.Test.MuhblahEfImpl, string>, Muhblah_StringCollection_CollectionEntry
    {
[Obsolete]
public Muhblah_StringCollection_CollectionEntryEfImpl()
: base(null)
{
}
public Muhblah_StringCollection_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
}
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        private static readonly Guid _propertyID = new Guid("b89fc0d2-8603-40d7-8649-61431a9fb09b");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Zetbox.App.Test.Muhblah; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=StringCollection; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.Muhblah Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Zetbox.App.Test.MuhblahEfImpl)value; }
        }

        private int? _fk_Parent;

        /// <summary>ForeignKey Property for Parent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Parent
		{
			get { return Parent != null ? Parent.ID : (int?)null; }
			set { _fk_Parent = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Muhblah_value_StringCollection", "Muhblah")]
        public Zetbox.App.Test.MuhblahEfImpl ParentImpl
        {
            get
            {
                Zetbox.App.Test.MuhblahEfImpl __value;
                EntityReference<Zetbox.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>(
                        "Model.FK_Muhblah_value_StringCollection",
                        "Muhblah");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.MuhblahEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>(
                        "Model.FK_Muhblah_value_StringCollection",
                        "Muhblah");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.MuhblahEfImpl __oldValue = (Zetbox.App.Test.MuhblahEfImpl)r.Value;
                Zetbox.App.Test.MuhblahEfImpl __newValue = (Zetbox.App.Test.MuhblahEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("StringCollection", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("StringCollection", null, null);
                }

                r.Value = (Zetbox.App.Test.MuhblahEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("StringCollection", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("StringCollection", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchParentAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.Muhblah>(this.Parent);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Test.MuhblahEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Value
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Value;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Value != value)
                {
                    var __oldValue = _Value;
                    var __newValue = value;
                    NotifyPropertyChanging("Value", __oldValue, __newValue);
                    _Value = __newValue;
                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("Value");
                }
            }
        }
        private string _Value_store;
        private string _Value {
            get { return _Value_store; }
            set {
                ReportEfPropertyChanging("Value");
                _Value_store = value;
                ReportEfPropertyChanged("Value");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (string)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.MuhblahEfImpl>("Model.FK_Muhblah_value_StringCollection", "Muhblah");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            this._Value = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah_StringCollection_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah_StringCollection_CollectionEntryEfImpl)obj;
            var me = (Muhblah_StringCollection_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            me.Value = other.Value;
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Zetbox.App.Test.MuhblahEfImpl)Context.Find<Zetbox.App.Test.Muhblah>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Zetbox.App.Projekte
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="Projekt_AuditJournal_CollectionEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Projekt_AuditJournal_CollectionEntryEfImpl")]
    public class Projekt_AuditJournal_CollectionEntryEfImpl : Zetbox.DalProvider.Ef.CompoundCollectionEntryEfImpl<Zetbox.App.Projekte.Projekt, Zetbox.App.Projekte.ProjektEfImpl, Zetbox.App.Base.AuditEntry, Zetbox.App.Base.AuditEntryEfImpl>, Projekt_AuditJournal_CollectionEntry, Zetbox.API.IExportableValueCollectionEntryInternal
    {
[Obsolete]
public Projekt_AuditJournal_CollectionEntryEfImpl()
: base(null)
{
            _Value = new Zetbox.App.Base.AuditEntryEfImpl(null, this, "Value");
}
public Projekt_AuditJournal_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
            _Value = new Zetbox.App.Base.AuditEntryEfImpl(lazyCtx, this, "Value");
}
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        private static readonly Guid _propertyID = new Guid("4bef0e48-79c8-4776-a5de-bbb250599a40");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Zetbox.App.Projekte.Projekt; moduleNamespace=Zetbox.App.Projekte;
        // inverse Navigator=AuditJournal; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Projekte.Projekt Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Zetbox.App.Projekte.ProjektEfImpl)value; }
        }

        private int? _fk_Parent;

        /// <summary>ForeignKey Property for Parent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Parent
		{
			get { return Parent != null ? Parent.ID : (int?)null; }
			set { _fk_Parent = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Projekt_value_AuditJournal", "Projekt")]
        public Zetbox.App.Projekte.ProjektEfImpl ParentImpl
        {
            get
            {
                Zetbox.App.Projekte.ProjektEfImpl __value;
                EntityReference<Zetbox.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekt_value_AuditJournal",
                        "Projekt");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Projekte.ProjektEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>(
                        "Model.FK_Projekt_value_AuditJournal",
                        "Projekt");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Projekte.ProjektEfImpl __oldValue = (Zetbox.App.Projekte.ProjektEfImpl)r.Value;
                Zetbox.App.Projekte.ProjektEfImpl __newValue = (Zetbox.App.Projekte.ProjektEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("AuditJournal", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("AuditJournal", null, null);
                }

                r.Value = (Zetbox.App.Projekte.ProjektEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("AuditJournal", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("AuditJournal", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchParentAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Projekte.Projekt>(this.Parent);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Projekte.ProjektEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Base.AuditEntry Value
        {
            get { return ValueImpl; }
            set { ValueImpl = (Zetbox.App.Base.AuditEntryEfImpl)value; }
        }

        /// <summary>backing store for Value</summary>
        private Zetbox.App.Base.AuditEntryEfImpl _Value_store;
        private Zetbox.App.Base.AuditEntryEfImpl _Value {
            get { return _Value_store; }
            set {
                ReportEfPropertyChanging("ValueImpl");
                _Value_store = value;
                ReportEfPropertyChanged("ValueImpl");
            }
        }

        /// <summary>backing property for Value, takes care of attaching/detaching the values, mapped via EF</summary>
        [XmlIgnore()]
        [EdmComplexProperty()]
        public Zetbox.App.Base.AuditEntryEfImpl ValueImpl
        {
            get
            {
                return _Value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_Value, value))
                {
                    var __oldValue = _Value;
                    var __newValue = value;

                    NotifyPropertyChanging("Value", __oldValue, __newValue);

                    if (_Value != null)
                    {
                        _Value.DetachFromObject(this, "Value");
                    }
                    __newValue = (Zetbox.App.Base.AuditEntryEfImpl)__newValue.Clone();
                    _Value = __newValue;
                    _Value.AttachToObject(this, "Value");

                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
           // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (Zetbox.App.Base.AuditEntryEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Projekte.ProjektEfImpl>("Model.FK_Projekt_value_AuditJournal", "Projekt");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this.Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            {
                // use backing store to avoid notifications
                this.ValueImpl = binStream.ReadCompoundObject<Zetbox.App.Base.AuditEntryEfImpl>();
                this.ValueImpl.AttachToObject(this, "Value");
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Projekte")) XmlStreamer.ExportCompoundObject(this.Value, xml, "Value", "Zetbox.App.Projekte");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Projekte|Value":
                XmlStreamer.MergeImportCompoundObject(this.ValueImpl, xml);
                break;
            }
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(Projekt_AuditJournal_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Projekt_AuditJournal_CollectionEntryEfImpl)obj;
            var me = (Projekt_AuditJournal_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            if (me.Value == null && other.Value != null) {
                me.Value = (Zetbox.App.Base.AuditEntry)other.Value.Clone();
            } else if (me.Value != null && other.Value == null) {
                me.Value = null;
            } else if (me.Value != null && other.Value != null) {
                me.Value.ApplyChangesFrom(other.Value);
            }
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Zetbox.App.Projekte.ProjektEfImpl)Context.Find<Zetbox.App.Projekte.Projekt>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

namespace Zetbox.App.Test
{
    // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
    [EdmEntityType(NamespaceName="Model", Name="TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl")]
    public class TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl : Zetbox.DalProvider.Ef.CompoundCollectionEntryEfImpl<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectEfImpl, Zetbox.App.Test.TestPhoneCompoundObject, Zetbox.App.Test.TestPhoneCompoundObjectEfImpl>, TestCustomObject_PhoneNumbersOther_CollectionEntry
    {
[Obsolete]
public TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl()
: base(null)
{
            _Value = new Zetbox.App.Test.TestPhoneCompoundObjectEfImpl(null, this, "Value");
}
public TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl(Func<IFrozenContext> lazyCtx)
    : base(lazyCtx)
{
            _Value = new Zetbox.App.Test.TestPhoneCompoundObjectEfImpl(lazyCtx, this, "Value");
}
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        private static readonly Guid _propertyID = new Guid("0c0c1101-118a-4ce2-806c-d30a03b19dde");
        public override Guid PropertyID { get { return _propertyID; } }


        /// <summary>
        /// the A-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // fkBackingName=_fk_Parent; fkGuidBackingName=;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=PhoneNumbersOther; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject Parent
        {
            get { return ParentImpl; }
            set { ParentImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_Parent;

        /// <summary>ForeignKey Property for Parent's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Parent
		{
			get { return Parent != null ? Parent.ID : (int?)null; }
			set { _fk_Parent = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject")]
        public Zetbox.App.Test.TestCustomObjectEfImpl ParentImpl
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_TestCustomObject_value_PhoneNumbersOther",
                        "TestCustomObject");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.TestCustomObjectEfImpl __oldValue = (Zetbox.App.Test.TestCustomObjectEfImpl)r.Value;
                Zetbox.App.Test.TestCustomObjectEfImpl __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("PhoneNumbersOther", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("PhoneNumbersOther", null, null);
                }

                r.Value = (Zetbox.App.Test.TestCustomObjectEfImpl)__newValue;

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Parent", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("PhoneNumbersOther", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("PhoneNumbersOther", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchParentAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(this.Parent);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Parent
        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public Zetbox.API.IDataObject ParentObject
        {
            get { return Parent; }
            set { Parent = (Zetbox.App.Test.TestCustomObjectEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        /// <summary>
        /// the B-side value of this CollectionEntry
        /// </summary>
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate
        // implement the user-visible interface
        public Zetbox.App.Test.TestPhoneCompoundObject Value
        {
            get { return ValueImpl; }
            set { ValueImpl = (Zetbox.App.Test.TestPhoneCompoundObjectEfImpl)value; }
        }

        /// <summary>backing store for Value</summary>
        private Zetbox.App.Test.TestPhoneCompoundObjectEfImpl _Value_store;
        private Zetbox.App.Test.TestPhoneCompoundObjectEfImpl _Value {
            get { return _Value_store; }
            set {
                ReportEfPropertyChanging("ValueImpl");
                _Value_store = value;
                ReportEfPropertyChanged("ValueImpl");
            }
        }

        /// <summary>backing property for Value, takes care of attaching/detaching the values, mapped via EF</summary>
        [XmlIgnore()]
        [EdmComplexProperty()]
        public Zetbox.App.Test.TestPhoneCompoundObjectEfImpl ValueImpl
        {
            get
            {
                return _Value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value == null)
                    throw new ArgumentNullException("value");
                if (!object.Equals(_Value, value))
                {
                    var __oldValue = _Value;
                    var __newValue = value;

                    NotifyPropertyChanging("Value", __oldValue, __newValue);

                    if (_Value != null)
                    {
                        _Value.DetachFromObject(this, "Value");
                    }
                    __newValue = (Zetbox.App.Test.TestPhoneCompoundObjectEfImpl)__newValue.Clone();
                    _Value = __newValue;
                    _Value.AttachToObject(this, "Value");

                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;
                }
            }
        }
           // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.CompoundObjectPropertyTemplate        // BEGIN Zetbox.Generator.Templates.Properties.DelegatingProperty
        public object ValueObject
        {
            get { return Value; }
            set { Value = (Zetbox.App.Test.TestPhoneCompoundObjectEfImpl)value; }
        }
        // END Zetbox.Generator.Templates.Properties.DelegatingProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>("Model.FK_TestCustomObject_value_PhoneNumbersOther", "TestCustomObject");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this.Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_Parent);
            {
                // use backing store to avoid notifications
                this.ValueImpl = binStream.ReadCompoundObject<Zetbox.App.Test.TestPhoneCompoundObjectEfImpl>();
                this.ValueImpl.AttachToObject(this, "Value");
            }
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

        public override Type GetImplementedInterface()
        {
            return typeof(TestCustomObject_PhoneNumbersOther_CollectionEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl)obj;
            var me = (TestCustomObject_PhoneNumbersOther_CollectionEntryEfImpl)this;

            me._fk_Parent = other._fk_Parent;
            if (me.Value == null && other.Value != null) {
                me.Value = (Zetbox.App.Test.TestPhoneCompoundObject)other.Value.Clone();
            } else if (me.Value != null && other.Value == null) {
                me.Value = null;
            } else if (me.Value != null && other.Value != null) {
                me.Value.ApplyChangesFrom(other.Value);
            }
        }


        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;

            if (_fk_Parent.HasValue)
                Parent = (Zetbox.App.Test.TestCustomObjectEfImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_Parent.Value);
            else
                Parent = null;

        }


        public override void UpdateParent(string propertyName, IDataObject parentObj)
        {
            switch(propertyName)
            {
                case "Parent":
                    {
                        var __oldValue = _fk_Parent;
                        var __newValue = parentObj == null ? (int?)null : parentObj.ID;
                        NotifyPropertyChanging("Parent", __oldValue, __newValue);
                        _fk_Parent = __newValue;
                        NotifyPropertyChanged("Parent", __oldValue, __newValue);
                    }
                    break;
                default:
                    base.UpdateParent(propertyName, parentObj);
                    break;
            }
        }
    }
    // END Zetbox.DalProvider.Ef.Generator.Templates.CollectionEntries.ValueCollectionEntry
}

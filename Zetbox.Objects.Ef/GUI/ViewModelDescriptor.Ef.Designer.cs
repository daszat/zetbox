// <autogenerated/>

namespace Zetbox.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ViewModelDescriptorEfImpl")]
    [System.Diagnostics.DebuggerDisplay("ViewModelDescriptor")]
    public class ViewModelDescriptorEfImpl : BaseServerDataObject_EntityFramework, ViewModelDescriptor, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("5d152c6f-6c1e-48b7-b03e-669e30468808");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public ViewModelDescriptorEfImpl()
            : base(null)
        {
        }

        public ViewModelDescriptorEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly. Defaults to DefaultKind with editing disabled.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultDisplayKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultDisplayKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
        // fkBackingName=_fk_DefaultDisplayKind; fkGuidBackingName=_fk_guid_DefaultDisplayKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind DefaultDisplayKind
        {
            get { return DefaultDisplayKindImpl; }
            set { DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultDisplayKind;

        /// <summary>ForeignKey Property for DefaultDisplayKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultDisplayKind
		{
			get { return DefaultDisplayKind != null ? DefaultDisplayKind.ID : (int?)null; }
			set { _fk_DefaultDisplayKind = value; }
		}

        private Guid? _fk_guid_DefaultDisplayKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultDisplayKind", "DefaultDisplayKind")]
        public Zetbox.App.GUI.ControlKindEfImpl DefaultDisplayKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultDisplayKind",
                        "DefaultDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultDisplayKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultDisplayKind",
                        "DefaultDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultDisplayKind", __oldValue, __newValue);

                if (OnDefaultDisplayKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultDisplayKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultDisplayKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultDisplayKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultDisplayKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.DefaultDisplayKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultDisplayKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultDisplayKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultDisplayKind_IsValid;

        /// <summary>
        /// The default ControlKind to use for this Presentable.
        /// </summary>
    /*
    Relation: FK_Presentable_has_DefaultKind
    A: ZeroOrMore ViewModelDescriptor as Presentable
    B: ZeroOrOne ControlKind as DefaultKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
        // fkBackingName=_fk_DefaultEditorKind; fkGuidBackingName=_fk_guid_DefaultEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind DefaultEditorKind
        {
            get { return DefaultEditorKindImpl; }
            set { DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultEditorKind;

        /// <summary>ForeignKey Property for DefaultEditorKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultEditorKind
		{
			get { return DefaultEditorKind != null ? DefaultEditorKind.ID : (int?)null; }
			set { _fk_DefaultEditorKind = value; }
		}

        private Guid? _fk_guid_DefaultEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_has_DefaultKind", "DefaultKind")]
        public Zetbox.App.GUI.ControlKindEfImpl DefaultEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_has_DefaultKind",
                        "DefaultKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Presentable_has_DefaultKind",
                        "DefaultKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultEditorKind", __oldValue, __newValue);

                if (OnDefaultEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultEditorKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.DefaultEditorKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultEditorKind_IsValid;

        /// <summary>
        /// The default ControlKind to use for displaying this Presentable readonly in a GridCell. Defaults to DefaultDisplayKind.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultGridDisplayKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultGridDisplayKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
        // fkBackingName=_fk_DefaultGridCellDisplayKind; fkGuidBackingName=_fk_guid_DefaultGridCellDisplayKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind DefaultGridCellDisplayKind
        {
            get { return DefaultGridCellDisplayKindImpl; }
            set { DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellDisplayKind;

        /// <summary>ForeignKey Property for DefaultGridCellDisplayKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultGridCellDisplayKind
		{
			get { return DefaultGridCellDisplayKind != null ? DefaultGridCellDisplayKind.ID : (int?)null; }
			set { _fk_DefaultGridCellDisplayKind = value; }
		}

        private Guid? _fk_guid_DefaultGridCellDisplayKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultGridDisplayKind", "DefaultGridDisplayKind")]
        public Zetbox.App.GUI.ControlKindEfImpl DefaultGridCellDisplayKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind",
                        "DefaultGridDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultGridCellDisplayKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellDisplayKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind",
                        "DefaultGridDisplayKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellDisplayKind", __oldValue, __newValue);

                if (OnDefaultGridCellDisplayKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellDisplayKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellDisplayKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellDisplayKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultGridCellDisplayKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.DefaultGridCellDisplayKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellDisplayKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellDisplayKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellDisplayKind_IsValid;

        /// <summary>
        /// The default ControlKind for displaying this model in a GridCell in editing mode. Defaults to DefaultKind.
        /// </summary>
    /*
    Relation: FK_ViewModel_displayed_by_DefaultGridCellEditorKind
    A: ZeroOrMore ViewModelDescriptor as ViewModel
    B: ZeroOrOne ControlKind as DefaultGridCellEditorKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
        // fkBackingName=_fk_DefaultGridCellEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind DefaultGridCellEditorKind
        {
            get { return DefaultGridCellEditorKindImpl; }
            set { DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellEditorKind;

        /// <summary>ForeignKey Property for DefaultGridCellEditorKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultGridCellEditorKind
		{
			get { return DefaultGridCellEditorKind != null ? DefaultGridCellEditorKind.ID : (int?)null; }
			set { _fk_DefaultGridCellEditorKind = value; }
		}

        private Guid? _fk_guid_DefaultGridCellEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModel_displayed_by_DefaultGridCellEditorKind", "DefaultGridCellEditorKind")]
        public Zetbox.App.GUI.ControlKindEfImpl DefaultGridCellEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind",
                        "DefaultGridCellEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultGridCellEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind",
                        "DefaultGridCellEditorKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultGridCellEditorKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.DefaultGridCellEditorKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellEditorKind_IsValid;

        /// <summary>
        /// .The default ControlKind for displaying this model in a GridCell befor editing starts. Defaults to DefaultGridCellDisplayKind.
        /// </summary>
    /*
    Relation: FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind
    A: ZeroOrMore ViewModelDescriptor as ViewModelDescriptor
    B: ZeroOrOne ControlKind as DefaultGridCellKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
        // fkBackingName=_fk_DefaultGridCellPreEditorKind; fkGuidBackingName=_fk_guid_DefaultGridCellPreEditorKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind DefaultGridCellPreEditorKind
        {
            get { return DefaultGridCellPreEditorKindImpl; }
            set { DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_DefaultGridCellPreEditorKind;

        /// <summary>ForeignKey Property for DefaultGridCellPreEditorKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultGridCellPreEditorKind
		{
			get { return DefaultGridCellPreEditorKind != null ? DefaultGridCellPreEditorKind.ID : (int?)null; }
			set { _fk_DefaultGridCellPreEditorKind = value; }
		}

        private Guid? _fk_guid_DefaultGridCellPreEditorKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind", "DefaultGridCellKind")]
        public Zetbox.App.GUI.ControlKindEfImpl DefaultGridCellPreEditorKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind",
                        "DefaultGridCellKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultGridCellPreEditorKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnDefaultGridCellPreEditorKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind",
                        "DefaultGridCellKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultGridCellPreEditorKind", __oldValue, __newValue);

                if (OnDefaultGridCellPreEditorKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnDefaultGridCellPreEditorKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnDefaultGridCellPreEditorKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultGridCellPreEditorKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultGridCellPreEditorKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.DefaultGridCellPreEditorKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultGridCellPreEditorKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind> OnDefaultGridCellPreEditorKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDefaultGridCellPreEditorKind_IsValid;

        /// <summary>
        /// Indicates that the referenced viewmodel type is deleted. Descriptors with this flag set require action to finally delete them and handle their users.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool Deleted
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Deleted;
                if (!_isDeletedSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9c3935a1-2d3f-4d43-b8af-638e323b64c6"));
                    if (__p != null) {
                        _isDeletedSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._Deleted = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewModelDescriptor.Deleted'");
                    }
                }
                if (OnDeleted_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnDeleted_Getter(this, __e);
                    __result = _Deleted = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isDeletedSet = true;
                if (_Deleted != value)
                {
                    var __oldValue = _Deleted;
                    var __newValue = value;
                    if (OnDeleted_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnDeleted_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Deleted", __oldValue, __newValue);
                    _Deleted = __newValue;
                    NotifyPropertyChanged("Deleted", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDeleted_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnDeleted_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Deleted");
                }
            }
        }
        private bool _Deleted_store;
        private bool _Deleted {
            get { return _Deleted_store; }
            set {
                ReportEfPropertyChanging("Deleted");
                _Deleted_store = value;
                ReportEfPropertyChanged("Deleted");
            }
        }
        private bool _isDeletedSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, bool> OnDeleted_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, bool> OnDeleted_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, bool> OnDeleted_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDeleted_IsValid;

        /// <summary>
        /// describe this ViewModel
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description_store;
        private string _Description {
            get { return _Description_store; }
            set {
                ReportEfPropertyChanging("Description");
                _Description_store = value;
                ReportEfPropertyChanged("Description");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnDescription_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewModelDescriptor.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ViewModelDescriptor_has_Module
    A: ZeroOrMore ViewModelDescriptor as ViewModelDescriptor
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewModelDescriptor_has_Module", "Module")]
        public Zetbox.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleEfImpl __value;
                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewModelDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewModelDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ModuleEfImpl __oldValue = (Zetbox.App.Base.ModuleEfImpl)r.Value;
                Zetbox.App.Base.ModuleEfImpl __newValue = (Zetbox.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Presentable_displayedBy_SecondaryControlKinds
    A: ZeroOrMore ViewModelDescriptor as Presentable
    B: ZeroOrMore ControlKind as SecondaryControlKinds
    Preferred Storage: Separate
    */
        // collection reference property
        // Zetbox.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.GUI.ControlKind> SecondaryControlKinds
        {
            get
            {
                if (_SecondaryControlKinds == null)
                {
                    _SecondaryControlKinds = new BSideCollectionWrapper<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl, EntityCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl>>(
                            this,
                            SecondaryControlKindsImpl);
                }
                return _SecondaryControlKinds;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_displayedBy_SecondaryControlKinds_A", "CollectionEntry")]
        public EntityCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl> SecondaryControlKindsImpl
        {
            get
            {
                return GetSecondaryControlKindsImplCollection();
            }
        }

        private EntityCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl> _SecondaryControlKindsImplEntityCollection;
        internal EntityCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl> GetSecondaryControlKindsImplCollection()
        {
            if (_SecondaryControlKindsImplEntityCollection == null)
            {
                _SecondaryControlKindsImplEntityCollection
                    = ((IEntityWithRelationships)(this)).RelationshipManager
                        .GetRelatedCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl>(
                            "Model.FK_Presentable_displayedBy_SecondaryControlKinds_A",
                            "CollectionEntry");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_SecondaryControlKindsImplEntityCollection.IsLoaded)
                {
                    _SecondaryControlKindsImplEntityCollection.Load();
                }
                _SecondaryControlKindsImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("SecondaryControlKinds", null, null); if(OnSecondaryControlKinds_PostSetter != null && IsAttached) OnSecondaryControlKinds_PostSetter(this); };
            }
            return _SecondaryControlKindsImplEntityCollection;
        }
        private BSideCollectionWrapper<Zetbox.App.GUI.ViewModelDescriptor, Zetbox.App.GUI.ControlKind, Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl, EntityCollection<Zetbox.App.GUI.Presentable_displayedBy_SecondaryControlKinds_RelationEntryEfImpl>> _SecondaryControlKinds;

        public Zetbox.API.Async.ZbTask TriggerFetchSecondaryControlKindsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.GUI.ControlKind>>(this.SecondaryControlKinds);
        }

public static event PropertyListChangedHandler<Zetbox.App.GUI.ViewModelDescriptor> OnSecondaryControlKinds_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnSecondaryControlKinds_IsValid;

        /// <summary>
        /// The described CLR class&apos; Type
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string ViewModelTypeRef
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ViewModelTypeRef;
                if (OnViewModelTypeRef_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnViewModelTypeRef_Getter(this, __e);
                    __result = _ViewModelTypeRef = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ViewModelTypeRef != value)
                {
                    var __oldValue = _ViewModelTypeRef;
                    var __newValue = value;
                    if (OnViewModelTypeRef_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnViewModelTypeRef_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ViewModelTypeRef", __oldValue, __newValue);
                    _ViewModelTypeRef = __newValue;
                    NotifyPropertyChanged("ViewModelTypeRef", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnViewModelTypeRef_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnViewModelTypeRef_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ViewModelTypeRef");
                }
            }
        }
        private string _ViewModelTypeRef_store;
        private string _ViewModelTypeRef {
            get { return _ViewModelTypeRef_store; }
            set {
                ReportEfPropertyChanging("ViewModelTypeRef");
                _ViewModelTypeRef_store = value;
                ReportEfPropertyChanged("ViewModelTypeRef");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnViewModelTypeRef_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnViewModelTypeRef_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewModelDescriptor, string> OnViewModelTypeRef_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewModelDescriptor> OnViewModelTypeRef_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ViewModelDescriptor")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ViewModelDescriptor != null)
            {
                OnGetName_ViewModelDescriptor(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ViewModelDescriptor.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ViewModelDescriptor> OnGetName_ViewModelDescriptor;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ViewModelDescriptor> OnGetName_ViewModelDescriptor_CanExec;

        [EventBasedMethod("OnGetName_ViewModelDescriptor_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ViewModelDescriptor_CanExec != null)
				{
					OnGetName_ViewModelDescriptor_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ViewModelDescriptor> OnGetName_ViewModelDescriptor_CanExecReason;

        [EventBasedMethod("OnGetName_ViewModelDescriptor_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ViewModelDescriptor_CanExecReason != null)
				{
					OnGetName_ViewModelDescriptor_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ViewModelDescriptor);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewModelDescriptor)obj;
            var otherImpl = (ViewModelDescriptorEfImpl)obj;
            var me = (ViewModelDescriptor)this;

            me.Deleted = other.Deleted;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.ViewModelTypeRef = other.ViewModelTypeRef;
            this._fk_DefaultDisplayKind = otherImpl._fk_DefaultDisplayKind;
            this._fk_DefaultEditorKind = otherImpl._fk_DefaultEditorKind;
            this._fk_DefaultGridCellDisplayKind = otherImpl._fk_DefaultGridCellDisplayKind;
            this._fk_DefaultGridCellEditorKind = otherImpl._fk_DefaultGridCellEditorKind;
            this._fk_DefaultGridCellPreEditorKind = otherImpl._fk_DefaultGridCellPreEditorKind;
            this._fk_Module = otherImpl._fk_Module;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "DefaultDisplayKind":
                case "DefaultEditorKind":
                case "DefaultGridCellDisplayKind":
                case "DefaultGridCellEditorKind":
                case "DefaultGridCellPreEditorKind":
                case "Deleted":
                case "Description":
                case "ExportGuid":
                case "Module":
                case "ViewModelTypeRef":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "SecondaryControlKinds":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "DefaultDisplayKind":
                return TriggerFetchDefaultDisplayKindAsync();
            case "DefaultEditorKind":
                return TriggerFetchDefaultEditorKindAsync();
            case "DefaultGridCellDisplayKind":
                return TriggerFetchDefaultGridCellDisplayKindAsync();
            case "DefaultGridCellEditorKind":
                return TriggerFetchDefaultGridCellEditorKindAsync();
            case "DefaultGridCellPreEditorKind":
                return TriggerFetchDefaultGridCellPreEditorKindAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "SecondaryControlKinds":
                return TriggerFetchSecondaryControlKindsAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultDisplayKind.Value);
            else
            if (_fk_DefaultDisplayKind.HasValue)
                DefaultDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultDisplayKind.Value);
            else
                DefaultDisplayKindImpl = null;

            if (_fk_guid_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultEditorKind.Value);
            else
            if (_fk_DefaultEditorKind.HasValue)
                DefaultEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultEditorKind.Value);
            else
                DefaultEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellDisplayKind.Value);
            else
            if (_fk_DefaultGridCellDisplayKind.HasValue)
                DefaultGridCellDisplayKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellDisplayKind.Value);
            else
                DefaultGridCellDisplayKindImpl = null;

            if (_fk_guid_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellEditorKind.Value);
            else
            if (_fk_DefaultGridCellEditorKind.HasValue)
                DefaultGridCellEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellEditorKind.Value);
            else
                DefaultGridCellEditorKindImpl = null;

            if (_fk_guid_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_DefaultGridCellPreEditorKind.Value);
            else
            if (_fk_DefaultGridCellPreEditorKind.HasValue)
                DefaultGridCellPreEditorKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_DefaultGridCellPreEditorKind.Value);
            else
                DefaultGridCellPreEditorKindImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("067ed744-cd2c-4c8b-9829-cf7d0b16df60"),
                        "DefaultDisplayKind",
                        null,
                        obj => obj.DefaultDisplayKind,
                        (obj, val) => obj.DefaultDisplayKind = val,
						obj => OnDefaultDisplayKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("b535115c-b847-479d-bdea-a7994ae6eeca"),
                        "DefaultEditorKind",
                        null,
                        obj => obj.DefaultEditorKind,
                        (obj, val) => obj.DefaultEditorKind = val,
						obj => OnDefaultEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("20fb1478-5e20-48e3-b418-c101397d15d1"),
                        "DefaultGridCellDisplayKind",
                        null,
                        obj => obj.DefaultGridCellDisplayKind,
                        (obj, val) => obj.DefaultGridCellDisplayKind = val,
						obj => OnDefaultGridCellDisplayKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("7a093e89-a9ea-46ca-aeb6-cd3a1740714a"),
                        "DefaultGridCellEditorKind",
                        null,
                        obj => obj.DefaultGridCellEditorKind,
                        (obj, val) => obj.DefaultGridCellEditorKind = val,
						obj => OnDefaultGridCellEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("6c744476-35e0-4cef-a221-f02abc81566c"),
                        "DefaultGridCellPreEditorKind",
                        null,
                        obj => obj.DefaultGridCellPreEditorKind,
                        (obj, val) => obj.DefaultGridCellPreEditorKind = val,
						obj => OnDefaultGridCellPreEditorKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, bool>(
                        lazyCtx,
                        new Guid("9c3935a1-2d3f-4d43-b8af-638e323b64c6"),
                        "Deleted",
                        null,
                        obj => obj.Deleted,
                        (obj, val) => obj.Deleted = val,
						obj => OnDeleted_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, string>(
                        lazyCtx,
                        new Guid("93e25648-50f9-40d8-8753-e5dadab68e1d"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Guid>(
                        lazyCtx,
                        new Guid("77ce1e5b-f244-4279-af13-b3e75b55f933"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("0b7135d3-dedc-4091-a0c4-690c1b4a2b6d"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, ICollection<Zetbox.App.GUI.ControlKind>>(
                        lazyCtx,
                        new Guid("5e2e007c-2e90-4ba6-9c9d-46e62b662ff9"),
                        "SecondaryControlKinds",
                        null,
                        obj => obj.SecondaryControlKinds,
                        null, // lists are read-only properties
                        obj => OnSecondaryControlKinds_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewModelDescriptor, string>(
                        lazyCtx,
                        new Guid("b3cae453-e222-4d24-b6f5-47f47550ad7a"),
                        "ViewModelTypeRef",
                        null,
                        obj => obj.ViewModelTypeRef,
                        (obj, val) => obj.ViewModelTypeRef = val,
						obj => OnViewModelTypeRef_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ViewModelDescriptor")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewModelDescriptor != null)
            {
                OnToString_ViewModelDescriptor(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ViewModelDescriptor> OnToString_ViewModelDescriptor;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ViewModelDescriptor")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ViewModelDescriptor != null)
            {
                OnObjectIsValid_ViewModelDescriptor(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ViewModelDescriptor> OnObjectIsValid_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyPreSave_ViewModelDescriptor")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_ViewModelDescriptor != null) OnNotifyPreSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyPreSave_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyPostSave_ViewModelDescriptor")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ViewModelDescriptor != null) OnNotifyPostSave_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyPostSave_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyCreated_ViewModelDescriptor")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("DefaultDisplayKind");
            SetNotInitializedProperty("DefaultEditorKind");
            SetNotInitializedProperty("DefaultGridCellDisplayKind");
            SetNotInitializedProperty("DefaultGridCellEditorKind");
            SetNotInitializedProperty("DefaultGridCellPreEditorKind");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("ViewModelTypeRef");
            base.NotifyCreated();
            if (OnNotifyCreated_ViewModelDescriptor != null) OnNotifyCreated_ViewModelDescriptor(this);
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyCreated_ViewModelDescriptor;

        [EventBasedMethod("OnNotifyDeleting_ViewModelDescriptor")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ViewModelDescriptor != null) OnNotifyDeleting_ViewModelDescriptor(this);
            SecondaryControlKinds.Clear();
            DefaultDisplayKind = null;
            DefaultEditorKind = null;
            DefaultGridCellDisplayKind = null;
            DefaultGridCellEditorKind = null;
            DefaultGridCellPreEditorKind = null;
            Module = null;
        }
        public static event ObjectEventHandler<ViewModelDescriptor> OnNotifyDeleting_ViewModelDescriptor;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultDisplayKind", "DefaultDisplayKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_Presentable_has_DefaultKind", "DefaultKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(DefaultEditorKind);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridDisplayKind", "DefaultGridDisplayKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_ViewModel_displayed_by_DefaultGridCellEditorKind", "DefaultGridCellEditorKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_ViewModelDescriptor_displayedInGridBy_DefaultGridCellKind", "DefaultGridCellKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(DefaultGridCellPreEditorKind);
            }
            binStream.Write(this._isDeletedSet);
            if (this._isDeletedSet) {
                binStream.Write(this._Deleted);
            }
            binStream.Write(this._Description);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>("Model.FK_ViewModelDescriptor_has_Module", "Module");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._ViewModelTypeRef);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_DefaultDisplayKind);
            binStream.Read(out this._fk_DefaultEditorKind);
            binStream.Read(out this._fk_DefaultGridCellDisplayKind);
            binStream.Read(out this._fk_DefaultGridCellEditorKind);
            binStream.Read(out this._fk_DefaultGridCellPreEditorKind);
            this._isDeletedSet = binStream.ReadBoolean();
            if (this._isDeletedSet) {
                this._Deleted = binStream.ReadBoolean();
            }
            this._Description = binStream.ReadString();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_Module);
            this._ViewModelTypeRef = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultDisplayKind != null ? DefaultDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultDisplayKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultEditorKind != null ? DefaultEditorKind.ExportGuid : (Guid?)null, xml, "DefaultEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellDisplayKind != null ? DefaultGridCellDisplayKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellDisplayKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellEditorKind != null ? DefaultGridCellEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultGridCellPreEditorKind != null ? DefaultGridCellPreEditorKind.ExportGuid : (Guid?)null, xml, "DefaultGridCellPreEditorKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._Deleted, xml, "Deleted", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ViewModelTypeRef, xml, "ViewModelTypeRef", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|DefaultDisplayKind":
                this._fk_guid_DefaultDisplayKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultEditorKind":
                this._fk_guid_DefaultEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellDisplayKind":
                this._fk_guid_DefaultGridCellDisplayKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellEditorKind":
                this._fk_guid_DefaultGridCellEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|DefaultGridCellPreEditorKind":
                this._fk_guid_DefaultGridCellPreEditorKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|Deleted":
                // Import must have default value set
                this._Deleted = XmlStreamer.ReadBoolean(xml);
                this._isDeletedSet = true;
                break;
            case "Zetbox.App.GUI|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.GUI|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ViewModelTypeRef":
                this._ViewModelTypeRef = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
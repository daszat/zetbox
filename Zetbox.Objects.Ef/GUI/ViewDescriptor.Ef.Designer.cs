// <autogenerated/>

namespace Zetbox.App.GUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ViewDescriptorEfImpl")]
    [System.Diagnostics.DebuggerDisplay("ViewDescriptor")]
    public class ViewDescriptorEfImpl : BaseServerDataObject_EntityFramework, ViewDescriptor, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("ffda4604-1536-43b6-b951-f8753d5092ca");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public ViewDescriptorEfImpl()
            : base(null)
        {
        }

        public ViewDescriptorEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ViewDescriptor_is_a_ControlKind
    A: ZeroOrMore ViewDescriptor as ViewDescriptor
    B: ZeroOrOne ControlKind as ControlKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ControlKind
        // fkBackingName=_fk_ControlKind; fkGuidBackingName=_fk_guid_ControlKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind ControlKind
        {
            get { return ControlKindImpl; }
            set { ControlKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_ControlKind;

        /// <summary>ForeignKey Property for ControlKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ControlKind
		{
			get { return ControlKind != null ? ControlKind.ID : (int?)null; }
			set { _fk_ControlKind = value; }
		}

        private Guid? _fk_guid_ControlKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewDescriptor_is_a_ControlKind", "ControlKind")]
        public Zetbox.App.GUI.ControlKindEfImpl ControlKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewDescriptor_is_a_ControlKind",
                        "ControlKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnControlKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnControlKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_ViewDescriptor_is_a_ControlKind",
                        "ControlKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ControlKind", __oldValue, __newValue);

                if (OnControlKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnControlKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnControlKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnControlKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ControlKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchControlKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.ControlKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ControlKind
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.ControlKind> OnControlKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.ControlKind> OnControlKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.ControlKind> OnControlKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnControlKind_IsValid;

        /// <summary>
        /// The control implementing this View.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string ControlTypeRef
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ControlTypeRef;
                if (OnControlTypeRef_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnControlTypeRef_Getter(this, __e);
                    __result = _ControlTypeRef = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ControlTypeRef != value)
                {
                    var __oldValue = _ControlTypeRef;
                    var __newValue = value;
                    if (OnControlTypeRef_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnControlTypeRef_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ControlTypeRef", __oldValue, __newValue);
                    _ControlTypeRef = __newValue;
                    NotifyPropertyChanged("ControlTypeRef", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnControlTypeRef_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnControlTypeRef_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ControlTypeRef");
                }
            }
        }
        private string _ControlTypeRef_store;
        private string _ControlTypeRef {
            get { return _ControlTypeRef_store; }
            set {
                ReportEfPropertyChanging("ControlTypeRef");
                _ControlTypeRef_store = value;
                ReportEfPropertyChanged("ControlTypeRef");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, string> OnControlTypeRef_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, string> OnControlTypeRef_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, string> OnControlTypeRef_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnControlTypeRef_IsValid;

        /// <summary>
        /// Indicates that the referenced control type is deleted. Descriptors with this flag set require action to finally delete them and handle their users.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool Deleted
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Deleted;
                if (!_isDeletedSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("4b256764-6a40-47cb-a222-242a36e06457"));
                    if (__p != null) {
                        _isDeletedSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._Deleted = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewDescriptor.Deleted'");
                    }
                }
                if (OnDeleted_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnDeleted_Getter(this, __e);
                    __result = _Deleted = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isDeletedSet = true;
                if (_Deleted != value)
                {
                    var __oldValue = _Deleted;
                    var __newValue = value;
                    if (OnDeleted_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnDeleted_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Deleted", __oldValue, __newValue);
                    _Deleted = __newValue;
                    NotifyPropertyChanged("Deleted", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDeleted_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnDeleted_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Deleted");
                }
            }
        }
        private bool _Deleted_store;
        private bool _Deleted {
            get { return _Deleted_store; }
            set {
                ReportEfPropertyChanging("Deleted");
                _Deleted_store = value;
                ReportEfPropertyChanged("Deleted");
            }
        }
        private bool _isDeletedSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, bool> OnDeleted_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, bool> OnDeleted_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, bool> OnDeleted_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnDeleted_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("94140a56-9fed-4d65-8c2c-cb8e658dff96"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ViewDescriptor.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ViewDescriptor_has_Module
    A: ZeroOrMore ViewDescriptor as ViewDescriptor
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ViewDescriptor_has_Module", "Module")]
        public Zetbox.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleEfImpl __value;
                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_ViewDescriptor_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ModuleEfImpl __oldValue = (Zetbox.App.Base.ModuleEfImpl)r.Value;
                Zetbox.App.Base.ModuleEfImpl __newValue = (Zetbox.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnModule_IsValid;

        /// <summary>
        /// Which toolkit provides this View
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
        public Zetbox.App.GUI.Toolkit Toolkit
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Toolkit;
                if (OnToolkit_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.GUI.Toolkit>(__result);
                    OnToolkit_Getter(this, __e);
                    __result = _Toolkit = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Toolkit != value)
                {
                    var __oldValue = _Toolkit;
                    var __newValue = value;
                    if (OnToolkit_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.Toolkit>(__oldValue, __newValue);
                        OnToolkit_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Toolkit", __oldValue, __newValue);
                    _Toolkit = __newValue;
                    NotifyPropertyChanged("Toolkit", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnToolkit_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.Toolkit>(__oldValue, __newValue);
                        OnToolkit_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Toolkit");
                }
            }
        }
        private Zetbox.App.GUI.Toolkit _Toolkit_store;
        private Zetbox.App.GUI.Toolkit _Toolkit {
            get { return _Toolkit_store; }
            set {
                ReportEfPropertyChanging("ToolkitImpl");
                _Toolkit_store = value;
                ReportEfPropertyChanged("ToolkitImpl");
            }
        }

        /// <summary>EF sees only this property, for Toolkit</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int ToolkitImpl
        {
            get
            {
                return (int)this.Toolkit;
            }
            set
            {
                this.Toolkit = (Zetbox.App.GUI.Toolkit)value;
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
		public static event PropertyGetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.Toolkit> OnToolkit_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.Toolkit> OnToolkit_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.GUI.ViewDescriptor, Zetbox.App.GUI.Toolkit> OnToolkit_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.GUI.ViewDescriptor> OnToolkit_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(ViewDescriptor);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ViewDescriptor)obj;
            var otherImpl = (ViewDescriptorEfImpl)obj;
            var me = (ViewDescriptor)this;

            me.ControlTypeRef = other.ControlTypeRef;
            me.Deleted = other.Deleted;
            me.ExportGuid = other.ExportGuid;
            me.Toolkit = other.Toolkit;
            this._fk_ControlKind = otherImpl._fk_ControlKind;
            this._fk_Module = otherImpl._fk_Module;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ControlKind":
                case "ControlTypeRef":
                case "Deleted":
                case "ExportGuid":
                case "Module":
                case "Toolkit":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ControlKind":
                return TriggerFetchControlKindAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_ControlKind.HasValue)
                ControlKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_ControlKind.Value);
            else
            if (_fk_ControlKind.HasValue)
                ControlKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_ControlKind.Value);
            else
                ControlKindImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("7720b38c-64af-4607-bc73-d015af6612e3"),
                        "ControlKind",
                        null,
                        obj => obj.ControlKind,
                        (obj, val) => obj.ControlKind = val,
						obj => OnControlKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, string>(
                        lazyCtx,
                        new Guid("180968cf-8705-433f-9346-e726c8552737"),
                        "ControlTypeRef",
                        null,
                        obj => obj.ControlTypeRef,
                        (obj, val) => obj.ControlTypeRef = val,
						obj => OnControlTypeRef_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, bool>(
                        lazyCtx,
                        new Guid("4b256764-6a40-47cb-a222-242a36e06457"),
                        "Deleted",
                        null,
                        obj => obj.Deleted,
                        (obj, val) => obj.Deleted = val,
						obj => OnDeleted_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, Guid>(
                        lazyCtx,
                        new Guid("94140a56-9fed-4d65-8c2c-cb8e658dff96"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("25da3568-f362-4441-841e-7c163b10b983"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ViewDescriptor, Zetbox.App.GUI.Toolkit>(
                        lazyCtx,
                        new Guid("2a798728-d79d-471f-be51-1f488beb8dc1"),
                        "Toolkit",
                        null,
                        obj => obj.Toolkit,
                        (obj, val) => obj.Toolkit = val,
						obj => OnToolkit_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ViewDescriptor")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ViewDescriptor != null)
            {
                OnToString_ViewDescriptor(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ViewDescriptor> OnToString_ViewDescriptor;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ViewDescriptor")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ViewDescriptor != null)
            {
                OnObjectIsValid_ViewDescriptor(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ViewDescriptor> OnObjectIsValid_ViewDescriptor;

        [EventBasedMethod("OnNotifyPreSave_ViewDescriptor")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_ViewDescriptor != null) OnNotifyPreSave_ViewDescriptor(this);
        }
        public static event ObjectEventHandler<ViewDescriptor> OnNotifyPreSave_ViewDescriptor;

        [EventBasedMethod("OnNotifyPostSave_ViewDescriptor")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ViewDescriptor != null) OnNotifyPostSave_ViewDescriptor(this);
        }
        public static event ObjectEventHandler<ViewDescriptor> OnNotifyPostSave_ViewDescriptor;

        [EventBasedMethod("OnNotifyCreated_ViewDescriptor")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ControlKind");
            SetNotInitializedProperty("ControlTypeRef");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Toolkit");
            base.NotifyCreated();
            if (OnNotifyCreated_ViewDescriptor != null) OnNotifyCreated_ViewDescriptor(this);
        }
        public static event ObjectEventHandler<ViewDescriptor> OnNotifyCreated_ViewDescriptor;

        [EventBasedMethod("OnNotifyDeleting_ViewDescriptor")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ViewDescriptor != null) OnNotifyDeleting_ViewDescriptor(this);
            ControlKind = null;
            Module = null;
        }
        public static event ObjectEventHandler<ViewDescriptor> OnNotifyDeleting_ViewDescriptor;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_ViewDescriptor_is_a_ControlKind", "ControlKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._ControlTypeRef);
            binStream.Write(this._isDeletedSet);
            if (this._isDeletedSet) {
                binStream.Write(this._Deleted);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>("Model.FK_ViewDescriptor_has_Module", "Module");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write((int?)_Toolkit);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ControlKind);
            this._ControlTypeRef = binStream.ReadString();
            this._isDeletedSet = binStream.ReadBoolean();
            if (this._isDeletedSet) {
                this._Deleted = binStream.ReadBoolean();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_Module);
            _Toolkit = (Zetbox.App.GUI.Toolkit)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(ControlKind != null ? ControlKind.ExportGuid : (Guid?)null, xml, "ControlKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._ControlTypeRef, xml, "ControlTypeRef", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._Deleted, xml, "Deleted", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream((int?)_Toolkit, xml, "Toolkit", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.GUI|ControlKind":
                this._fk_guid_ControlKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|ControlTypeRef":
                this._ControlTypeRef = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|Deleted":
                // Import must have default value set
                this._Deleted = XmlStreamer.ReadBoolean(xml);
                this._isDeletedSet = true;
                break;
            case "Zetbox.App.GUI|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.GUI|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|Toolkit":
                _Toolkit = (Zetbox.App.GUI.Toolkit)XmlStreamer.ReadNullableInt32(xml);
               break;
            }
        }

        #endregion

    }
}
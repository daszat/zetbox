// <autogenerated/>

namespace Zetbox.App.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="MuhblahEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Muhblah")]
    public class MuhblahEfImpl : BaseServerDataObject_EntityFramework, Muhblah
    {
        private static readonly Guid _objectClassID = new Guid("fd357e42-2c2c-4bef-8110-69a466d09af0");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public MuhblahEfImpl()
            : base(null)
        {
        }

        public MuhblahEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        // value list property
        // Zetbox.DalProvider.Ef.Generator.Templates.Properties.ValueCollectionProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<string> StringCollection
        {
            get
            {
                if (_StringCollection == null)
                {
                    _StringCollection = new EfValueCollectionWrapper<Muhblah, string, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl, EntityCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl>>(
                        this.Context,
                        this,
                        null, // see GetStringCollectionImplCollection()
                        StringCollectionImpl);
                }
                return _StringCollection;
            }
        }

        [EdmRelationshipNavigationProperty("Model", "FK_Muhblah_value_StringCollection", "CollectionEntry")]
        public EntityCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl> StringCollectionImpl
        {
            get
            {
                return GetStringCollectionImplCollection();
            }
        }

        internal EntityCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl> GetStringCollectionImplCollection()
        {
            if (_StringCollectionImplEntityCollection == null)
            {
                _StringCollectionImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl>(
                        "Model.FK_Muhblah_value_StringCollection",
                        "CollectionEntry");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_StringCollectionImplEntityCollection.IsLoaded)
                {
                    _StringCollectionImplEntityCollection.Load();
                }
                _StringCollectionImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("StringCollection", null, null); if (OnStringCollection_PostSetter != null && IsAttached) OnStringCollection_PostSetter(this); };
            }
            return _StringCollectionImplEntityCollection;
        }
        private EntityCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl> _StringCollectionImplEntityCollection;
        private EfValueCollectionWrapper<Muhblah, string, Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl, EntityCollection<Zetbox.App.Test.Muhblah_StringCollection_CollectionEntryEfImpl>> _StringCollection;
public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnStringCollection_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnStringCollection_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? TestBool
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestBool;
                if (OnTestBool_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnTestBool_Getter(this, __e);
                    __result = _TestBool = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestBool != value)
                {
                    var __oldValue = _TestBool;
                    var __newValue = value;
                    if (OnTestBool_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestBool", __oldValue, __newValue);
                    _TestBool = __newValue;
                    NotifyPropertyChanged("TestBool", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestBool_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnTestBool_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestBool");
                }
            }
        }
        private bool? _TestBool_store;
        private bool? _TestBool {
            get { return _TestBool_store; }
            set {
                ReportEfPropertyChanging("TestBool");
                _TestBool_store = value;
                ReportEfPropertyChanged("TestBool");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, bool?> OnTestBool_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestBool_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MB_Role_has_TCO_Lst_Role
    A: ZeroOrOne Muhblah as MB_Role
    B: ZeroOrMore TestCustomObject as TCO_Lst_Role
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Test.TestCustomObject> TestCustomObjects_List_Nav
        {
            get
            {
                if (_TestCustomObjects_List_Nav == null)
                {
                    _TestCustomObjects_List_Nav = new EntityCollectionWrapper<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectEfImpl>(
                            this.Context, TestCustomObjects_List_NavImpl,
                            () => this.NotifyPropertyChanging("TestCustomObjects_List_Nav", null, null),
                            null, // see GetTestCustomObjects_List_NavImplCollection()
                            (item) => item.NotifyPropertyChanging("MubBlah_Nav", null, null),
                            (item) => item.NotifyPropertyChanged("MubBlah_Nav", null, null));
                }
                return _TestCustomObjects_List_Nav;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Role_has_TCO_Lst_Role", "TCO_Lst_Role")]
        public EntityCollection<Zetbox.App.Test.TestCustomObjectEfImpl> TestCustomObjects_List_NavImpl
        {
            get
            {
                return GetTestCustomObjects_List_NavImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.TestCustomObjectEfImpl> _TestCustomObjects_List_Nav;

        private EntityCollection<Zetbox.App.Test.TestCustomObjectEfImpl> _TestCustomObjects_List_NavImplEntityCollection;
        internal EntityCollection<Zetbox.App.Test.TestCustomObjectEfImpl> GetTestCustomObjects_List_NavImplCollection()
        {
            if (_TestCustomObjects_List_NavImplEntityCollection == null)
            {
                _TestCustomObjects_List_NavImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Role_has_TCO_Lst_Role",
                        "TCO_Lst_Role");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_TestCustomObjects_List_NavImplEntityCollection.IsLoaded)
                {
                    _TestCustomObjects_List_NavImplEntityCollection.Load();
                }
                _TestCustomObjects_List_NavImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("TestCustomObjects_List_Nav", null, null); if (OnTestCustomObjects_List_Nav_PostSetter != null && IsAttached) OnTestCustomObjects_List_Nav_PostSetter(this); };
            }
            return _TestCustomObjects_List_NavImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_List_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Test.TestCustomObject>>(this.TestCustomObjects_List_Nav);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_List_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_List_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MB_Many_Role_has_TCO_ManyList_Role
    A: ZeroOrMore Muhblah as MB_Many_Role
    B: ZeroOrMore TestCustomObject as TCO_ManyList_Role
    Preferred Storage: Separate
    */
        // collection reference property
        // Zetbox.DalProvider.Ef.Generator.Templates.Properties.CollectionEntryListProperty
        // implement the user-visible interface
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Test.TestCustomObject> TestCustomObjects_ManyList_Nav
        {
            get
            {
                if (_TestCustomObjects_ManyList_Nav == null)
                {
                    _TestCustomObjects_ManyList_Nav = new BSideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl, EntityCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl>>(
                            this,
                            TestCustomObjects_ManyList_NavImpl);
                }
                return _TestCustomObjects_ManyList_Nav;
            }
        }
        
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Many_Role_has_TCO_ManyList_Role_A", "CollectionEntry")]
        public EntityCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl> TestCustomObjects_ManyList_NavImpl
        {
            get
            {
                return GetTestCustomObjects_ManyList_NavImplCollection();
            }
        }

        private EntityCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl> _TestCustomObjects_ManyList_NavImplEntityCollection;
        internal EntityCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl> GetTestCustomObjects_ManyList_NavImplCollection()
        {
            if (_TestCustomObjects_ManyList_NavImplEntityCollection == null)
            {
                _TestCustomObjects_ManyList_NavImplEntityCollection
                    = ((IEntityWithRelationships)(this)).RelationshipManager
                        .GetRelatedCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl>(
                            "Model.FK_MB_Many_Role_has_TCO_ManyList_Role_A",
                            "CollectionEntry");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_TestCustomObjects_ManyList_NavImplEntityCollection.IsLoaded)
                {
                    _TestCustomObjects_ManyList_NavImplEntityCollection.Load();
                }
                _TestCustomObjects_ManyList_NavImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("TestCustomObjects_ManyList_Nav", null, null); if(OnTestCustomObjects_ManyList_Nav_PostSetter != null && IsAttached) OnTestCustomObjects_ManyList_Nav_PostSetter(this); };
            }
            return _TestCustomObjects_ManyList_NavImplEntityCollection;
        }
        private BSideCollectionWrapper<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject, Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl, EntityCollection<Zetbox.App.Test.MB_Many_Role_has_TCO_ManyList_Role_RelationEntryEfImpl>> _TestCustomObjects_ManyList_Nav;

        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_ManyList_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Test.TestCustomObject>>(this.TestCustomObjects_ManyList_Nav);
        }

public static event PropertyListChangedHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_ManyList_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_ManyList_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MB_Lst_Role_hasOther_TCO_Role
    A: ZeroOrMore Muhblah as MB_Lst_Role
    B: ZeroOrOne TestCustomObject as TCO_Role
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
        // fkBackingName=_fk_TestCustomObjects_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_Nav;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=MubBlah_List_Nav; is list;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject TestCustomObjects_Nav
        {
            get { return TestCustomObjects_NavImpl; }
            set { TestCustomObjects_NavImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_TestCustomObjects_Nav;

        /// <summary>ForeignKey Property for TestCustomObjects_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_TestCustomObjects_Nav
		{
			get { return TestCustomObjects_Nav != null ? TestCustomObjects_Nav.ID : (int?)null; }
			set { _fk_TestCustomObjects_Nav = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_Lst_Role_hasOther_TCO_Role", "TCO_Role")]
        public Zetbox.App.Test.TestCustomObjectEfImpl TestCustomObjects_NavImpl
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Lst_Role_hasOther_TCO_Role",
                        "TCO_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnTestCustomObjects_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestCustomObject>(__value);
                    OnTestCustomObjects_Nav_Getter(this, e);
                    __value = (Zetbox.App.Test.TestCustomObjectEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_Lst_Role_hasOther_TCO_Role",
                        "TCO_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.TestCustomObjectEfImpl __oldValue = (Zetbox.App.Test.TestCustomObjectEfImpl)r.Value;
                Zetbox.App.Test.TestCustomObjectEfImpl __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_Nav", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("MubBlah_List_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("MubBlah_List_Nav", null, null);
                }

                if (OnTestCustomObjects_Nav_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Test.TestCustomObjectEfImpl)__newValue;

                if (OnTestCustomObjects_Nav_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_Nav_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_Nav", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("MubBlah_List_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("MubBlah_List_Nav", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(this.TestCustomObjects_Nav);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_MB_One_Role_loves_TCO_One_Role
    A: ZeroOrOne Muhblah as MB_One_Role
    B: ZeroOrOne TestCustomObject as TCO_One_Role
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
        // fkBackingName=_fk_TestCustomObjects_One_Nav; fkGuidBackingName=_fk_guid_TestCustomObjects_One_Nav;
        // referencedInterface=Zetbox.App.Test.TestCustomObject; moduleNamespace=Zetbox.App.Test;
        // inverse Navigator=MuhBlah_One_Nav; is reference;
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Test.TestCustomObject TestCustomObjects_One_Nav
        {
            get { return TestCustomObjects_One_NavImpl; }
            set { TestCustomObjects_One_NavImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)value; }
        }

        private int? _fk_TestCustomObjects_One_Nav;

        /// <summary>ForeignKey Property for TestCustomObjects_One_Nav's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_TestCustomObjects_One_Nav
		{
			get { return TestCustomObjects_One_Nav != null ? TestCustomObjects_One_Nav.ID : (int?)null; }
			set { _fk_TestCustomObjects_One_Nav = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_MB_One_Role_loves_TCO_One_Role", "TCO_One_Role")]
        public Zetbox.App.Test.TestCustomObjectEfImpl TestCustomObjects_One_NavImpl
        {
            get
            {
                Zetbox.App.Test.TestCustomObjectEfImpl __value;
                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_One_Role_loves_TCO_One_Role",
                        "TCO_One_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnTestCustomObjects_One_Nav_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Test.TestCustomObject>(__value);
                    OnTestCustomObjects_One_Nav_Getter(this, e);
                    __value = (Zetbox.App.Test.TestCustomObjectEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Test.TestCustomObjectEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>(
                        "Model.FK_MB_One_Role_loves_TCO_One_Role",
                        "TCO_One_Role");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Test.TestCustomObjectEfImpl __oldValue = (Zetbox.App.Test.TestCustomObjectEfImpl)r.Value;
                Zetbox.App.Test.TestCustomObjectEfImpl __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("TestCustomObjects_One_Nav", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("MuhBlah_One_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("MuhBlah_One_Nav", null, null);
                }

                if (OnTestCustomObjects_One_Nav_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PreSetter(this, e);
                    __newValue = (Zetbox.App.Test.TestCustomObjectEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Test.TestCustomObjectEfImpl)__newValue;

                if (OnTestCustomObjects_One_Nav_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestCustomObject>(__oldValue, __newValue);
                    OnTestCustomObjects_One_Nav_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("TestCustomObjects_One_Nav", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("MuhBlah_One_Nav", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("MuhBlah_One_Nav", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchTestCustomObjects_One_NavAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Test.TestCustomObject>(this.TestCustomObjects_One_Nav);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for TestCustomObjects_One_Nav
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestCustomObject> OnTestCustomObjects_One_Nav_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestCustomObjects_One_Nav_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime? TestDateTime
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestDateTime;
                if (OnTestDateTime_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnTestDateTime_Getter(this, __e);
                    __result = _TestDateTime = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestDateTime != value)
                {
                    var __oldValue = _TestDateTime;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnTestDateTime_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestDateTime", __oldValue, __newValue);
                    _TestDateTime = __newValue;
                    NotifyPropertyChanged("TestDateTime", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestDateTime_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnTestDateTime_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestDateTime");
                }
            }
        }
        private DateTime? _TestDateTime_store;
        private DateTime? _TestDateTime {
            get { return _TestDateTime_store; }
            set {
                ReportEfPropertyChanging("TestDateTime");
                _TestDateTime_store = value;
                ReportEfPropertyChanged("TestDateTime");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, DateTime?> OnTestDateTime_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestDateTime_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
        public Zetbox.App.Test.TestEnum TestEnum
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestEnum;
                if (OnTestEnum_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Test.TestEnum>(__result);
                    OnTestEnum_Getter(this, __e);
                    __result = _TestEnum = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestEnum != value)
                {
                    var __oldValue = _TestEnum;
                    var __newValue = value;
                    if (OnTestEnum_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestEnum", __oldValue, __newValue);
                    _TestEnum = __newValue;
                    NotifyPropertyChanged("TestEnum", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestEnum_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Test.TestEnum>(__oldValue, __newValue);
                        OnTestEnum_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestEnum");
                }
            }
        }
        private Zetbox.App.Test.TestEnum _TestEnum_store;
        private Zetbox.App.Test.TestEnum _TestEnum {
            get { return _TestEnum_store; }
            set {
                ReportEfPropertyChanging("TestEnumImpl");
                _TestEnum_store = value;
                ReportEfPropertyChanged("TestEnumImpl");
            }
        }

        /// <summary>EF sees only this property, for TestEnum</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int TestEnumImpl
        {
            get
            {
                return (int)this.TestEnum;
            }
            set
            {
                this.TestEnum = (Zetbox.App.Test.TestEnum)value;
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, Zetbox.App.Test.TestEnum> OnTestEnum_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestEnum_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string TestString
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TestString;
                if (OnTestString_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTestString_Getter(this, __e);
                    __result = _TestString = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TestString != value)
                {
                    var __oldValue = _TestString;
                    var __newValue = value;
                    if (OnTestString_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TestString", __oldValue, __newValue);
                    _TestString = __newValue;
                    NotifyPropertyChanged("TestString", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTestString_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTestString_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TestString");
                }
            }
        }
        private string _TestString_store;
        private string _TestString {
            get { return _TestString_store; }
            set {
                ReportEfPropertyChanging("TestString");
                _TestString_store = value;
                ReportEfPropertyChanged("TestString");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Test.Muhblah, string> OnTestString_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Test.Muhblah> OnTestString_IsValid;

        public override Type GetImplementedInterface()
        {
            return typeof(Muhblah);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Muhblah)obj;
            var otherImpl = (MuhblahEfImpl)obj;
            var me = (Muhblah)this;

            me.TestBool = other.TestBool;
            me.TestDateTime = other.TestDateTime;
            me.TestEnum = other.TestEnum;
            me.TestString = other.TestString;
            this._fk_TestCustomObjects_Nav = otherImpl._fk_TestCustomObjects_Nav;
            this._fk_TestCustomObjects_One_Nav = otherImpl._fk_TestCustomObjects_One_Nav;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "TestBool":
                case "TestCustomObjects_Nav":
                case "TestCustomObjects_One_Nav":
                case "TestDateTime":
                case "TestEnum":
                case "TestString":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "TestCustomObjects_List_Nav":
                case "TestCustomObjects_ManyList_Nav":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "TestCustomObjects_List_Nav":
                return TriggerFetchTestCustomObjects_List_NavAsync();
            case "TestCustomObjects_ManyList_Nav":
                return TriggerFetchTestCustomObjects_ManyList_NavAsync();
            case "TestCustomObjects_Nav":
                return TriggerFetchTestCustomObjects_NavAsync();
            case "TestCustomObjects_One_Nav":
                return TriggerFetchTestCustomObjects_One_NavAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_TestCustomObjects_Nav.HasValue)
                TestCustomObjects_NavImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_Nav.Value);
            else
                TestCustomObjects_NavImpl = null;

            if (_fk_TestCustomObjects_One_Nav.HasValue)
                TestCustomObjects_One_NavImpl = (Zetbox.App.Test.TestCustomObjectEfImpl)Context.Find<Zetbox.App.Test.TestCustomObject>(_fk_TestCustomObjects_One_Nav.Value);
            else
                TestCustomObjects_One_NavImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Muhblah, ICollection<string>>(
                        lazyCtx,
                        new Guid("b89fc0d2-8603-40d7-8649-61431a9fb09b"),
                        "StringCollection",
                        null,
                        obj => obj.StringCollection,
                        null, // lists are read-only properties
                        obj => OnStringCollection_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, bool?>(
                        lazyCtx,
                        new Guid("9206e71e-85ea-4d74-85ea-59ee2484ed2a"),
                        "TestBool",
                        null,
                        obj => obj.TestBool,
                        (obj, val) => obj.TestBool = val,
						obj => OnTestBool_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Muhblah, ICollection<Zetbox.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("1f944324-673f-4f14-94c8-dc570ea3022d"),
                        "TestCustomObjects_List_Nav",
                        null,
                        obj => obj.TestCustomObjects_List_Nav,
                        null, // lists are read-only properties
                        obj => OnTestCustomObjects_List_Nav_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Muhblah, ICollection<Zetbox.App.Test.TestCustomObject>>(
                        lazyCtx,
                        new Guid("a3ad7340-4dc1-488c-bc9a-29ac931b1f0d"),
                        "TestCustomObjects_ManyList_Nav",
                        null,
                        obj => obj.TestCustomObjects_ManyList_Nav,
                        null, // lists are read-only properties
                        obj => OnTestCustomObjects_ManyList_Nav_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, Zetbox.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("aabd7cb7-c45e-43c9-97fd-76e50c310ab3"),
                        "TestCustomObjects_Nav",
                        null,
                        obj => obj.TestCustomObjects_Nav,
                        (obj, val) => obj.TestCustomObjects_Nav = val,
						obj => OnTestCustomObjects_Nav_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, Zetbox.App.Test.TestCustomObject>(
                        lazyCtx,
                        new Guid("42c6bc2f-0428-488a-b928-539c4c6e3e65"),
                        "TestCustomObjects_One_Nav",
                        null,
                        obj => obj.TestCustomObjects_One_Nav,
                        (obj, val) => obj.TestCustomObjects_One_Nav = val,
						obj => OnTestCustomObjects_One_Nav_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, DateTime?>(
                        lazyCtx,
                        new Guid("c5a66e0b-1fdb-45e4-b9e4-2ae4ee35a201"),
                        "TestDateTime",
                        null,
                        obj => obj.TestDateTime,
                        (obj, val) => obj.TestDateTime = val,
						obj => OnTestDateTime_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, Zetbox.App.Test.TestEnum>(
                        lazyCtx,
                        new Guid("1a5484e4-4be0-4641-9c25-1aa30d1c0e7a"),
                        "TestEnum",
                        null,
                        obj => obj.TestEnum,
                        (obj, val) => obj.TestEnum = val,
						obj => OnTestEnum_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Muhblah, string>(
                        lazyCtx,
                        new Guid("e9516350-fa66-426b-808a-bd8a5f432427"),
                        "TestString",
                        null,
                        obj => obj.TestString,
                        (obj, val) => obj.TestString = val,
						obj => OnTestString_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Muhblah")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Muhblah != null)
            {
                OnToString_Muhblah(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Muhblah> OnToString_Muhblah;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Muhblah")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Muhblah != null)
            {
                OnObjectIsValid_Muhblah(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Muhblah> OnObjectIsValid_Muhblah;

        [EventBasedMethod("OnNotifyPreSave_Muhblah")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Muhblah != null) OnNotifyPreSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyPreSave_Muhblah;

        [EventBasedMethod("OnNotifyPostSave_Muhblah")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Muhblah != null) OnNotifyPostSave_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyPostSave_Muhblah;

        [EventBasedMethod("OnNotifyCreated_Muhblah")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("TestBool");
            SetNotInitializedProperty("TestCustomObjects_Nav");
            SetNotInitializedProperty("TestCustomObjects_One_Nav");
            SetNotInitializedProperty("TestDateTime");
            SetNotInitializedProperty("TestEnum");
            SetNotInitializedProperty("TestString");
            base.NotifyCreated();
            if (OnNotifyCreated_Muhblah != null) OnNotifyCreated_Muhblah(this);
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyCreated_Muhblah;

        [EventBasedMethod("OnNotifyDeleting_Muhblah")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Muhblah != null) OnNotifyDeleting_Muhblah(this);
            StringCollection.Clear();
            TestCustomObjects_List_Nav.Clear();
            TestCustomObjects_ManyList_Nav.Clear();
            TestCustomObjects_Nav = null;
            TestCustomObjects_One_Nav = null;
        }
        public static event ObjectEventHandler<Muhblah> OnNotifyDeleting_Muhblah;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.WriteCollectionEntries(this.StringCollectionImpl);
            binStream.Write(this._TestBool);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>("Model.FK_MB_Lst_Role_hasOther_TCO_Role", "TCO_Role");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Test.TestCustomObjectEfImpl>("Model.FK_MB_One_Role_loves_TCO_One_Role", "TCO_One_Role");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._TestDateTime);
            binStream.Write((int?)_TestEnum);
            binStream.Write(this._TestString);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._TestBool = binStream.ReadNullableBoolean();
            binStream.Read(out this._fk_TestCustomObjects_Nav);
            binStream.Read(out this._fk_TestCustomObjects_One_Nav);
            this._TestDateTime = binStream.ReadNullableDateTime();
            _TestEnum = (Zetbox.App.Test.TestEnum)binStream.ReadNullableInt32();
            this._TestString = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        #endregion

    }
}
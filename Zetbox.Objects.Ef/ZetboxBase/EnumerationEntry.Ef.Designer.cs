// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// Metadefinition Object for an Enumeration Entry.
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="EnumerationEntryEfImpl")]
    [System.Diagnostics.DebuggerDisplay("EnumerationEntry")]
    public class EnumerationEntryEfImpl : BaseServerDataObject_EntityFramework, EnumerationEntry, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("6365c62d-60a6-4fa3-9c78-370ffcc50478");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public EnumerationEntryEfImpl()
            : base(null)
        {
        }

        public EnumerationEntryEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_EnumerationEntry_was_ChangedBy
    A: ZeroOrMore EnumerationEntry as EnumerationEntry
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_EnumerationEntry_was_ChangedBy", "ChangedBy")]
        public Zetbox.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_EnumerationEntry_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_EnumerationEntry_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("2a1f2193-427f-497b-9f24-8154d789b77b"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'EnumerationEntry.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn_store;
        private DateTime _ChangedOn {
            get { return _ChangedOn_store; }
            set {
                ReportEfPropertyChanging("ChangedOn");
                _ChangedOn_store = value;
                ReportEfPropertyChanged("ChangedOn");
            }
        }
        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_EnumerationEntry_was_CreatedBy
    A: ZeroOrMore EnumerationEntry as EnumerationEntry
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_EnumerationEntry_was_CreatedBy", "CreatedBy")]
        public Zetbox.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_EnumerationEntry_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_EnumerationEntry_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("e0091bc7-656a-46fd-a1ff-b542b10a4472"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'EnumerationEntry.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn_store;
        private DateTime _CreatedOn {
            get { return _CreatedOn_store; }
            set {
                ReportEfPropertyChanging("CreatedOn");
                _CreatedOn_store = value;
                ReportEfPropertyChanged("CreatedOn");
            }
        }
        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnCreatedOn_IsValid;

        /// <summary>
        /// Description of this Enumeration Entry
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description_store;
        private string _Description {
            get { return _Description_store; }
            set {
                ReportEfPropertyChanging("Description");
                _Description_store = value;
                ReportEfPropertyChanged("Description");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnDescription_IsValid;

        /// <summary>
        /// Übergeordnete Enumeration
        /// </summary>
    /*
    Relation: FK_Enumeration_has_EnumerationEntries
    A: One Enumeration as Enumeration
    B: ZeroOrMore EnumerationEntry as EnumerationEntries
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Enumeration
        // fkBackingName=_fk_Enumeration; fkGuidBackingName=_fk_guid_Enumeration;
        // referencedInterface=Zetbox.App.Base.Enumeration; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=EnumerationEntries; is list;
        // PositionStorage=EnumerationEntries_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Enumeration Enumeration
        {
            get { return EnumerationImpl; }
            set { EnumerationImpl = (Zetbox.App.Base.EnumerationEfImpl)value; }
        }

        private int? _fk_Enumeration;

        /// <summary>ForeignKey Property for Enumeration's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Enumeration
		{
			get { return Enumeration != null ? Enumeration.ID : (int?)null; }
			set { _fk_Enumeration = value; }
		}

        private Guid? _fk_guid_Enumeration = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Enumeration_has_EnumerationEntries", "Enumeration")]
        public Zetbox.App.Base.EnumerationEfImpl EnumerationImpl
        {
            get
            {
                Zetbox.App.Base.EnumerationEfImpl __value;
                EntityReference<Zetbox.App.Base.EnumerationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.EnumerationEfImpl>(
                        "Model.FK_Enumeration_has_EnumerationEntries",
                        "Enumeration");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnEnumeration_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Enumeration>(__value);
                    OnEnumeration_Getter(this, e);
                    __value = (Zetbox.App.Base.EnumerationEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.EnumerationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.EnumerationEfImpl>(
                        "Model.FK_Enumeration_has_EnumerationEntries",
                        "Enumeration");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.EnumerationEfImpl __oldValue = (Zetbox.App.Base.EnumerationEfImpl)r.Value;
                Zetbox.App.Base.EnumerationEfImpl __newValue = (Zetbox.App.Base.EnumerationEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Enumeration", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("EnumerationEntries", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("EnumerationEntries", null, null);
                }

                if (OnEnumeration_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Enumeration>(__oldValue, __newValue);
                    OnEnumeration_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.EnumerationEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.EnumerationEfImpl)__newValue;

                if (OnEnumeration_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Enumeration>(__oldValue, __newValue);
                    OnEnumeration_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Enumeration", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("EnumerationEntries", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("EnumerationEntries", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchEnumerationAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Enumeration>(this.Enumeration);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? EnumerationEntries_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _EnumerationEntries_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_EnumerationEntries_pos != value)
                {
                    var __oldValue = _EnumerationEntries_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("EnumerationEntries_pos", __oldValue, __newValue);
                    _EnumerationEntries_pos = __newValue;
                    NotifyPropertyChanged("EnumerationEntries_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("EnumerationEntries_pos");
                }
            }
        }
        private int? _EnumerationEntries_pos_store;
        private int? _EnumerationEntries_pos {
            get { return _EnumerationEntries_pos_store; }
            set {
                ReportEfPropertyChanging("EnumerationEntries_pos");
                _EnumerationEntries_pos_store = value;
                ReportEfPropertyChanged("EnumerationEntries_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Enumeration
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Enumeration> OnEnumeration_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Enumeration> OnEnumeration_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, Zetbox.App.Base.Enumeration> OnEnumeration_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnEnumeration_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("9cee8923-5189-4e1e-b752-a87be1968491"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'EnumerationEntry.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Label
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Label;
                if (OnLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLabel_Getter(this, __e);
                    __result = _Label = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Label != value)
                {
                    var __oldValue = _Label;
                    var __newValue = value;
                    if (OnLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Label", __oldValue, __newValue);
                    _Label = __newValue;
                    NotifyPropertyChanged("Label", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Label");
                }
            }
        }
        private string _Label_store;
        private string _Label {
            get { return _Label_store; }
            set {
                ReportEfPropertyChanging("Label");
                _Label_store = value;
                ReportEfPropertyChanged("Label");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnLabel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnLabel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnLabel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnLabel_IsValid;

        /// <summary>
        /// CLR name of this entry
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name_store;
        private string _Name {
            get { return _Name_store; }
            set {
                ReportEfPropertyChanging("Name");
                _Name_store = value;
                ReportEfPropertyChanged("Name");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnName_IsValid;

        /// <summary>
        /// If true, the entry will not be selectable in the UI
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool NotSelectable
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _NotSelectable;
                if (!_isNotSelectableSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("43a77c0a-75bf-4130-9d6d-a2ac629d3602"));
                    if (__p != null) {
                        _isNotSelectableSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._NotSelectable = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'EnumerationEntry.NotSelectable'");
                    }
                }
                if (OnNotSelectable_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnNotSelectable_Getter(this, __e);
                    __result = _NotSelectable = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isNotSelectableSet = true;
                if (_NotSelectable != value)
                {
                    var __oldValue = _NotSelectable;
                    var __newValue = value;
                    if (OnNotSelectable_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnNotSelectable_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("NotSelectable", __oldValue, __newValue);
                    _NotSelectable = __newValue;
                    NotifyPropertyChanged("NotSelectable", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnNotSelectable_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnNotSelectable_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("NotSelectable");
                }
            }
        }
        private bool _NotSelectable_store;
        private bool _NotSelectable {
            get { return _NotSelectable_store; }
            set {
                ReportEfPropertyChanging("NotSelectable");
                _NotSelectable_store = value;
                ReportEfPropertyChanged("NotSelectable");
            }
        }
        private bool _isNotSelectableSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, bool> OnNotSelectable_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, bool> OnNotSelectable_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, bool> OnNotSelectable_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnNotSelectable_IsValid;

        /// <summary>
        /// The CLR value of this entry
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int Value
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Value;
                if (OnValue_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int>(__result);
                    OnValue_Getter(this, __e);
                    __result = _Value = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Value != value)
                {
                    var __oldValue = _Value;
                    var __newValue = value;
                    if (OnValue_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int>(__oldValue, __newValue);
                        OnValue_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Value", __oldValue, __newValue);
                    _Value = __newValue;
                    NotifyPropertyChanged("Value", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnValue_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int>(__oldValue, __newValue);
                        OnValue_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Value");
                }
            }
        }
        private int _Value_store;
        private int _Value {
            get { return _Value_store; }
            set {
                ReportEfPropertyChanging("Value");
                _Value_store = value;
                ReportEfPropertyChanged("Value");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.EnumerationEntry, int> OnValue_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.EnumerationEntry, int> OnValue_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.EnumerationEntry, int> OnValue_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.EnumerationEntry> OnValue_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_EnumerationEntry")]
        public virtual string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_EnumerationEntry != null)
            {
                OnGetLabel_EnumerationEntry(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on EnumerationEntry.GetLabel");
            }
            return e.Result;
        }
        public delegate void GetLabel_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetLabel_Handler<EnumerationEntry> OnGetLabel_EnumerationEntry;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<EnumerationEntry> OnGetLabel_EnumerationEntry_CanExec;

        [EventBasedMethod("OnGetLabel_EnumerationEntry_CanExec")]
        public virtual bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_EnumerationEntry_CanExec != null)
				{
					OnGetLabel_EnumerationEntry_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<EnumerationEntry> OnGetLabel_EnumerationEntry_CanExecReason;

        [EventBasedMethod("OnGetLabel_EnumerationEntry_CanExecReason")]
        public virtual string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_EnumerationEntry_CanExecReason != null)
				{
					OnGetLabel_EnumerationEntry_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(EnumerationEntry);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (EnumerationEntry)obj;
            var otherImpl = (EnumerationEntryEfImpl)obj;
            var me = (EnumerationEntry)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Label = other.Label;
            me.Name = other.Name;
            me.NotSelectable = other.NotSelectable;
            me.Value = other.Value;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this.EnumerationEntries_pos = otherImpl.EnumerationEntries_pos;
            this._fk_Enumeration = otherImpl._fk_Enumeration;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "Enumeration":
                case "ExportGuid":
                case "Label":
                case "Name":
                case "NotSelectable":
                case "Value":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Enumeration":
                return TriggerFetchEnumerationAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Enumeration.HasValue)
                EnumerationImpl = (Zetbox.App.Base.EnumerationEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Enumeration>(_fk_guid_Enumeration.Value);
            else
            if (_fk_Enumeration.HasValue)
                EnumerationImpl = (Zetbox.App.Base.EnumerationEfImpl)Context.Find<Zetbox.App.Base.Enumeration>(_fk_Enumeration.Value);
            else
                EnumerationImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6f71765b-503a-4ad3-a07b-cea9f2930a84"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, DateTime>(
                        lazyCtx,
                        new Guid("2a1f2193-427f-497b-9f24-8154d789b77b"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d8f94106-ec4f-4604-aaff-8e2f5b4019ba"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, DateTime>(
                        lazyCtx,
                        new Guid("e0091bc7-656a-46fd-a1ff-b542b10a4472"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, string>(
                        lazyCtx,
                        new Guid("3366c523-0593-4a29-978f-5ac8a4f15eca"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, Zetbox.App.Base.Enumeration>(
                        lazyCtx,
                        new Guid("115c3bfb-72fd-46f2-81fe-74ce1cfa1874"),
                        "Enumeration",
                        null,
                        obj => obj.Enumeration,
                        (obj, val) => obj.Enumeration = val,
						obj => OnEnumeration_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, Guid>(
                        lazyCtx,
                        new Guid("9cee8923-5189-4e1e-b752-a87be1968491"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, string>(
                        lazyCtx,
                        new Guid("feb0b203-5f83-4b9b-848c-a3e4ee895055"),
                        "Label",
                        null,
                        obj => obj.Label,
                        (obj, val) => obj.Label = val,
						obj => OnLabel_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, string>(
                        lazyCtx,
                        new Guid("1c1e497b-294f-442e-8793-478b298d4aba"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, bool>(
                        lazyCtx,
                        new Guid("43a77c0a-75bf-4130-9d6d-a2ac629d3602"),
                        "NotSelectable",
                        null,
                        obj => obj.NotSelectable,
                        (obj, val) => obj.NotSelectable = val,
						obj => OnNotSelectable_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<EnumerationEntry, int>(
                        lazyCtx,
                        new Guid("2fea1d2e-d5ed-457f-9828-4df8c3d3d3aa"),
                        "Value",
                        null,
                        obj => obj.Value,
                        (obj, val) => obj.Value = val,
						obj => OnValue_IsValid), 
                    // position columns
                    // rel: Enumeration has EnumerationEntries (55bd59b8-ad37-4837-b066-d505f86316fe)
                    // rel.B.Type == cls && rel.B.HasPersistentOrder
                    new PropertyDescriptorEfImpl<EnumerationEntryEfImpl, int?>(
                        lazyCtx,
                        null,
                        "EnumerationEntries_pos",
                        null,
                        obj => obj.EnumerationEntries_pos,
                        (obj, val) => obj.EnumerationEntries_pos = val,
						null),
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_EnumerationEntry")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_EnumerationEntry != null)
            {
                OnToString_EnumerationEntry(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<EnumerationEntry> OnToString_EnumerationEntry;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_EnumerationEntry")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_EnumerationEntry != null)
            {
                OnObjectIsValid_EnumerationEntry(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<EnumerationEntry> OnObjectIsValid_EnumerationEntry;

        [EventBasedMethod("OnNotifyPreSave_EnumerationEntry")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_EnumerationEntry != null) OnNotifyPreSave_EnumerationEntry(this);
        }
        public static event ObjectEventHandler<EnumerationEntry> OnNotifyPreSave_EnumerationEntry;

        [EventBasedMethod("OnNotifyPostSave_EnumerationEntry")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_EnumerationEntry != null) OnNotifyPostSave_EnumerationEntry(this);
        }
        public static event ObjectEventHandler<EnumerationEntry> OnNotifyPostSave_EnumerationEntry;

        [EventBasedMethod("OnNotifyCreated_EnumerationEntry")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("Enumeration");
            SetNotInitializedProperty("Label");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("Value");
            base.NotifyCreated();
            if (OnNotifyCreated_EnumerationEntry != null) OnNotifyCreated_EnumerationEntry(this);
        }
        public static event ObjectEventHandler<EnumerationEntry> OnNotifyCreated_EnumerationEntry;

        [EventBasedMethod("OnNotifyDeleting_EnumerationEntry")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_EnumerationEntry != null) OnNotifyDeleting_EnumerationEntry(this);
            ChangedBy = null;
            CreatedBy = null;
            Enumeration = null;
        }
        public static event ObjectEventHandler<EnumerationEntry> OnNotifyDeleting_EnumerationEntry;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_EnumerationEntry_was_ChangedBy", "ChangedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_EnumerationEntry_was_CreatedBy", "CreatedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._Description);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.EnumerationEfImpl>("Model.FK_Enumeration_has_EnumerationEntries", "Enumeration");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._EnumerationEntries_pos);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._Label);
            binStream.Write(this._Name);
            binStream.Write(this._isNotSelectableSet);
            if (this._isNotSelectableSet) {
                binStream.Write(this._NotSelectable);
            }
            binStream.Write(this._Value);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._Description = binStream.ReadString();
            binStream.Read(out this._fk_Enumeration);
            this._EnumerationEntries_pos = binStream.ReadNullableInt32();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._Label = binStream.ReadString();
            this._Name = binStream.ReadString();
            this._isNotSelectableSet = binStream.ReadBoolean();
            if (this._isNotSelectableSet) {
                this._NotSelectable = binStream.ReadBoolean();
            }
            this._Value = binStream.ReadInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Enumeration != null ? Enumeration.ExportGuid : (Guid?)null, xml, "Enumeration", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._EnumerationEntries_pos, xml, "EnumerationEntries_pos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Label, xml, "Label", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._NotSelectable, xml, "NotSelectable", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Value, xml, "Value", "Zetbox.App.Base");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Enumeration":
                this._fk_guid_Enumeration = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|EnumerationEntries_pos":
                this._EnumerationEntries_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Base|Label":
                this._Label = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|NotSelectable":
                // Import must have default value set
                this._NotSelectable = XmlStreamer.ReadBoolean(xml);
                this._isNotSelectableSet = true;
                break;
            case "Zetbox.App.Base|Value":
                this._Value = XmlStreamer.ReadInt32(xml);
                break;
            }
        }

        #endregion

    }
}
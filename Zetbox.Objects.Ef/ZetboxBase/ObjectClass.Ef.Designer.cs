// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// Metadefinition Object for ObjectClasses.
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="ObjectClassEfImpl")]
    [System.Diagnostics.DebuggerDisplay("ObjectClass")]
    public class ObjectClassEfImpl : Zetbox.App.Base.DataTypeEfImpl, ObjectClass
    {
        private static readonly Guid _objectClassID = new Guid("20888dfc-1fbc-47c8-9f3c-c6a30a5c0048");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public ObjectClassEfImpl()
            : base(null)
        {
        }

        public ObjectClassEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ObjectClass_has_AccessControlList
    A: One ObjectClass as ObjectClass
    B: ZeroOrMore AccessControl as AccessControlList
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.AccessControl> AccessControlList
        {
            get
            {
                if (_AccessControlList == null)
                {
                    _AccessControlList = new EntityCollectionWrapper<Zetbox.App.Base.AccessControl, Zetbox.App.Base.AccessControlEfImpl>(
                            this.Context, AccessControlListImpl,
                            () => this.NotifyPropertyChanging("AccessControlList", null, null),
                            null, // see GetAccessControlListImplCollection()
                            (item) => item.NotifyPropertyChanging("ObjectClass", null, null),
                            (item) => item.NotifyPropertyChanged("ObjectClass", null, null));
                }
                return _AccessControlList;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_has_AccessControlList", "AccessControlList")]
        public EntityCollection<Zetbox.App.Base.AccessControlEfImpl> AccessControlListImpl
        {
            get
            {
                return GetAccessControlListImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Base.AccessControl, Zetbox.App.Base.AccessControlEfImpl> _AccessControlList;

        private EntityCollection<Zetbox.App.Base.AccessControlEfImpl> _AccessControlListImplEntityCollection;
        internal EntityCollection<Zetbox.App.Base.AccessControlEfImpl> GetAccessControlListImplCollection()
        {
            if (_AccessControlListImplEntityCollection == null)
            {
                _AccessControlListImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Base.AccessControlEfImpl>(
                        "Model.FK_ObjectClass_has_AccessControlList",
                        "AccessControlList");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_AccessControlListImplEntityCollection.IsLoaded)
                {
                    _AccessControlListImplEntityCollection.Load();
                }
                _AccessControlListImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("AccessControlList", null, null); if (OnAccessControlList_PostSetter != null && IsAttached) OnAccessControlList_PostSetter(this); };
            }
            return _AccessControlListImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchAccessControlListAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.AccessControl>>(this.AccessControlList);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnAccessControlList_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnAccessControlList_IsValid;

        /// <summary>
        /// Pointer auf die Basisklasse
        /// </summary>
    /*
    Relation: FK_BaseObjectClass_has_SubClasses
    A: ZeroOrOne ObjectClass as BaseObjectClass
    B: ZeroOrMore ObjectClass as SubClasses
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
        // fkBackingName=_fk_BaseObjectClass; fkGuidBackingName=_fk_guid_BaseObjectClass;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=SubClasses; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.ObjectClass BaseObjectClass
        {
            get { return BaseObjectClassImpl; }
            set { BaseObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)value; }
        }

        private int? _fk_BaseObjectClass;

        /// <summary>ForeignKey Property for BaseObjectClass's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_BaseObjectClass
		{
			get { return BaseObjectClass != null ? BaseObjectClass.ID : (int?)null; }
			set { _fk_BaseObjectClass = value; }
		}

        private Guid? _fk_guid_BaseObjectClass = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_BaseObjectClass_has_SubClasses", "BaseObjectClass")]
        public Zetbox.App.Base.ObjectClassEfImpl BaseObjectClassImpl
        {
            get
            {
                Zetbox.App.Base.ObjectClassEfImpl __value;
                EntityReference<Zetbox.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "BaseObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnBaseObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(__value);
                    OnBaseObjectClass_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectClassEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "BaseObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ObjectClassEfImpl __oldValue = (Zetbox.App.Base.ObjectClassEfImpl)r.Value;
                Zetbox.App.Base.ObjectClassEfImpl __newValue = (Zetbox.App.Base.ObjectClassEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BaseObjectClass", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("SubClasses", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("SubClasses", null, null);
                }

                if (OnBaseObjectClass_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ObjectClassEfImpl)__newValue;

                if (OnBaseObjectClass_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnBaseObjectClass_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("BaseObjectClass", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("SubClasses", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("SubClasses", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBaseObjectClassAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(this.BaseObjectClass);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseObjectClass
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClass> OnBaseObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnBaseObjectClass_IsValid;

        /// <summary>
        /// Provides a code template for default methods
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string CodeTemplate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CodeTemplate;
                if (_CodeTemplate_IsDirty && OnCodeTemplate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCodeTemplate_Getter(this, __e);
                    _CodeTemplate_IsDirty = false;
                    __result = _CodeTemplate = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CodeTemplate != value)
                {
                    var __oldValue = _CodeTemplate;
                    var __newValue = value;
                    NotifyPropertyChanging("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate = __newValue;
                    NotifyPropertyChanged("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate_IsDirty = false;

                }
                else
                {
                    SetInitializedProperty("CodeTemplate");
                }
            }
        }
        private string _CodeTemplate_store;
        private string _CodeTemplate {
            get { return _CodeTemplate_store; }
            set {
                ReportEfPropertyChanging("CodeTemplate");
                _CodeTemplate_store = value;
                ReportEfPropertyChanged("CodeTemplate");
            }
        }
        private bool _CodeTemplate_IsDirty = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, string> OnCodeTemplate_Getter;

        /// <summary>
        /// The default ViewModel to use for this ObjectClass
        /// </summary>
    /*
    Relation: FK_Presentable_has_DefaultViewModelDescriptor
    A: ZeroOrMore ObjectClass as Presentable
    B: One ViewModelDescriptor as DefaultViewModelDescriptor
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
        // fkBackingName=_fk_DefaultViewModelDescriptor; fkGuidBackingName=_fk_guid_DefaultViewModelDescriptor;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ViewModelDescriptor DefaultViewModelDescriptor
        {
            get { return DefaultViewModelDescriptorImpl; }
            set { DefaultViewModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value; }
        }

        private int? _fk_DefaultViewModelDescriptor;

        /// <summary>ForeignKey Property for DefaultViewModelDescriptor's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultViewModelDescriptor
		{
			get { return DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ID : (int?)null; }
			set { _fk_DefaultViewModelDescriptor = value; }
		}

        private Guid? _fk_guid_DefaultViewModelDescriptor = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Presentable_has_DefaultViewModelDescriptor", "DefaultViewModelDescriptor")]
        public Zetbox.App.GUI.ViewModelDescriptorEfImpl DefaultViewModelDescriptorImpl
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __value;
                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_has_DefaultViewModelDescriptor",
                        "DefaultViewModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultViewModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__value);
                    OnDefaultViewModelDescriptor_Getter(this, e);
                    __value = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Presentable_has_DefaultViewModelDescriptor",
                        "DefaultViewModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __oldValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)r.Value;
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __newValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultViewModelDescriptor", __oldValue, __newValue);

                if (OnDefaultViewModelDescriptor_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)__newValue;

                if (OnDefaultViewModelDescriptor_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnDefaultViewModelDescriptor_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultViewModelDescriptor", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultViewModelDescriptorAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ViewModelDescriptor>(this.DefaultViewModelDescriptor);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultViewModelDescriptor
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.GUI.ViewModelDescriptor> OnDefaultViewModelDescriptor_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnDefaultViewModelDescriptor_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ObjectClass_Has_FilterConfigurations
    A: One ObjectClass as ObjectClass
    B: ZeroOrMore ObjectClassFilterConfiguration as FilterConfigurations
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration> FilterConfigurations
        {
            get
            {
                if (_FilterConfigurations == null)
                {
                    _FilterConfigurations = new EntityCollectionWrapper<Zetbox.App.GUI.ObjectClassFilterConfiguration, Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl>(
                            this.Context, FilterConfigurationsImpl,
                            () => this.NotifyPropertyChanging("FilterConfigurations", null, null),
                            null, // see GetFilterConfigurationsImplCollection()
                            (item) => item.NotifyPropertyChanging("ObjectClass", null, null),
                            (item) => item.NotifyPropertyChanged("ObjectClass", null, null));
                }
                return _FilterConfigurations;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_Has_FilterConfigurations", "FilterConfigurations")]
        public EntityCollection<Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl> FilterConfigurationsImpl
        {
            get
            {
                return GetFilterConfigurationsImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.GUI.ObjectClassFilterConfiguration, Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl> _FilterConfigurations;

        private EntityCollection<Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl> _FilterConfigurationsImplEntityCollection;
        internal EntityCollection<Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl> GetFilterConfigurationsImplCollection()
        {
            if (_FilterConfigurationsImplEntityCollection == null)
            {
                _FilterConfigurationsImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.GUI.ObjectClassFilterConfigurationEfImpl>(
                        "Model.FK_ObjectClass_Has_FilterConfigurations",
                        "FilterConfigurations");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_FilterConfigurationsImplEntityCollection.IsLoaded)
                {
                    _FilterConfigurationsImplEntityCollection.Load();
                }
                _FilterConfigurationsImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("FilterConfigurations", null, null); if (OnFilterConfigurations_PostSetter != null && IsAttached) OnFilterConfigurations_PostSetter(this); };
            }
            return _FilterConfigurationsImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchFilterConfigurationsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration>>(this.FilterConfigurations);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnFilterConfigurations_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnFilterConfigurations_IsValid;

        /// <summary>
        /// Class is abstract
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsAbstract
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsAbstract;
                if (!_isIsAbstractSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("e9d1402e-3580-4084-8836-c44844683191"));
                    if (__p != null) {
                        _isIsAbstractSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsAbstract = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ObjectClass.IsAbstract'");
                    }
                }
                if (OnIsAbstract_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsAbstract_Getter(this, __e);
                    __result = _IsAbstract = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsAbstractSet = true;
                if (_IsAbstract != value)
                {
                    var __oldValue = _IsAbstract;
                    var __newValue = value;
                    if (OnIsAbstract_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsAbstract", __oldValue, __newValue);
                    _IsAbstract = __newValue;
                    NotifyPropertyChanged("IsAbstract", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsAbstract_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsAbstract_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsAbstract");
                }
            }
        }
        private bool _IsAbstract_store;
        private bool _IsAbstract {
            get { return _IsAbstract_store; }
            set {
                ReportEfPropertyChanging("IsAbstract");
                _IsAbstract_store = value;
                ReportEfPropertyChanged("IsAbstract");
            }
        }
        private bool _isIsAbstractSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsAbstract_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsAbstract_IsValid;

        /// <summary>
        /// Indicated that the type will be created programmatically
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsCreatedProgrammatically
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsCreatedProgrammatically;
                if (!_isIsCreatedProgrammaticallySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("176073eb-d188-40ee-9ae6-860c532da0bd"));
                    if (__p != null) {
                        _isIsCreatedProgrammaticallySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsCreatedProgrammatically = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ObjectClass.IsCreatedProgrammatically'");
                    }
                }
                if (OnIsCreatedProgrammatically_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsCreatedProgrammatically_Getter(this, __e);
                    __result = _IsCreatedProgrammatically = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsCreatedProgrammaticallySet = true;
                if (_IsCreatedProgrammatically != value)
                {
                    var __oldValue = _IsCreatedProgrammatically;
                    var __newValue = value;
                    if (OnIsCreatedProgrammatically_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsCreatedProgrammatically_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsCreatedProgrammatically", __oldValue, __newValue);
                    _IsCreatedProgrammatically = __newValue;
                    NotifyPropertyChanged("IsCreatedProgrammatically", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsCreatedProgrammatically_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsCreatedProgrammatically_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsCreatedProgrammatically");
                }
            }
        }
        private bool _IsCreatedProgrammatically_store;
        private bool _IsCreatedProgrammatically {
            get { return _IsCreatedProgrammatically_store; }
            set {
                ReportEfPropertyChanging("IsCreatedProgrammatically");
                _IsCreatedProgrammatically_store = value;
                ReportEfPropertyChanged("IsCreatedProgrammatically");
            }
        }
        private bool _isIsCreatedProgrammaticallySet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsCreatedProgrammatically_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsCreatedProgrammatically_IsValid;

        /// <summary>
        /// if true then all Instances appear in FozenContext.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsFrozenObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsFrozenObject;
                if (!_isIsFrozenObjectSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"));
                    if (__p != null) {
                        _isIsFrozenObjectSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsFrozenObject = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ObjectClass.IsFrozenObject'");
                    }
                }
                if (OnIsFrozenObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsFrozenObject_Getter(this, __e);
                    __result = _IsFrozenObject = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsFrozenObjectSet = true;
                if (_IsFrozenObject != value)
                {
                    var __oldValue = _IsFrozenObject;
                    var __newValue = value;
                    if (OnIsFrozenObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsFrozenObject", __oldValue, __newValue);
                    _IsFrozenObject = __newValue;
                    NotifyPropertyChanged("IsFrozenObject", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsFrozenObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsFrozenObject_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsFrozenObject");
                }
            }
        }
        private bool _IsFrozenObject_store;
        private bool _IsFrozenObject {
            get { return _IsFrozenObject_store; }
            set {
                ReportEfPropertyChanging("IsFrozenObject");
                _IsFrozenObject_store = value;
                ReportEfPropertyChanged("IsFrozenObject");
            }
        }
        private bool _isIsFrozenObjectSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsFrozenObject_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsFrozenObject_IsValid;

        /// <summary>
        /// Setting this to true marks the instances of this class as &amp;quot;simple.&amp;quot; At first this will only mean that they&apos;ll be displayed inline.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsSimpleObject
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsSimpleObject;
                if (!_isIsSimpleObjectSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"));
                    if (__p != null) {
                        _isIsSimpleObjectSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsSimpleObject = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'ObjectClass.IsSimpleObject'");
                    }
                }
                if (OnIsSimpleObject_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsSimpleObject_Getter(this, __e);
                    __result = _IsSimpleObject = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsSimpleObjectSet = true;
                if (_IsSimpleObject != value)
                {
                    var __oldValue = _IsSimpleObject;
                    var __newValue = value;
                    if (OnIsSimpleObject_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsSimpleObject", __oldValue, __newValue);
                    _IsSimpleObject = __newValue;
                    NotifyPropertyChanged("IsSimpleObject", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsSimpleObject_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsSimpleObject_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsSimpleObject");
                }
            }
        }
        private bool _IsSimpleObject_store;
        private bool _IsSimpleObject {
            get { return _IsSimpleObject_store; }
            set {
                ReportEfPropertyChanging("IsSimpleObject");
                _IsSimpleObject_store = value;
                ReportEfPropertyChanged("IsSimpleObject");
            }
        }
        private bool _isIsSimpleObjectSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, bool> OnIsSimpleObject_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnIsSimpleObject_IsValid;

        /// <summary>
        /// Liste der vererbten Klassen
        /// </summary>
    /*
    Relation: FK_BaseObjectClass_has_SubClasses
    A: ZeroOrOne ObjectClass as BaseObjectClass
    B: ZeroOrMore ObjectClass as SubClasses
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.ObjectClass> SubClasses
        {
            get
            {
                if (_SubClasses == null)
                {
                    _SubClasses = new EntityCollectionWrapper<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClassEfImpl>(
                            this.Context, SubClassesImpl,
                            () => this.NotifyPropertyChanging("SubClasses", null, null),
                            null, // see GetSubClassesImplCollection()
                            (item) => item.NotifyPropertyChanging("BaseObjectClass", null, null),
                            (item) => item.NotifyPropertyChanged("BaseObjectClass", null, null));
                }
                return _SubClasses;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_BaseObjectClass_has_SubClasses", "SubClasses")]
        public EntityCollection<Zetbox.App.Base.ObjectClassEfImpl> SubClassesImpl
        {
            get
            {
                return GetSubClassesImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.ObjectClassEfImpl> _SubClasses;

        private EntityCollection<Zetbox.App.Base.ObjectClassEfImpl> _SubClassesImplEntityCollection;
        internal EntityCollection<Zetbox.App.Base.ObjectClassEfImpl> GetSubClassesImplCollection()
        {
            if (_SubClassesImplEntityCollection == null)
            {
                _SubClassesImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Base.ObjectClassEfImpl>(
                        "Model.FK_BaseObjectClass_has_SubClasses",
                        "SubClasses");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_SubClassesImplEntityCollection.IsLoaded)
                {
                    _SubClassesImplEntityCollection.Load();
                }
                _SubClassesImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("SubClasses", null, null); if (OnSubClasses_PostSetter != null && IsAttached) OnSubClasses_PostSetter(this); };
            }
            return _SubClassesImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchSubClassesAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.ObjectClass>>(this.SubClasses);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Base.ObjectClass> OnSubClasses_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnSubClasses_IsValid;

        /// <summary>
        /// Kind of table mapping. Only valid on base classes. Default is TPT.
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
        public Zetbox.App.Base.TableMapping? TableMapping
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TableMapping;
                if (OnTableMapping_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.Base.TableMapping?>(__result);
                    OnTableMapping_Getter(this, __e);
                    __result = _TableMapping = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TableMapping != value)
                {
                    var __oldValue = _TableMapping;
                    var __newValue = value;
                    if (OnTableMapping_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.Base.TableMapping?>(__oldValue, __newValue);
                        OnTableMapping_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableMapping", __oldValue, __newValue);
                    _TableMapping = __newValue;
                    NotifyPropertyChanged("TableMapping", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTableMapping_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.Base.TableMapping?>(__oldValue, __newValue);
                        OnTableMapping_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TableMapping");
                }
            }
        }
        private Zetbox.App.Base.TableMapping? _TableMapping_store;
        private Zetbox.App.Base.TableMapping? _TableMapping {
            get { return _TableMapping_store; }
            set {
                ReportEfPropertyChanging("TableMappingImpl");
                _TableMapping_store = value;
                ReportEfPropertyChanged("TableMappingImpl");
            }
        }

        /// <summary>EF sees only this property, for TableMapping</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? TableMappingImpl
        {
            get
            {
                return (int?)this.TableMapping;
            }
            set
            {
                this.TableMapping = (Zetbox.App.Base.TableMapping?)value;
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, Zetbox.App.Base.TableMapping?> OnTableMapping_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnTableMapping_IsValid;

        /// <summary>
        /// Tabellenname in der Datenbank
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string TableName
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _TableName;
                if (OnTableName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnTableName_Getter(this, __e);
                    __result = _TableName = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_TableName != value)
                {
                    var __oldValue = _TableName;
                    var __newValue = value;
                    if (OnTableName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("TableName", __oldValue, __newValue);
                    _TableName = __newValue;
                    NotifyPropertyChanged("TableName", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnTableName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnTableName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("TableName");
                }
            }
        }
        private string _TableName_store;
        private string _TableName {
            get { return _TableName_store; }
            set {
                ReportEfPropertyChanging("TableName");
                _TableName_store = value;
                ReportEfPropertyChanged("TableName");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.ObjectClass, string> OnTableName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.ObjectClass> OnTableName_IsValid;

        /// <summary>
        /// Property wizard
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAddProperty_ObjectClass")]
        public override Zetbox.App.Base.Property AddProperty()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Property>();
            if (OnAddProperty_ObjectClass != null)
            {
                OnAddProperty_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.AddProperty();
            }
            return e.Result;
        }
        public static event AddProperty_Handler<ObjectClass> OnAddProperty_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnAddProperty_ObjectClass_CanExec;

        [EventBasedMethod("OnAddProperty_ObjectClass_CanExec")]
        public override bool AddPropertyCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAddProperty_ObjectClass_CanExec != null)
				{
					OnAddProperty_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.AddPropertyCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnAddProperty_ObjectClass_CanExecReason;

        [EventBasedMethod("OnAddProperty_ObjectClass_CanExecReason")]
        public override string AddPropertyCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAddProperty_ObjectClass_CanExecReason != null)
				{
					OnAddProperty_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.AddPropertyCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Creates a new Method for this class
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateMethod_ObjectClass")]
        public virtual Zetbox.App.Base.Method CreateMethod()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Method>();
            if (OnCreateMethod_ObjectClass != null)
            {
                OnCreateMethod_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateMethod");
            }
            return e.Result;
        }
        public delegate void CreateMethod_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Method> ret);
        public static event CreateMethod_Handler<ObjectClass> OnCreateMethod_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExec")]
        public virtual bool CreateMethodCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateMethod_ObjectClass_CanExec != null)
				{
					OnCreateMethod_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateMethod_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateMethod_ObjectClass_CanExecReason")]
        public virtual string CreateMethodCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateMethod_ObjectClass_CanExecReason != null)
				{
					OnCreateMethod_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements the &quot;Create new Relation&quot; use case
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateRelation_ObjectClass")]
        public virtual Zetbox.App.Base.Relation CreateRelation()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Base.Relation>();
            if (OnCreateRelation_ObjectClass != null)
            {
                OnCreateRelation_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.CreateRelation");
            }
            return e.Result;
        }
        public delegate void CreateRelation_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Base.Relation> ret);
        public static event CreateRelation_Handler<ObjectClass> OnCreateRelation_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExec;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExec")]
        public virtual bool CreateRelationCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateRelation_ObjectClass_CanExec != null)
				{
					OnCreateRelation_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnCreateRelation_ObjectClass_CanExecReason;

        [EventBasedMethod("OnCreateRelation_ObjectClass_CanExecReason")]
        public virtual string CreateRelationCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateRelation_ObjectClass_CanExecReason != null)
				{
					OnCreateRelation_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataType_ObjectClass")]
        public override System.Type GetDataType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetDataType_ObjectClass != null)
            {
                OnGetDataType_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataType();
            }
            return e.Result;
        }
        public static event GetDataType_Handler<ObjectClass> OnGetDataType_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExec")]
        public override bool GetDataTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataType_ObjectClass_CanExec != null)
				{
					OnGetDataType_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataType_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataType_ObjectClass_CanExecReason")]
        public override string GetDataTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataType_ObjectClass_CanExecReason != null)
				{
					OnGetDataType_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Datatype Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDataTypeString_ObjectClass")]
        public override string GetDataTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDataTypeString_ObjectClass != null)
            {
                OnGetDataTypeString_ObjectClass(this, e);
            }
            else
            {
                e.Result = base.GetDataTypeString();
            }
            return e.Result;
        }
        public static event GetDataTypeString_Handler<ObjectClass> OnGetDataTypeString_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExec;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExec")]
        public override bool GetDataTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDataTypeString_ObjectClass_CanExec != null)
				{
					OnGetDataTypeString_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetDataTypeString_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetDataTypeString_ObjectClass_CanExecReason")]
        public override string GetDataTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDataTypeString_ObjectClass_CanExecReason != null)
				{
					OnGetDataTypeString_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.GetDataTypeStringCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetInheritedMethods_ObjectClass")]
        public virtual IEnumerable<Zetbox.App.Base.Method> GetInheritedMethods()
        {
            var e = new MethodReturnEventArgs<IEnumerable<Zetbox.App.Base.Method>>();
            if (OnGetInheritedMethods_ObjectClass != null)
            {
                OnGetInheritedMethods_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetInheritedMethods");
            }
            return e.Result;
        }
        public delegate void GetInheritedMethods_Handler<T>(T obj, MethodReturnEventArgs<IEnumerable<Zetbox.App.Base.Method>> ret);
        public static event GetInheritedMethods_Handler<ObjectClass> OnGetInheritedMethods_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExec;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExec")]
        public virtual bool GetInheritedMethodsCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetInheritedMethods_ObjectClass_CanExec != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetInheritedMethods_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetInheritedMethods_ObjectClass_CanExecReason")]
        public virtual string GetInheritedMethodsCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetInheritedMethods_ObjectClass_CanExecReason != null)
				{
					OnGetInheritedMethods_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_ObjectClass")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_ObjectClass != null)
            {
                OnGetName_ObjectClass(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on ObjectClass.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<ObjectClass> OnGetName_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExec;

        [EventBasedMethod("OnGetName_ObjectClass_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_ObjectClass_CanExec != null)
				{
					OnGetName_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnGetName_ObjectClass_CanExecReason;

        [EventBasedMethod("OnGetName_ObjectClass_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_ObjectClass_CanExecReason != null)
				{
					OnGetName_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Implements all available interfaces as Properties and Methods
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnImplementInterfaces_ObjectClass")]
        public override void ImplementInterfaces()
        {
            // base.ImplementInterfaces();
            if (OnImplementInterfaces_ObjectClass != null)
            {
                OnImplementInterfaces_ObjectClass(this);
            }
            else
            {
                base.ImplementInterfaces();
            }
        }
        public static event ImplementInterfaces_Handler<ObjectClass> OnImplementInterfaces_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExec;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExec")]
        public override bool ImplementInterfacesCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnImplementInterfaces_ObjectClass_CanExec != null)
				{
					OnImplementInterfaces_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExec;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnImplementInterfaces_ObjectClass_CanExecReason;

        [EventBasedMethod("OnImplementInterfaces_ObjectClass_CanExecReason")]
        public override string ImplementInterfacesCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnImplementInterfaces_ObjectClass_CanExecReason != null)
				{
					OnImplementInterfaces_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = base.ImplementInterfacesCanExecReason;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Replaces all references of the given object with the target object. Does not change any other properties and will not delete the source object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnReplaceObject_ObjectClass")]
        public virtual void ReplaceObject(Zetbox.API.IDataObject target, Zetbox.API.IDataObject source)
        {
            // base.ReplaceObject();
            if (OnReplaceObject_ObjectClass != null)
            {
                OnReplaceObject_ObjectClass(this, target, source);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method ObjectClass.ReplaceObject");
            }
        }
        public delegate void ReplaceObject_Handler<T>(T obj, Zetbox.API.IDataObject target, Zetbox.API.IDataObject source);
        public static event ReplaceObject_Handler<ObjectClass> OnReplaceObject_ObjectClass;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<ObjectClass> OnReplaceObject_ObjectClass_CanExec;

        [EventBasedMethod("OnReplaceObject_ObjectClass_CanExec")]
        public virtual bool ReplaceObjectCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnReplaceObject_ObjectClass_CanExec != null)
				{
					OnReplaceObject_ObjectClass_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<ObjectClass> OnReplaceObject_ObjectClass_CanExecReason;

        [EventBasedMethod("OnReplaceObject_ObjectClass_CanExecReason")]
        public virtual string ReplaceObjectCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnReplaceObject_ObjectClass_CanExecReason != null)
				{
					OnReplaceObject_ObjectClass_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(ObjectClass);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (ObjectClass)obj;
            var otherImpl = (ObjectClassEfImpl)obj;
            var me = (ObjectClass)this;

            me.IsAbstract = other.IsAbstract;
            me.IsCreatedProgrammatically = other.IsCreatedProgrammatically;
            me.IsFrozenObject = other.IsFrozenObject;
            me.IsSimpleObject = other.IsSimpleObject;
            me.TableMapping = other.TableMapping;
            me.TableName = other.TableName;
            this._fk_BaseObjectClass = otherImpl._fk_BaseObjectClass;
            this._fk_DefaultViewModelDescriptor = otherImpl._fk_DefaultViewModelDescriptor;
        }
        public override void SetNew()
        {
            base.SetNew();
            _CodeTemplate_IsDirty = true;
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "BaseObjectClass":
                case "DefaultViewModelDescriptor":
                case "IsAbstract":
                case "IsCreatedProgrammatically":
                case "IsFrozenObject":
                case "IsSimpleObject":
                case "TableMapping":
                case "TableName":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CodeTemplate":
                    NotifyPropertyChanging(property, null, null);
                    ReportEfPropertyChanging("CodeTemplate");
                    _CodeTemplate_IsDirty = true;
                    ReportEfPropertyChanged("CodeTemplate");
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "AccessControlList":
                case "FilterConfigurations":
                case "SubClasses":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "AccessControlList":
                return TriggerFetchAccessControlListAsync();
            case "BaseObjectClass":
                return TriggerFetchBaseObjectClassAsync();
            case "DefaultViewModelDescriptor":
                return TriggerFetchDefaultViewModelDescriptorAsync();
            case "FilterConfigurations":
                return TriggerFetchFilterConfigurationsAsync();
            case "SubClasses":
                return TriggerFetchSubClassesAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_BaseObjectClass.HasValue)
                BaseObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_BaseObjectClass.Value);
            else
            if (_fk_BaseObjectClass.HasValue)
                BaseObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)Context.Find<Zetbox.App.Base.ObjectClass>(_fk_BaseObjectClass.Value);
            else
                BaseObjectClassImpl = null;

            if (_fk_guid_DefaultViewModelDescriptor.HasValue)
                DefaultViewModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_DefaultViewModelDescriptor.Value);
            else
            if (_fk_DefaultViewModelDescriptor.HasValue)
                DefaultViewModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.Find<Zetbox.App.GUI.ViewModelDescriptor>(_fk_DefaultViewModelDescriptor.Value);
            else
                DefaultViewModelDescriptorImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<ObjectClass, ICollection<Zetbox.App.Base.AccessControl>>(
                        lazyCtx,
                        new Guid("4514093c-0a1f-4644-b4a6-3389f1ca7aa8"),
                        "AccessControlList",
                        null,
                        obj => obj.AccessControlList,
                        null, // lists are read-only properties
                        obj => OnAccessControlList_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("ad060d41-bc7a-41b8-a3e3-ec9302c8c714"),
                        "BaseObjectClass",
                        null,
                        obj => obj.BaseObjectClass,
                        (obj, val) => obj.BaseObjectClass = val,
						obj => OnBaseObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, string>(
                        lazyCtx,
                        new Guid("7afdb672-f364-4b05-ad5d-ea6d59dc3553"),
                        "CodeTemplate",
                        null,
                        obj => obj.CodeTemplate,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, Zetbox.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("11adedb9-d32a-4da9-b986-0534e65df760"),
                        "DefaultViewModelDescriptor",
                        null,
                        obj => obj.DefaultViewModelDescriptor,
                        (obj, val) => obj.DefaultViewModelDescriptor = val,
						obj => OnDefaultViewModelDescriptor_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<ObjectClass, ICollection<Zetbox.App.GUI.ObjectClassFilterConfiguration>>(
                        lazyCtx,
                        new Guid("bd526c1f-a6ac-40b6-8f81-66aaf553129f"),
                        "FilterConfigurations",
                        null,
                        obj => obj.FilterConfigurations,
                        null, // lists are read-only properties
                        obj => OnFilterConfigurations_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("e9d1402e-3580-4084-8836-c44844683191"),
                        "IsAbstract",
                        null,
                        obj => obj.IsAbstract,
                        (obj, val) => obj.IsAbstract = val,
						obj => OnIsAbstract_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("176073eb-d188-40ee-9ae6-860c532da0bd"),
                        "IsCreatedProgrammatically",
                        null,
                        obj => obj.IsCreatedProgrammatically,
                        (obj, val) => obj.IsCreatedProgrammatically = val,
						obj => OnIsCreatedProgrammatically_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("13c33710-ea02-4621-ad50-294a1f36b07d"),
                        "IsFrozenObject",
                        null,
                        obj => obj.IsFrozenObject,
                        (obj, val) => obj.IsFrozenObject = val,
						obj => OnIsFrozenObject_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, bool>(
                        lazyCtx,
                        new Guid("edc853d3-0d02-4492-9159-c548c7713e9b"),
                        "IsSimpleObject",
                        null,
                        obj => obj.IsSimpleObject,
                        (obj, val) => obj.IsSimpleObject = val,
						obj => OnIsSimpleObject_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<ObjectClass, ICollection<Zetbox.App.Base.ObjectClass>>(
                        lazyCtx,
                        new Guid("0914de6e-966c-46fc-9359-e4da6c3608b1"),
                        "SubClasses",
                        null,
                        obj => obj.SubClasses,
                        null, // lists are read-only properties
                        obj => OnSubClasses_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, Zetbox.App.Base.TableMapping?>(
                        lazyCtx,
                        new Guid("8002bbe3-68b6-475b-b929-398744cc2398"),
                        "TableMapping",
                        null,
                        obj => obj.TableMapping,
                        (obj, val) => obj.TableMapping = val,
						obj => OnTableMapping_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<ObjectClass, string>(
                        lazyCtx,
                        new Guid("2a5e5111-199c-4dce-8369-ce35ee741568"),
                        "TableName",
                        null,
                        obj => obj.TableName,
                        (obj, val) => obj.TableName = val,
						obj => OnTableName_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_ObjectClass")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_ObjectClass != null)
            {
                OnToString_ObjectClass(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<ObjectClass> OnToString_ObjectClass;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_ObjectClass")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_ObjectClass != null)
            {
                OnObjectIsValid_ObjectClass(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<ObjectClass> OnObjectIsValid_ObjectClass;

        [EventBasedMethod("OnNotifyPreSave_ObjectClass")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_ObjectClass != null) OnNotifyPreSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyPreSave_ObjectClass;

        [EventBasedMethod("OnNotifyPostSave_ObjectClass")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_ObjectClass != null) OnNotifyPostSave_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyPostSave_ObjectClass;

        [EventBasedMethod("OnNotifyCreated_ObjectClass")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("BaseObjectClass");
            SetNotInitializedProperty("DefaultViewModelDescriptor");
            SetNotInitializedProperty("TableMapping");
            SetNotInitializedProperty("TableName");
            _CodeTemplate_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_ObjectClass != null) OnNotifyCreated_ObjectClass(this);
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyCreated_ObjectClass;

        [EventBasedMethod("OnNotifyDeleting_ObjectClass")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_ObjectClass != null) OnNotifyDeleting_ObjectClass(this);
            AccessControlList.Clear();
            FilterConfigurations.Clear();
            SubClasses.Clear();
            BaseObjectClass = null;
            DefaultViewModelDescriptor = null;
        }
        public static event ObjectEventHandler<ObjectClass> OnNotifyDeleting_ObjectClass;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>("Model.FK_BaseObjectClass_has_SubClasses", "BaseObjectClass");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._CodeTemplate);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>("Model.FK_Presentable_has_DefaultViewModelDescriptor", "DefaultViewModelDescriptor");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isIsAbstractSet);
            if (this._isIsAbstractSet) {
                binStream.Write(this._IsAbstract);
            }
            binStream.Write(this._isIsCreatedProgrammaticallySet);
            if (this._isIsCreatedProgrammaticallySet) {
                binStream.Write(this._IsCreatedProgrammatically);
            }
            binStream.Write(this._isIsFrozenObjectSet);
            if (this._isIsFrozenObjectSet) {
                binStream.Write(this._IsFrozenObject);
            }
            binStream.Write(this._isIsSimpleObjectSet);
            if (this._isIsSimpleObjectSet) {
                binStream.Write(this._IsSimpleObject);
            }
            binStream.Write((int?)_TableMapping);
            binStream.Write(this._TableName);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_BaseObjectClass);
            this._CodeTemplate = binStream.ReadString();
            binStream.Read(out this._fk_DefaultViewModelDescriptor);
            this._isIsAbstractSet = binStream.ReadBoolean();
            if (this._isIsAbstractSet) {
                this._IsAbstract = binStream.ReadBoolean();
            }
            this._isIsCreatedProgrammaticallySet = binStream.ReadBoolean();
            if (this._isIsCreatedProgrammaticallySet) {
                this._IsCreatedProgrammatically = binStream.ReadBoolean();
            }
            this._isIsFrozenObjectSet = binStream.ReadBoolean();
            if (this._isIsFrozenObjectSet) {
                this._IsFrozenObject = binStream.ReadBoolean();
            }
            this._isIsSimpleObjectSet = binStream.ReadBoolean();
            if (this._isIsSimpleObjectSet) {
                this._IsSimpleObject = binStream.ReadBoolean();
            }
            _TableMapping = (Zetbox.App.Base.TableMapping?)binStream.ReadNullableInt32();
            this._TableName = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public override void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            base.Export(xml, modules);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(BaseObjectClass != null ? BaseObjectClass.ExportGuid : (Guid?)null, xml, "BaseObjectClass", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CodeTemplate, xml, "CodeTemplate", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(DefaultViewModelDescriptor != null ? DefaultViewModelDescriptor.ExportGuid : (Guid?)null, xml, "DefaultViewModelDescriptor", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._IsAbstract, xml, "IsAbstract", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._IsCreatedProgrammatically, xml, "IsCreatedProgrammatically", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._IsFrozenObject, xml, "IsFrozenObject", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(this._IsSimpleObject, xml, "IsSimpleObject", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream((int?)_TableMapping, xml, "TableMapping", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._TableName, xml, "TableName", "Zetbox.App.Base");
        }

        public override void MergeImport(System.Xml.XmlReader xml)
        {
            base.MergeImport(xml);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|BaseObjectClass":
                this._fk_guid_BaseObjectClass = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|CodeTemplate":
                this._CodeTemplate = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.GUI|DefaultViewModelDescriptor":
                this._fk_guid_DefaultViewModelDescriptor = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|IsAbstract":
                // Import must have default value set
                this._IsAbstract = XmlStreamer.ReadBoolean(xml);
                this._isIsAbstractSet = true;
                break;
            case "Zetbox.App.Base|IsCreatedProgrammatically":
                // Import must have default value set
                this._IsCreatedProgrammatically = XmlStreamer.ReadBoolean(xml);
                this._isIsCreatedProgrammaticallySet = true;
                break;
            case "Zetbox.App.Base|IsFrozenObject":
                // Import must have default value set
                this._IsFrozenObject = XmlStreamer.ReadBoolean(xml);
                this._isIsFrozenObjectSet = true;
                break;
            case "Zetbox.App.GUI|IsSimpleObject":
                // Import must have default value set
                this._IsSimpleObject = XmlStreamer.ReadBoolean(xml);
                this._isIsSimpleObjectSet = true;
                break;
            case "Zetbox.App.Base|TableMapping":
                _TableMapping = (Zetbox.App.Base.TableMapping?)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.Base|TableName":
                this._TableName = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
// <autogenerated/>

namespace Zetbox.App.Base
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// Metadefinition Object for Properties. This class is abstract.
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="PropertyEfImpl")]
    [System.Diagnostics.DebuggerDisplay("Property")]
    public abstract class PropertyEfImpl : BaseServerDataObject_EntityFramework, Property, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("e5f93f63-9cb8-40a5-8118-d1d9e479370c");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public PropertyEfImpl()
            : base(null)
        {
        }

        public PropertyEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// For collection properties, allow filtering
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool AllowFilterCollections
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _AllowFilterCollections;
                if (!_isAllowFilterCollectionsSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("018cd3e6-aff1-457c-853a-d0f1a4173dba"));
                    if (__p != null) {
                        _isAllowFilterCollectionsSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._AllowFilterCollections = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Property.AllowFilterCollections'");
                    }
                }
                if (OnAllowFilterCollections_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnAllowFilterCollections_Getter(this, __e);
                    __result = _AllowFilterCollections = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isAllowFilterCollectionsSet = true;
                if (_AllowFilterCollections != value)
                {
                    var __oldValue = _AllowFilterCollections;
                    var __newValue = value;
                    if (OnAllowFilterCollections_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnAllowFilterCollections_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("AllowFilterCollections", __oldValue, __newValue);
                    _AllowFilterCollections = __newValue;
                    NotifyPropertyChanged("AllowFilterCollections", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnAllowFilterCollections_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnAllowFilterCollections_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("AllowFilterCollections");
                }
            }
        }
        private bool _AllowFilterCollections_store;
        private bool _AllowFilterCollections {
            get { return _AllowFilterCollections_store; }
            set {
                ReportEfPropertyChanging("AllowFilterCollections");
                _AllowFilterCollections_store = value;
                ReportEfPropertyChanged("AllowFilterCollections");
            }
        }
        private bool _isAllowFilterCollectionsSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, bool> OnAllowFilterCollections_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, bool> OnAllowFilterCollections_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, bool> OnAllowFilterCollections_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnAllowFilterCollections_IsValid;

        /// <summary>
        /// A space separated list of category names containing this Property
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string CategoryTags
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CategoryTags;
                if (OnCategoryTags_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCategoryTags_Getter(this, __e);
                    __result = _CategoryTags = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CategoryTags != value)
                {
                    var __oldValue = _CategoryTags;
                    var __newValue = value;
                    if (OnCategoryTags_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CategoryTags", __oldValue, __newValue);
                    _CategoryTags = __newValue;
                    NotifyPropertyChanged("CategoryTags", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCategoryTags_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnCategoryTags_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CategoryTags");
                }
            }
        }
        private string _CategoryTags_store;
        private string _CategoryTags {
            get { return _CategoryTags_store; }
            set {
                ReportEfPropertyChanging("CategoryTags");
                _CategoryTags_store = value;
                ReportEfPropertyChanged("CategoryTags");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnCategoryTags_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, string> OnCategoryTags_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, string> OnCategoryTags_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnCategoryTags_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_Property_was_ChangedBy
    A: ZeroOrMore Property as Property
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_was_ChangedBy", "ChangedBy")]
        public Zetbox.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Property_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Property_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d828264c-7c90-4050-a03d-3ea1829ce9d9"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Property.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn_store;
        private DateTime _ChangedOn {
            get { return _ChangedOn_store; }
            set {
                ReportEfPropertyChanging("ChangedOn");
                _ChangedOn_store = value;
                ReportEfPropertyChanged("ChangedOn");
            }
        }
        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnChangedOn_IsValid;

        /// <summary>
        /// Provides a code template for a calculated property
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string CodeTemplate
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CodeTemplate;
                if (_CodeTemplate_IsDirty && OnCodeTemplate_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnCodeTemplate_Getter(this, __e);
                    _CodeTemplate_IsDirty = false;
                    __result = _CodeTemplate = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_CodeTemplate != value)
                {
                    var __oldValue = _CodeTemplate;
                    var __newValue = value;
                    NotifyPropertyChanging("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate = __newValue;
                    NotifyPropertyChanged("CodeTemplate", __oldValue, __newValue);
                    _CodeTemplate_IsDirty = false;

                }
                else
                {
                    SetInitializedProperty("CodeTemplate");
                }
            }
        }
        private string _CodeTemplate_store;
        private string _CodeTemplate {
            get { return _CodeTemplate_store; }
            set {
                ReportEfPropertyChanging("CodeTemplate");
                _CodeTemplate_store = value;
                ReportEfPropertyChanged("CodeTemplate");
            }
        }
        private bool _CodeTemplate_IsDirty = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnCodeTemplate_Getter;

        /// <summary>
        /// The list of constraints applying to this Property
        /// </summary>
    /*
    Relation: FK_ConstrainedProperty_has_Constraints
    A: One Property as ConstrainedProperty
    B: ZeroOrMore Constraint as Constraints
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Base.Constraint> Constraints
        {
            get
            {
                if (_Constraints == null)
                {
                    _Constraints = new EntityCollectionWrapper<Zetbox.App.Base.Constraint, Zetbox.App.Base.ConstraintEfImpl>(
                            this.Context, ConstraintsImpl,
                            () => this.NotifyPropertyChanging("Constraints", null, null),
                            null, // see GetConstraintsImplCollection()
                            (item) => item.NotifyPropertyChanging("ConstrainedProperty", null, null),
                            (item) => item.NotifyPropertyChanged("ConstrainedProperty", null, null));
                }
                return _Constraints;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_ConstrainedProperty_has_Constraints", "Constraints")]
        public EntityCollection<Zetbox.App.Base.ConstraintEfImpl> ConstraintsImpl
        {
            get
            {
                return GetConstraintsImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Base.Constraint, Zetbox.App.Base.ConstraintEfImpl> _Constraints;

        private EntityCollection<Zetbox.App.Base.ConstraintEfImpl> _ConstraintsImplEntityCollection;
        internal EntityCollection<Zetbox.App.Base.ConstraintEfImpl> GetConstraintsImplCollection()
        {
            if (_ConstraintsImplEntityCollection == null)
            {
                _ConstraintsImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Base.ConstraintEfImpl>(
                        "Model.FK_ConstrainedProperty_has_Constraints",
                        "Constraints");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_ConstraintsImplEntityCollection.IsLoaded)
                {
                    _ConstraintsImplEntityCollection.Load();
                }
                _ConstraintsImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("Constraints", null, null); if (OnConstraints_PostSetter != null && IsAttached) OnConstraints_PostSetter(this); };
            }
            return _ConstraintsImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchConstraintsAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Base.Constraint>>(this.Constraints);
        }

        private List<int> ConstraintsIds;
        private bool Constraints_was_eagerLoaded = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Base.Property> OnConstraints_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnConstraints_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_Property_was_CreatedBy
    A: ZeroOrMore Property as Property
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_was_CreatedBy", "CreatedBy")]
        public Zetbox.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Property_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_Property_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("767fbab2-f9b4-41a9-9218-f60e0624b64f"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Property.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn_store;
        private DateTime _CreatedOn {
            get { return _CreatedOn_store; }
            set {
                ReportEfPropertyChanging("CreatedOn");
                _CreatedOn_store = value;
                ReportEfPropertyChanged("CreatedOn");
            }
        }
        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnCreatedOn_IsValid;

        /// <summary>
        /// Properties that have a priority set are used to order instance lists. Smaller values are sorted first.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? DefaultSortPriority
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _DefaultSortPriority;
                if (OnDefaultSortPriority_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<int?>(__result);
                    OnDefaultSortPriority_Getter(this, __e);
                    __result = _DefaultSortPriority = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_DefaultSortPriority != value)
                {
                    var __oldValue = _DefaultSortPriority;
                    var __newValue = value;
                    if (OnDefaultSortPriority_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<int?>(__oldValue, __newValue);
                        OnDefaultSortPriority_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DefaultSortPriority", __oldValue, __newValue);
                    _DefaultSortPriority = __newValue;
                    NotifyPropertyChanged("DefaultSortPriority", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDefaultSortPriority_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<int?>(__oldValue, __newValue);
                        OnDefaultSortPriority_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("DefaultSortPriority");
                }
            }
        }
        private int? _DefaultSortPriority_store;
        private int? _DefaultSortPriority {
            get { return _DefaultSortPriority_store; }
            set {
                ReportEfPropertyChanging("DefaultSortPriority");
                _DefaultSortPriority_store = value;
                ReportEfPropertyChanged("DefaultSortPriority");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, int?> OnDefaultSortPriority_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, int?> OnDefaultSortPriority_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, int?> OnDefaultSortPriority_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnDefaultSortPriority_IsValid;

        /// <summary>
        /// Property can have a default value
        /// </summary>
    /*
    Relation: FK_Property_has_DefaultValue
    A: One Property as Property
    B: ZeroOrOne DefaultPropertyValue as DefaultValue
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultValue
        // fkBackingName=_fk_DefaultValue; fkGuidBackingName=_fk_guid_DefaultValue;
        // referencedInterface=Zetbox.App.Base.DefaultPropertyValue; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=Property; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.DefaultPropertyValue DefaultValue
        {
            get { return DefaultValueImpl; }
            set { DefaultValueImpl = (Zetbox.App.Base.DefaultPropertyValueEfImpl)value; }
        }

        private int? _fk_DefaultValue;

        /// <summary>ForeignKey Property for DefaultValue's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DefaultValue
		{
			get { return DefaultValue != null ? DefaultValue.ID : (int?)null; }
			set { _fk_DefaultValue = value; }
		}

        private Guid? _fk_guid_DefaultValue = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_has_DefaultValue", "DefaultValue")]
        public Zetbox.App.Base.DefaultPropertyValueEfImpl DefaultValueImpl
        {
            get
            {
                Zetbox.App.Base.DefaultPropertyValueEfImpl __value;
                EntityReference<Zetbox.App.Base.DefaultPropertyValueEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DefaultPropertyValueEfImpl>(
                        "Model.FK_Property_has_DefaultValue",
                        "DefaultValue");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDefaultValue_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.DefaultPropertyValue>(__value);
                    OnDefaultValue_Getter(this, e);
                    __value = (Zetbox.App.Base.DefaultPropertyValueEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.DefaultPropertyValueEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DefaultPropertyValueEfImpl>(
                        "Model.FK_Property_has_DefaultValue",
                        "DefaultValue");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.DefaultPropertyValueEfImpl __oldValue = (Zetbox.App.Base.DefaultPropertyValueEfImpl)r.Value;
                Zetbox.App.Base.DefaultPropertyValueEfImpl __newValue = (Zetbox.App.Base.DefaultPropertyValueEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DefaultValue", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Property", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Property", null, null);
                }

                if (OnDefaultValue_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
                    OnDefaultValue_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.DefaultPropertyValueEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.DefaultPropertyValueEfImpl)__newValue;

                if (OnDefaultValue_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.DefaultPropertyValue>(__oldValue, __newValue);
                    OnDefaultValue_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DefaultValue", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("Property", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("Property", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDefaultValueAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.DefaultPropertyValue>(this.DefaultValue);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DefaultValue
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DefaultPropertyValue> OnDefaultValue_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DefaultPropertyValue> OnDefaultValue_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DefaultPropertyValue> OnDefaultValue_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnDefaultValue_IsValid;

        /// <summary>
        /// Description of this Property
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description_store;
        private string _Description {
            get { return _Description_store; }
            set {
                ReportEfPropertyChanging("Description");
                _Description_store = value;
                ReportEfPropertyChanged("Description");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnDescription_IsValid;

        /// <summary>
        /// Disables the export. If not set, export is enabled
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool? DisableExport
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _DisableExport;
                if (OnDisableExport_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool?>(__result);
                    OnDisableExport_Getter(this, __e);
                    __result = _DisableExport = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_DisableExport != value)
                {
                    var __oldValue = _DisableExport;
                    var __newValue = value;
                    if (OnDisableExport_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnDisableExport_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("DisableExport", __oldValue, __newValue);
                    _DisableExport = __newValue;
                    NotifyPropertyChanged("DisableExport", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDisableExport_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool?>(__oldValue, __newValue);
                        OnDisableExport_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("DisableExport");
                }
            }
        }
        private bool? _DisableExport_store;
        private bool? _DisableExport {
            get { return _DisableExport_store; }
            set {
                ReportEfPropertyChanging("DisableExport");
                _DisableExport_store = value;
                ReportEfPropertyChanged("DisableExport");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, bool?> OnDisableExport_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, bool?> OnDisableExport_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, bool?> OnDisableExport_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnDisableExport_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'Property.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_Property_Has_PropertyFilterConfiguration
    A: One Property as Property
    B: ZeroOrOne PropertyFilterConfiguration as PropertyFilterConfiguration
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FilterConfiguration
        // fkBackingName=_fk_FilterConfiguration; fkGuidBackingName=_fk_guid_FilterConfiguration;
        // referencedInterface=Zetbox.App.GUI.PropertyFilterConfiguration; moduleNamespace=Zetbox.App.GUI;
        // inverse Navigator=Property; is reference;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.PropertyFilterConfiguration FilterConfiguration
        {
            get { return FilterConfigurationImpl; }
            set { FilterConfigurationImpl = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)value; }
        }

        private int? _fk_FilterConfiguration;

        /// <summary>ForeignKey Property for FilterConfiguration's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_FilterConfiguration
		{
			get { return FilterConfiguration != null ? FilterConfiguration.ID : (int?)null; }
			set { _fk_FilterConfiguration = value; }
		}

        private Guid? _fk_guid_FilterConfiguration = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_Has_PropertyFilterConfiguration", "PropertyFilterConfiguration")]
        public Zetbox.App.GUI.PropertyFilterConfigurationEfImpl FilterConfigurationImpl
        {
            get
            {
                Zetbox.App.GUI.PropertyFilterConfigurationEfImpl __value;
                EntityReference<Zetbox.App.GUI.PropertyFilterConfigurationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.PropertyFilterConfigurationEfImpl>(
                        "Model.FK_Property_Has_PropertyFilterConfiguration",
                        "PropertyFilterConfiguration");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnFilterConfiguration_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.PropertyFilterConfiguration>(__value);
                    OnFilterConfiguration_Getter(this, e);
                    __value = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.PropertyFilterConfigurationEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.PropertyFilterConfigurationEfImpl>(
                        "Model.FK_Property_Has_PropertyFilterConfiguration",
                        "PropertyFilterConfiguration");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.PropertyFilterConfigurationEfImpl __oldValue = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)r.Value;
                Zetbox.App.GUI.PropertyFilterConfigurationEfImpl __newValue = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("FilterConfiguration", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Property", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Property", null, null);
                }

                if (OnFilterConfiguration_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.PropertyFilterConfiguration>(__oldValue, __newValue);
                    OnFilterConfiguration_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)__newValue;

                if (OnFilterConfiguration_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.PropertyFilterConfiguration>(__oldValue, __newValue);
                    OnFilterConfiguration_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("FilterConfiguration", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("Property", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("Property", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchFilterConfigurationAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.PropertyFilterConfiguration>(this.FilterConfiguration);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for FilterConfiguration
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.PropertyFilterConfiguration> OnFilterConfiguration_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnFilterConfiguration_IsValid;

        /// <summary>
        /// A HTML string with a help text
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string HelpText
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _HelpText;
                if (OnHelpText_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnHelpText_Getter(this, __e);
                    __result = _HelpText = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_HelpText != value)
                {
                    var __oldValue = _HelpText;
                    var __newValue = value;
                    if (OnHelpText_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("HelpText", __oldValue, __newValue);
                    _HelpText = __newValue;
                    NotifyPropertyChanged("HelpText", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnHelpText_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnHelpText_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("HelpText");
                }
            }
        }
        private string _HelpText_store;
        private string _HelpText {
            get { return _HelpText_store; }
            set {
                ReportEfPropertyChanging("HelpText");
                _HelpText_store = value;
                ReportEfPropertyChanged("HelpText");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnHelpText_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, string> OnHelpText_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, string> OnHelpText_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnHelpText_IsValid;

        /// <summary>
        /// Label is displayed to User in UI
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Label
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Label;
                if (OnLabel_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnLabel_Getter(this, __e);
                    __result = _Label = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Label != value)
                {
                    var __oldValue = _Label;
                    var __newValue = value;
                    if (OnLabel_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Label", __oldValue, __newValue);
                    _Label = __newValue;
                    NotifyPropertyChanged("Label", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnLabel_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnLabel_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Label");
                }
            }
        }
        private string _Label_store;
        private string _Label {
            get { return _Label_store; }
            set {
                ReportEfPropertyChanging("Label");
                _Label_store = value;
                ReportEfPropertyChanged("Label");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnLabel_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, string> OnLabel_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, string> OnLabel_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnLabel_IsValid;

        /// <summary>
        /// Zugehörig zum Modul
        /// </summary>
    /*
    Relation: FK_BaseProperty_has_Module
    A: ZeroOrMore Property as BaseProperty
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Base;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_BaseProperty_has_Module", "Module")]
        public Zetbox.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleEfImpl __value;
                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_BaseProperty_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_BaseProperty_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ModuleEfImpl __oldValue = (Zetbox.App.Base.ModuleEfImpl)r.Value;
                Zetbox.App.Base.ModuleEfImpl __newValue = (Zetbox.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name_store;
        private string _Name {
            get { return _Name_store; }
            set {
                ReportEfPropertyChanging("Name");
                _Name_store = value;
                ReportEfPropertyChanged("Name");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_ObjectClass_has_Properties
    A: One DataType as ObjectClass
    B: ZeroOrMore Property as Properties
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
        // fkBackingName=_fk_ObjectClass; fkGuidBackingName=_fk_guid_ObjectClass;
        // referencedInterface=Zetbox.App.Base.DataType; moduleNamespace=Zetbox.App.Base;
        // inverse Navigator=Properties; is list;
        // PositionStorage=Properties_pos;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.DataType ObjectClass
        {
            get { return ObjectClassImpl; }
            set { ObjectClassImpl = (Zetbox.App.Base.DataTypeEfImpl)value; }
        }

        private int? _fk_ObjectClass;

        /// <summary>ForeignKey Property for ObjectClass's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ObjectClass
		{
			get { return ObjectClass != null ? ObjectClass.ID : (int?)null; }
			set { _fk_ObjectClass = value; }
		}

        private Guid? _fk_guid_ObjectClass = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_ObjectClass_has_Properties", "ObjectClass")]
        public Zetbox.App.Base.DataTypeEfImpl ObjectClassImpl
        {
            get
            {
                Zetbox.App.Base.DataTypeEfImpl __value;
                EntityReference<Zetbox.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>(
                        "Model.FK_ObjectClass_has_Properties",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.DataType>(__value);
                    OnObjectClass_Getter(this, e);
                    __value = (Zetbox.App.Base.DataTypeEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.DataTypeEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>(
                        "Model.FK_ObjectClass_has_Properties",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.DataTypeEfImpl __oldValue = (Zetbox.App.Base.DataTypeEfImpl)r.Value;
                Zetbox.App.Base.DataTypeEfImpl __newValue = (Zetbox.App.Base.DataTypeEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ObjectClass", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("Properties", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("Properties", null, null);
                }

                if (OnObjectClass_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.DataTypeEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.DataTypeEfImpl)__newValue;

                if (OnObjectClass_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.DataType>(__oldValue, __newValue);
                    OnObjectClass_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ObjectClass", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("Properties", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("Properties", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchObjectClassAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.DataType>(this.ObjectClass);
        }

        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public int? Properties_pos
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Properties_pos;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Properties_pos != value)
                {
                    var __oldValue = _Properties_pos;
                    var __newValue = value;
                    NotifyPropertyChanging("Properties_pos", __oldValue, __newValue);
                    _Properties_pos = __newValue;
                    NotifyPropertyChanged("Properties_pos", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("Properties_pos");
                }
            }
        }
        private int? _Properties_pos_store;
        private int? _Properties_pos {
            get { return _Properties_pos_store; }
            set {
                ReportEfPropertyChanging("Properties_pos");
                _Properties_pos_store = value;
                ReportEfPropertyChanged("Properties_pos");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingValueProperty
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ObjectClass
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DataType> OnObjectClass_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DataType> OnObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.Base.DataType> OnObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnObjectClass_IsValid;

        /// <summary>
        /// Optional requested ControlKind
        /// </summary>
    /*
    Relation: FK_Property_may_request_ControlKind
    A: ZeroOrMore Property as Property
    B: ZeroOrOne ControlKind as ControlKind
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
        // fkBackingName=_fk_RequestedKind; fkGuidBackingName=_fk_guid_RequestedKind;
        // referencedInterface=Zetbox.App.GUI.ControlKind; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ControlKind RequestedKind
        {
            get { return RequestedKindImpl; }
            set { RequestedKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)value; }
        }

        private int? _fk_RequestedKind;

        /// <summary>ForeignKey Property for RequestedKind's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_RequestedKind
		{
			get { return RequestedKind != null ? RequestedKind.ID : (int?)null; }
			set { _fk_RequestedKind = value; }
		}

        private Guid? _fk_guid_RequestedKind = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_may_request_ControlKind", "ControlKind")]
        public Zetbox.App.GUI.ControlKindEfImpl RequestedKindImpl
        {
            get
            {
                Zetbox.App.GUI.ControlKindEfImpl __value;
                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Property_may_request_ControlKind",
                        "ControlKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnRequestedKind_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ControlKind>(__value);
                    OnRequestedKind_Getter(this, e);
                    __value = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ControlKindEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>(
                        "Model.FK_Property_may_request_ControlKind",
                        "ControlKind");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ControlKindEfImpl __oldValue = (Zetbox.App.GUI.ControlKindEfImpl)r.Value;
                Zetbox.App.GUI.ControlKindEfImpl __newValue = (Zetbox.App.GUI.ControlKindEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("RequestedKind", __oldValue, __newValue);

                if (OnRequestedKind_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ControlKindEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ControlKindEfImpl)__newValue;

                if (OnRequestedKind_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ControlKind>(__oldValue, __newValue);
                    OnRequestedKind_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("RequestedKind", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchRequestedKindAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ControlKind>(this.RequestedKind);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for RequestedKind
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ControlKind> OnRequestedKind_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ControlKind> OnRequestedKind_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ControlKind> OnRequestedKind_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnRequestedKind_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
        public Zetbox.App.GUI.WidthHint? RequestedWidth
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _RequestedWidth;
                if (OnRequestedWidth_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.GUI.WidthHint?>(__result);
                    OnRequestedWidth_Getter(this, __e);
                    __result = _RequestedWidth = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_RequestedWidth != value)
                {
                    var __oldValue = _RequestedWidth;
                    var __newValue = value;
                    if (OnRequestedWidth_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.WidthHint?>(__oldValue, __newValue);
                        OnRequestedWidth_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("RequestedWidth", __oldValue, __newValue);
                    _RequestedWidth = __newValue;
                    NotifyPropertyChanged("RequestedWidth", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnRequestedWidth_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.WidthHint?>(__oldValue, __newValue);
                        OnRequestedWidth_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("RequestedWidth");
                }
            }
        }
        private Zetbox.App.GUI.WidthHint? _RequestedWidth_store;
        private Zetbox.App.GUI.WidthHint? _RequestedWidth {
            get { return _RequestedWidth_store; }
            set {
                ReportEfPropertyChanging("RequestedWidthImpl");
                _RequestedWidth_store = value;
                ReportEfPropertyChanged("RequestedWidthImpl");
            }
        }

        /// <summary>EF sees only this property, for RequestedWidth</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? RequestedWidthImpl
        {
            get
            {
                return (int?)this.RequestedWidth;
            }
            set
            {
                this.RequestedWidth = (Zetbox.App.GUI.WidthHint?)value;
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.WidthHint?> OnRequestedWidth_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.WidthHint?> OnRequestedWidth_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.WidthHint?> OnRequestedWidth_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnRequestedWidth_IsValid;

        /// <summary>
        /// The ViewModel to use for values of this Property
        /// </summary>
    /*
    Relation: FK_Property_has_ValueModelDescriptor
    A: ZeroOrMore Property as Property
    B: One ViewModelDescriptor as ValueModelDescriptor
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ValueModelDescriptor
        // fkBackingName=_fk_ValueModelDescriptor; fkGuidBackingName=_fk_guid_ValueModelDescriptor;
        // referencedInterface=Zetbox.App.GUI.ViewModelDescriptor; moduleNamespace=Zetbox.App.GUI;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.GUI.ViewModelDescriptor ValueModelDescriptor
        {
            get { return ValueModelDescriptorImpl; }
            set { ValueModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value; }
        }

        private int? _fk_ValueModelDescriptor;

        /// <summary>ForeignKey Property for ValueModelDescriptor's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ValueModelDescriptor
		{
			get { return ValueModelDescriptor != null ? ValueModelDescriptor.ID : (int?)null; }
			set { _fk_ValueModelDescriptor = value; }
		}

        private Guid? _fk_guid_ValueModelDescriptor = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_Property_has_ValueModelDescriptor", "ValueModelDescriptor")]
        public Zetbox.App.GUI.ViewModelDescriptorEfImpl ValueModelDescriptorImpl
        {
            get
            {
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __value;
                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Property_has_ValueModelDescriptor",
                        "ValueModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnValueModelDescriptor_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__value);
                    OnValueModelDescriptor_Getter(this, e);
                    __value = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>(
                        "Model.FK_Property_has_ValueModelDescriptor",
                        "ValueModelDescriptor");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __oldValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)r.Value;
                Zetbox.App.GUI.ViewModelDescriptorEfImpl __newValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ValueModelDescriptor", __oldValue, __newValue);

                if (OnValueModelDescriptor_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnValueModelDescriptor_PreSetter(this, e);
                    __newValue = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)__newValue;

                if (OnValueModelDescriptor_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.GUI.ViewModelDescriptor>(__oldValue, __newValue);
                    OnValueModelDescriptor_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ValueModelDescriptor", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchValueModelDescriptorAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.GUI.ViewModelDescriptor>(this.ValueModelDescriptor);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ValueModelDescriptor
		public static event PropertyGetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Base.Property, Zetbox.App.GUI.ViewModelDescriptor> OnValueModelDescriptor_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Base.Property> OnValueModelDescriptor_IsValid;

        /// <summary>
        /// Returns the translated description
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetDescription_Property")]
        public virtual string GetDescription()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetDescription_Property != null)
            {
                OnGetDescription_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetDescription");
            }
            return e.Result;
        }
        public delegate void GetDescription_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetDescription_Handler<Property> OnGetDescription_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetDescription_Property_CanExec;

        [EventBasedMethod("OnGetDescription_Property_CanExec")]
        public virtual bool GetDescriptionCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetDescription_Property_CanExec != null)
				{
					OnGetDescription_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetDescription_Property_CanExecReason;

        [EventBasedMethod("OnGetDescription_Property_CanExecReason")]
        public virtual string GetDescriptionCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetDescription_Property_CanExecReason != null)
				{
					OnGetDescription_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// The element type for multi-valued properties. The property type string in all other cases.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetElementTypeString_Property")]
        public virtual string GetElementTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetElementTypeString_Property != null)
            {
                OnGetElementTypeString_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetElementTypeString");
            }
            return e.Result;
        }
        public delegate void GetElementTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetElementTypeString_Handler<Property> OnGetElementTypeString_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetElementTypeString_Property_CanExec;

        [EventBasedMethod("OnGetElementTypeString_Property_CanExec")]
        public virtual bool GetElementTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetElementTypeString_Property_CanExec != null)
				{
					OnGetElementTypeString_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetElementTypeString_Property_CanExecReason;

        [EventBasedMethod("OnGetElementTypeString_Property_CanExecReason")]
        public virtual string GetElementTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetElementTypeString_Property_CanExecReason != null)
				{
					OnGetElementTypeString_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetLabel_Property")]
        public virtual string GetLabel()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetLabel_Property != null)
            {
                OnGetLabel_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetLabel");
            }
            return e.Result;
        }
        public delegate void GetLabel_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetLabel_Handler<Property> OnGetLabel_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetLabel_Property_CanExec;

        [EventBasedMethod("OnGetLabel_Property_CanExec")]
        public virtual bool GetLabelCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetLabel_Property_CanExec != null)
				{
					OnGetLabel_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetLabel_Property_CanExecReason;

        [EventBasedMethod("OnGetLabel_Property_CanExecReason")]
        public virtual string GetLabelCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetLabel_Property_CanExecReason != null)
				{
					OnGetLabel_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetName_Property")]
        public virtual string GetName()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetName_Property != null)
            {
                OnGetName_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetName");
            }
            return e.Result;
        }
        public delegate void GetName_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetName_Handler<Property> OnGetName_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetName_Property_CanExec;

        [EventBasedMethod("OnGetName_Property_CanExec")]
        public virtual bool GetNameCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetName_Property_CanExec != null)
				{
					OnGetName_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetName_Property_CanExecReason;

        [EventBasedMethod("OnGetName_Property_CanExecReason")]
        public virtual string GetNameCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetName_Property_CanExecReason != null)
				{
					OnGetName_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the resulting Type of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyType_Property")]
        public virtual System.Type GetPropertyType()
        {
            var e = new MethodReturnEventArgs<System.Type>();
            if (OnGetPropertyType_Property != null)
            {
                OnGetPropertyType_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyType");
            }
            return e.Result;
        }
        public delegate void GetPropertyType_Handler<T>(T obj, MethodReturnEventArgs<System.Type> ret);
        public static event GetPropertyType_Handler<Property> OnGetPropertyType_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetPropertyType_Property_CanExec;

        [EventBasedMethod("OnGetPropertyType_Property_CanExec")]
        public virtual bool GetPropertyTypeCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyType_Property_CanExec != null)
				{
					OnGetPropertyType_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetPropertyType_Property_CanExecReason;

        [EventBasedMethod("OnGetPropertyType_Property_CanExecReason")]
        public virtual string GetPropertyTypeCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyType_Property_CanExecReason != null)
				{
					OnGetPropertyType_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the String representation of this Property Meta Object.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetPropertyTypeString_Property")]
        public virtual string GetPropertyTypeString()
        {
            var e = new MethodReturnEventArgs<string>();
            if (OnGetPropertyTypeString_Property != null)
            {
                OnGetPropertyTypeString_Property(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on Property.GetPropertyTypeString");
            }
            return e.Result;
        }
        public delegate void GetPropertyTypeString_Handler<T>(T obj, MethodReturnEventArgs<string> ret);
        public static event GetPropertyTypeString_Handler<Property> OnGetPropertyTypeString_Property;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<Property> OnGetPropertyTypeString_Property_CanExec;

        [EventBasedMethod("OnGetPropertyTypeString_Property_CanExec")]
        public virtual bool GetPropertyTypeStringCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetPropertyTypeString_Property_CanExec != null)
				{
					OnGetPropertyTypeString_Property_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<Property> OnGetPropertyTypeString_Property_CanExecReason;

        [EventBasedMethod("OnGetPropertyTypeString_Property_CanExecReason")]
        public virtual string GetPropertyTypeStringCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetPropertyTypeString_Property_CanExecReason != null)
				{
					OnGetPropertyTypeString_Property_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(Property);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (Property)obj;
            var otherImpl = (PropertyEfImpl)obj;
            var me = (Property)this;

            me.AllowFilterCollections = other.AllowFilterCollections;
            me.CategoryTags = other.CategoryTags;
            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.DefaultSortPriority = other.DefaultSortPriority;
            me.Description = other.Description;
            me.DisableExport = other.DisableExport;
            me.ExportGuid = other.ExportGuid;
            me.HelpText = other.HelpText;
            me.Label = other.Label;
            me.Name = other.Name;
            me.RequestedWidth = other.RequestedWidth;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DefaultValue = otherImpl._fk_DefaultValue;
            this._fk_FilterConfiguration = otherImpl._fk_FilterConfiguration;
            this._fk_Module = otherImpl._fk_Module;
            this.Properties_pos = otherImpl.Properties_pos;
            this._fk_ObjectClass = otherImpl._fk_ObjectClass;
            this._fk_RequestedKind = otherImpl._fk_RequestedKind;
            this._fk_ValueModelDescriptor = otherImpl._fk_ValueModelDescriptor;
        }
        public override void SetNew()
        {
            base.SetNew();
            _CodeTemplate_IsDirty = true;
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "AllowFilterCollections":
                case "CategoryTags":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "DefaultSortPriority":
                case "DefaultValue":
                case "Description":
                case "DisableExport":
                case "ExportGuid":
                case "FilterConfiguration":
                case "HelpText":
                case "Label":
                case "Module":
                case "Name":
                case "ObjectClass":
                case "RequestedKind":
                case "RequestedWidth":
                case "ValueModelDescriptor":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        public override void Recalculate(string property)
        {
            switch (property)
            {
                case "CodeTemplate":
                    NotifyPropertyChanging(property, null, null);
                    ReportEfPropertyChanging("CodeTemplate");
                    _CodeTemplate_IsDirty = true;
                    ReportEfPropertyChanged("CodeTemplate");
                    NotifyPropertyChanged(property, null, null);
                    return;
            }

            base.Recalculate(property);
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "Constraints":
                case "DefaultValue":
                case "FilterConfiguration":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "Constraints":
                return TriggerFetchConstraintsAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "DefaultValue":
                return TriggerFetchDefaultValueAsync();
            case "FilterConfiguration":
                return TriggerFetchFilterConfigurationAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "ObjectClass":
                return TriggerFetchObjectClassAsync();
            case "RequestedKind":
                return TriggerFetchRequestedKindAsync();
            case "ValueModelDescriptor":
                return TriggerFetchValueModelDescriptorAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_DefaultValue.HasValue)
                DefaultValueImpl = (Zetbox.App.Base.DefaultPropertyValueEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.DefaultPropertyValue>(_fk_guid_DefaultValue.Value);
            else
            if (_fk_DefaultValue.HasValue)
                DefaultValueImpl = (Zetbox.App.Base.DefaultPropertyValueEfImpl)Context.Find<Zetbox.App.Base.DefaultPropertyValue>(_fk_DefaultValue.Value);
            else
                DefaultValueImpl = null;

            if (_fk_guid_FilterConfiguration.HasValue)
                FilterConfigurationImpl = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.PropertyFilterConfiguration>(_fk_guid_FilterConfiguration.Value);
            else
            if (_fk_FilterConfiguration.HasValue)
                FilterConfigurationImpl = (Zetbox.App.GUI.PropertyFilterConfigurationEfImpl)Context.Find<Zetbox.App.GUI.PropertyFilterConfiguration>(_fk_FilterConfiguration.Value);
            else
                FilterConfigurationImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_ObjectClass.HasValue)
                ObjectClassImpl = (Zetbox.App.Base.DataTypeEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.DataType>(_fk_guid_ObjectClass.Value);
            else
            if (_fk_ObjectClass.HasValue)
                ObjectClassImpl = (Zetbox.App.Base.DataTypeEfImpl)Context.Find<Zetbox.App.Base.DataType>(_fk_ObjectClass.Value);
            else
                ObjectClassImpl = null;

            if (_fk_guid_RequestedKind.HasValue)
                RequestedKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ControlKind>(_fk_guid_RequestedKind.Value);
            else
            if (_fk_RequestedKind.HasValue)
                RequestedKindImpl = (Zetbox.App.GUI.ControlKindEfImpl)Context.Find<Zetbox.App.GUI.ControlKind>(_fk_RequestedKind.Value);
            else
                RequestedKindImpl = null;

            if (_fk_guid_ValueModelDescriptor.HasValue)
                ValueModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.FindPersistenceObject<Zetbox.App.GUI.ViewModelDescriptor>(_fk_guid_ValueModelDescriptor.Value);
            else
            if (_fk_ValueModelDescriptor.HasValue)
                ValueModelDescriptorImpl = (Zetbox.App.GUI.ViewModelDescriptorEfImpl)Context.Find<Zetbox.App.GUI.ViewModelDescriptor>(_fk_ValueModelDescriptor.Value);
            else
                ValueModelDescriptorImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<Property, bool>(
                        lazyCtx,
                        new Guid("018cd3e6-aff1-457c-853a-d0f1a4173dba"),
                        "AllowFilterCollections",
                        null,
                        obj => obj.AllowFilterCollections,
                        (obj, val) => obj.AllowFilterCollections = val,
						obj => OnAllowFilterCollections_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("13418a59-a804-4bc7-88ed-4d3509940301"),
                        "CategoryTags",
                        null,
                        obj => obj.CategoryTags,
                        (obj, val) => obj.CategoryTags = val,
						obj => OnCategoryTags_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("f96e3f68-a293-4ed9-ba3a-2b172847fb46"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, DateTime>(
                        lazyCtx,
                        new Guid("d828264c-7c90-4050-a03d-3ea1829ce9d9"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("7b528b52-52bd-4af0-bcd1-d63cd73a65bd"),
                        "CodeTemplate",
                        null,
                        obj => obj.CodeTemplate,
                        null, // calculated property
						null), // no constraints on calculated properties
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<Property, ICollection<Zetbox.App.Base.Constraint>>(
                        lazyCtx,
                        new Guid("fd8f14da-e647-48cb-8593-3a30984f5c96"),
                        "Constraints",
                        null,
                        obj => obj.Constraints,
                        null, // lists are read-only properties
                        obj => OnConstraints_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("6b965c5e-31b9-4fa9-a5f0-7ea6c8b8e976"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, DateTime>(
                        lazyCtx,
                        new Guid("767fbab2-f9b4-41a9-9218-f60e0624b64f"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, int?>(
                        lazyCtx,
                        new Guid("38d94cbf-17d3-407e-8738-1c97892204b1"),
                        "DefaultSortPriority",
                        null,
                        obj => obj.DefaultSortPriority,
                        (obj, val) => obj.DefaultSortPriority = val,
						obj => OnDefaultSortPriority_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.Base.DefaultPropertyValue>(
                        lazyCtx,
                        new Guid("590d6a36-2e4b-41bd-a51e-298aba90ce72"),
                        "DefaultValue",
                        null,
                        obj => obj.DefaultValue,
                        (obj, val) => obj.DefaultValue = val,
						obj => OnDefaultValue_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("5905ae85-6a44-4dbd-9752-49cac467d3cd"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, bool?>(
                        lazyCtx,
                        new Guid("8da249b4-ca2b-403e-903a-d0138b57b64e"),
                        "DisableExport",
                        null,
                        obj => obj.DisableExport,
                        (obj, val) => obj.DisableExport = val,
						obj => OnDisableExport_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Guid>(
                        lazyCtx,
                        new Guid("ca0a099d-3f4c-4604-8303-d751e57041bb"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.GUI.PropertyFilterConfiguration>(
                        lazyCtx,
                        new Guid("dbf93142-1769-4f53-bcbc-71325e1d5ce7"),
                        "FilterConfiguration",
                        null,
                        obj => obj.FilterConfiguration,
                        (obj, val) => obj.FilterConfiguration = val,
						obj => OnFilterConfiguration_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("dc09afbf-9cb8-45ef-b7c5-b1c3b948c7e5"),
                        "HelpText",
                        null,
                        obj => obj.HelpText,
                        (obj, val) => obj.HelpText = val,
						obj => OnHelpText_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("34fc8b17-e9c2-43c5-a6d6-908551a8818b"),
                        "Label",
                        null,
                        obj => obj.Label,
                        (obj, val) => obj.Label = val,
						obj => OnLabel_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("2105acf5-0b98-4d0b-9be4-049a502a4f03"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, string>(
                        lazyCtx,
                        new Guid("8c474623-7e53-4ca6-a996-f3b5a8c72834"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.Base.DataType>(
                        lazyCtx,
                        new Guid("bdaacacd-c8cb-45cf-a329-28f942337273"),
                        "ObjectClass",
                        null,
                        obj => obj.ObjectClass,
                        (obj, val) => obj.ObjectClass = val,
						obj => OnObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.GUI.ControlKind>(
                        lazyCtx,
                        new Guid("3be58daf-9008-4cc3-a65d-8989909dcd80"),
                        "RequestedKind",
                        null,
                        obj => obj.RequestedKind,
                        (obj, val) => obj.RequestedKind = val,
						obj => OnRequestedKind_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.GUI.WidthHint?>(
                        lazyCtx,
                        new Guid("fc109b87-4d77-4eb8-b744-1cca547fe866"),
                        "RequestedWidth",
                        null,
                        obj => obj.RequestedWidth,
                        (obj, val) => obj.RequestedWidth = val,
						obj => OnRequestedWidth_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<Property, Zetbox.App.GUI.ViewModelDescriptor>(
                        lazyCtx,
                        new Guid("84e0996a-081f-4a17-a34d-54cf23991301"),
                        "ValueModelDescriptor",
                        null,
                        obj => obj.ValueModelDescriptor,
                        (obj, val) => obj.ValueModelDescriptor = val,
						obj => OnValueModelDescriptor_IsValid), 
                    // position columns
                    // rel: ObjectClass has Properties (f7e487a4-6922-40bf-a404-24ce6accbb83)
                    // rel.B.Type == cls && rel.B.HasPersistentOrder
                    new PropertyDescriptorEfImpl<PropertyEfImpl, int?>(
                        lazyCtx,
                        null,
                        "Properties_pos",
                        null,
                        obj => obj.Properties_pos,
                        (obj, val) => obj.Properties_pos = val,
						null),
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_Property")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_Property != null)
            {
                OnToString_Property(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<Property> OnToString_Property;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_Property")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_Property != null)
            {
                OnObjectIsValid_Property(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<Property> OnObjectIsValid_Property;

        [EventBasedMethod("OnNotifyPreSave_Property")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_Property != null) OnNotifyPreSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyPreSave_Property;

        [EventBasedMethod("OnNotifyPostSave_Property")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_Property != null) OnNotifyPostSave_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyPostSave_Property;

        [EventBasedMethod("OnNotifyCreated_Property")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("CategoryTags");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("DefaultSortPriority");
            SetNotInitializedProperty("DefaultValue");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("DisableExport");
            SetNotInitializedProperty("FilterConfiguration");
            SetNotInitializedProperty("HelpText");
            SetNotInitializedProperty("Label");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("ObjectClass");
            SetNotInitializedProperty("RequestedKind");
            SetNotInitializedProperty("RequestedWidth");
            SetNotInitializedProperty("ValueModelDescriptor");
            _CodeTemplate_IsDirty = true;
            base.NotifyCreated();
            if (OnNotifyCreated_Property != null) OnNotifyCreated_Property(this);
        }
        public static event ObjectEventHandler<Property> OnNotifyCreated_Property;

        [EventBasedMethod("OnNotifyDeleting_Property")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_Property != null) OnNotifyDeleting_Property(this);
            Constraints.Clear();
            ChangedBy = null;
            CreatedBy = null;
            DefaultValue = null;
            FilterConfiguration = null;
            Module = null;
            ObjectClass = null;
            RequestedKind = null;
            ValueModelDescriptor = null;
        }
        public static event ObjectEventHandler<Property> OnNotifyDeleting_Property;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            binStream.Write(this._isAllowFilterCollectionsSet);
            if (this._isAllowFilterCollectionsSet) {
                binStream.Write(this._AllowFilterCollections);
            }
            binStream.Write(this._CategoryTags);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_Property_was_ChangedBy", "ChangedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(this._CodeTemplate);

            binStream.Write(eagerLoadLists);
            if (eagerLoadLists && auxObjects != null)
            {
                binStream.Write(true);
                binStream.Write(Constraints.Count);
                foreach(var obj in Constraints)
                {
                    auxObjects.Add(obj);
                    binStream.Write(obj.ID);
                }
            }
            else
            {
                binStream.Write(false);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_Property_was_CreatedBy", "CreatedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._DefaultSortPriority);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.DefaultPropertyValueEfImpl>("Model.FK_Property_has_DefaultValue", "DefaultValue");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(DefaultValue);
            }
            binStream.Write(this._Description);
            binStream.Write(this._DisableExport);
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.PropertyFilterConfigurationEfImpl>("Model.FK_Property_Has_PropertyFilterConfiguration", "PropertyFilterConfiguration");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._HelpText);
            binStream.Write(this._Label);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>("Model.FK_BaseProperty_has_Module", "Module");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Name);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.DataTypeEfImpl>("Model.FK_ObjectClass_has_Properties", "ObjectClass");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Properties_pos);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ControlKindEfImpl>("Model.FK_Property_may_request_ControlKind", "ControlKind");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write((int?)_RequestedWidth);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.GUI.ViewModelDescriptorEfImpl>("Model.FK_Property_has_ValueModelDescriptor", "ValueModelDescriptor");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            this._isAllowFilterCollectionsSet = binStream.ReadBoolean();
            if (this._isAllowFilterCollectionsSet) {
                this._AllowFilterCollections = binStream.ReadBoolean();
            }
            this._CategoryTags = binStream.ReadString();
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._CodeTemplate = binStream.ReadString();

            Constraints_was_eagerLoaded = binStream.ReadBoolean();
            {
                bool containsList = binStream.ReadBoolean();
                if (containsList)
                {
                    int numElements = binStream.ReadInt32();
                    ConstraintsIds = new List<int>(numElements);
                    while (numElements-- > 0) 
                    {
                        int id = binStream.ReadInt32();
                        ConstraintsIds.Add(id);
                    }
                }
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._DefaultSortPriority = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_DefaultValue);
            this._Description = binStream.ReadString();
            this._DisableExport = binStream.ReadNullableBoolean();
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_FilterConfiguration);
            this._HelpText = binStream.ReadString();
            this._Label = binStream.ReadString();
            binStream.Read(out this._fk_Module);
            this._Name = binStream.ReadString();
            binStream.Read(out this._fk_ObjectClass);
            this._Properties_pos = binStream.ReadNullableInt32();
            binStream.Read(out this._fk_RequestedKind);
            _RequestedWidth = (Zetbox.App.GUI.WidthHint?)binStream.ReadNullableInt32();
            binStream.Read(out this._fk_ValueModelDescriptor);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._AllowFilterCollections, xml, "AllowFilterCollections", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CategoryTags, xml, "CategoryTags", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CodeTemplate, xml, "CodeTemplate", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._DefaultSortPriority, xml, "DefaultSortPriority", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(DefaultValue != null ? DefaultValue.ExportGuid : (Guid?)null, xml, "DefaultValue", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._DisableExport, xml, "DisableExport", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(FilterConfiguration != null ? FilterConfiguration.ExportGuid : (Guid?)null, xml, "FilterConfiguration", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._HelpText, xml, "HelpText", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Label, xml, "Label", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(ObjectClass != null ? ObjectClass.ExportGuid : (Guid?)null, xml, "ObjectClass", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Base")) XmlStreamer.ToStream(this._Properties_pos, xml, "Properties_pos", "Zetbox.App.Base");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(RequestedKind != null ? RequestedKind.ExportGuid : (Guid?)null, xml, "RequestedKind", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream((int?)_RequestedWidth, xml, "RequestedWidth", "Zetbox.App.GUI");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.GUI")) XmlStreamer.ToStream(ValueModelDescriptor != null ? ValueModelDescriptor.ExportGuid : (Guid?)null, xml, "ValueModelDescriptor", "Zetbox.App.GUI");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Base|AllowFilterCollections":
                // Import must have default value set
                this._AllowFilterCollections = XmlStreamer.ReadBoolean(xml);
                this._isAllowFilterCollectionsSet = true;
                break;
            case "Zetbox.App.Base|CategoryTags":
                this._CategoryTags = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Base|CodeTemplate":
                this._CodeTemplate = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Base|DefaultSortPriority":
                this._DefaultSortPriority = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.Base|DefaultValue":
                this._fk_guid_DefaultValue = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|DisableExport":
                this._DisableExport = XmlStreamer.ReadNullableBoolean(xml);
                break;
            case "Zetbox.App.Base|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.GUI|FilterConfiguration":
                this._fk_guid_FilterConfiguration = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|HelpText":
                this._HelpText = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Label":
                this._Label = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Base|ObjectClass":
                this._fk_guid_ObjectClass = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Base|Properties_pos":
                this._Properties_pos = XmlStreamer.ReadNullableInt32(xml);
                break;
            case "Zetbox.App.GUI|RequestedKind":
                this._fk_guid_RequestedKind = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.GUI|RequestedWidth":
                _RequestedWidth = (Zetbox.App.GUI.WidthHint?)XmlStreamer.ReadNullableInt32(xml);
               break;
            case "Zetbox.App.GUI|ValueModelDescriptor":
                this._fk_guid_ValueModelDescriptor = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

    }
}
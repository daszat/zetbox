// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// Abstract base class for WorkSchedule Rules describing recurrent working hours
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="WorkScheduleRuleEfImpl")]
    [System.Diagnostics.DebuggerDisplay("WorkScheduleRule")]
    public abstract class WorkScheduleRuleEfImpl : BaseServerDataObject_EntityFramework, WorkScheduleRule, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("ee70b186-09ae-43a3-afb2-a632c47765b9");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public WorkScheduleRuleEfImpl()
            : base(null)
        {
        }

        public WorkScheduleRuleEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_WorkScheduleRule_was_ChangedBy
    A: ZeroOrMore WorkScheduleRule as WorkScheduleRule
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkScheduleRule_was_ChangedBy", "ChangedBy")]
        public Zetbox.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkScheduleRule_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkScheduleRule_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("ddab18cc-3278-4ac5-8a76-25d23b1cb7be"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkScheduleRule.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn_store;
        private DateTime _ChangedOn {
            get { return _ChangedOn_store; }
            set {
                ReportEfPropertyChanging("ChangedOn");
                _ChangedOn_store = value;
                ReportEfPropertyChanged("ChangedOn");
            }
        }
        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnChangedOn_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_WorkScheduleRule_was_CreatedBy
    A: ZeroOrMore WorkScheduleRule as WorkScheduleRule
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkScheduleRule_was_CreatedBy", "CreatedBy")]
        public Zetbox.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkScheduleRule_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkScheduleRule_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("d61d2a16-f80d-449f-9850-0301a43fdc71"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkScheduleRule.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn_store;
        private DateTime _CreatedOn {
            get { return _CreatedOn_store; }
            set {
                ReportEfPropertyChanging("CreatedOn");
                _CreatedOn_store = value;
                ReportEfPropertyChanged("CreatedOn");
            }
        }
        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("c730faff-a917-4f89-9a49-b65374cb4de1"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkScheduleRule.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnExportGuid_IsValid;

        /// <summary>
        /// True if the day is a working day, regardless of the working hours. E.g. Saturday is a working day (in Austria), but most people aktually don&apos;t work.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public bool IsWorkingDay
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _IsWorkingDay;
                if (!_isIsWorkingDaySet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("09cfc4e1-c106-46ec-825d-31226d8df335"));
                    if (__p != null) {
                        _isIsWorkingDaySet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._IsWorkingDay = (bool)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkScheduleRule.IsWorkingDay'");
                    }
                }
                if (OnIsWorkingDay_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<bool>(__result);
                    OnIsWorkingDay_Getter(this, __e);
                    __result = _IsWorkingDay = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isIsWorkingDaySet = true;
                if (_IsWorkingDay != value)
                {
                    var __oldValue = _IsWorkingDay;
                    var __newValue = value;
                    if (OnIsWorkingDay_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsWorkingDay_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("IsWorkingDay", __oldValue, __newValue);
                    _IsWorkingDay = __newValue;
                    NotifyPropertyChanged("IsWorkingDay", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnIsWorkingDay_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<bool>(__oldValue, __newValue);
                        OnIsWorkingDay_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("IsWorkingDay");
                }
            }
        }
        private bool _IsWorkingDay_store;
        private bool _IsWorkingDay {
            get { return _IsWorkingDay_store; }
            set {
                ReportEfPropertyChanging("IsWorkingDay");
                _IsWorkingDay_store = value;
                ReportEfPropertyChanged("IsWorkingDay");
            }
        }
        private bool _isIsWorkingDaySet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, bool> OnIsWorkingDay_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, bool> OnIsWorkingDay_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, bool> OnIsWorkingDay_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnIsWorkingDay_IsValid;

        /// <summary>
        /// Optional member of a module
        /// </summary>
    /*
    Relation: FK_WorkScheduleRule_has_Module
    A: ZeroOrMore WorkScheduleRule as WorkScheduleRule
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkScheduleRule_has_Module", "Module")]
        public Zetbox.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleEfImpl __value;
                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_WorkScheduleRule_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_WorkScheduleRule_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ModuleEfImpl __oldValue = (Zetbox.App.Base.ModuleEfImpl)r.Value;
                Zetbox.App.Base.ModuleEfImpl __newValue = (Zetbox.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnModule_IsValid;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name_store;
        private string _Name {
            get { return _Name_store; }
            set {
                ReportEfPropertyChanging("Name");
                _Name_store = value;
                ReportEfPropertyChanged("Name");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnName_IsValid;

        /// <summary>
        /// Optional valid from date
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime? ValidFrom
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ValidFrom;
                if (OnValidFrom_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnValidFrom_Getter(this, __e);
                    __result = _ValidFrom = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ValidFrom != value)
                {
                    var __oldValue = _ValidFrom;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnValidFrom_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidFrom_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidFrom", __oldValue, __newValue);
                    _ValidFrom = __newValue;
                    NotifyPropertyChanged("ValidFrom", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnValidFrom_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidFrom_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ValidFrom");
                }
            }
        }
        private DateTime? _ValidFrom_store;
        private DateTime? _ValidFrom {
            get { return _ValidFrom_store; }
            set {
                ReportEfPropertyChanging("ValidFrom");
                _ValidFrom_store = value;
                ReportEfPropertyChanged("ValidFrom");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidFrom_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidFrom_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidFrom_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnValidFrom_IsValid;

        /// <summary>
        /// Optional valid until date
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime? ValidUntil
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ValidUntil;
                if (OnValidUntil_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime?>(__result);
                    OnValidUntil_Getter(this, __e);
                    __result = _ValidUntil = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ValidUntil != value)
                {
                    var __oldValue = _ValidUntil;
                    var __newValue = value;
                    if (__newValue.HasValue && __newValue.Value.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue.Value, DateTimeKind.Local);
                    if (OnValidUntil_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidUntil_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ValidUntil", __oldValue, __newValue);
                    _ValidUntil = __newValue;
                    NotifyPropertyChanged("ValidUntil", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnValidUntil_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime?>(__oldValue, __newValue);
                        OnValidUntil_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ValidUntil");
                }
            }
        }
        private DateTime? _ValidUntil_store;
        private DateTime? _ValidUntil {
            get { return _ValidUntil_store; }
            set {
                ReportEfPropertyChanging("ValidUntil");
                _ValidUntil_store = value;
                ReportEfPropertyChanged("ValidUntil");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidUntil_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidUntil_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, DateTime?> OnValidUntil_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnValidUntil_IsValid;

        /// <summary>
        /// The amount of working hours. 0 if it&apos;s a free day.
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public decimal WorkingHours
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _WorkingHours;
                if (OnWorkingHours_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<decimal>(__result);
                    OnWorkingHours_Getter(this, __e);
                    __result = _WorkingHours = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_WorkingHours != value)
                {
                    var __oldValue = _WorkingHours;
                    var __newValue = value;
                    if (OnWorkingHours_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnWorkingHours_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("WorkingHours", __oldValue, __newValue);
                    _WorkingHours = __newValue;
                    NotifyPropertyChanged("WorkingHours", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnWorkingHours_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<decimal>(__oldValue, __newValue);
                        OnWorkingHours_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("WorkingHours");
                }
            }
        }
        private decimal _WorkingHours_store;
        private decimal _WorkingHours {
            get { return _WorkingHours_store; }
            set {
                ReportEfPropertyChanging("WorkingHours");
                _WorkingHours_store = value;
                ReportEfPropertyChanged("WorkingHours");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, decimal> OnWorkingHours_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, decimal> OnWorkingHours_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, decimal> OnWorkingHours_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnWorkingHours_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_WorkSchedule_has_WorkScheduleRules
    A: One WorkSchedule as WorkSchedule
    B: ZeroOrMore WorkScheduleRule as WorkScheduleRules
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkSchedule
        // fkBackingName=_fk_WorkSchedule; fkGuidBackingName=_fk_guid_WorkSchedule;
        // referencedInterface=Zetbox.App.Calendar.WorkSchedule; moduleNamespace=Zetbox.App.Calendar;
        // inverse Navigator=WorkScheduleRules; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.WorkSchedule WorkSchedule
        {
            get { return WorkScheduleImpl; }
            set { WorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)value; }
        }

        private int? _fk_WorkSchedule;

        /// <summary>ForeignKey Property for WorkSchedule's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_WorkSchedule
		{
			get { return WorkSchedule != null ? WorkSchedule.ID : (int?)null; }
			set { _fk_WorkSchedule = value; }
		}

        private Guid? _fk_guid_WorkSchedule = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkSchedule_has_WorkScheduleRules", "WorkSchedule")]
        public Zetbox.App.Calendar.WorkScheduleEfImpl WorkScheduleImpl
        {
            get
            {
                Zetbox.App.Calendar.WorkScheduleEfImpl __value;
                EntityReference<Zetbox.App.Calendar.WorkScheduleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>(
                        "Model.FK_WorkSchedule_has_WorkScheduleRules",
                        "WorkSchedule");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnWorkSchedule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__value);
                    OnWorkSchedule_Getter(this, e);
                    __value = (Zetbox.App.Calendar.WorkScheduleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.WorkScheduleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>(
                        "Model.FK_WorkSchedule_has_WorkScheduleRules",
                        "WorkSchedule");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.WorkScheduleEfImpl __oldValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)r.Value;
                Zetbox.App.Calendar.WorkScheduleEfImpl __newValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("WorkSchedule", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("WorkScheduleRules", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("WorkScheduleRules", null, null);
                }

                if (OnWorkSchedule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnWorkSchedule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Calendar.WorkScheduleEfImpl)__newValue;

                if (OnWorkSchedule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnWorkSchedule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("WorkSchedule", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("WorkScheduleRules", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("WorkScheduleRules", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchWorkScheduleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.WorkSchedule>(this.WorkSchedule);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for WorkSchedule
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Calendar.WorkSchedule> OnWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkScheduleRule> OnWorkSchedule_IsValid;

        /// <summary>
        /// Checks if the Rule applies to the given date
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnAppliesTo_WorkScheduleRule")]
        public virtual bool AppliesTo(DateTime date)
        {
            var e = new MethodReturnEventArgs<bool>();
            if (OnAppliesTo_WorkScheduleRule != null)
            {
                OnAppliesTo_WorkScheduleRule(this, e, date);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkScheduleRule.AppliesTo");
            }
            return e.Result;
        }
        public delegate void AppliesTo_Handler<T>(T obj, MethodReturnEventArgs<bool> ret, DateTime date);
        public static event AppliesTo_Handler<WorkScheduleRule> OnAppliesTo_WorkScheduleRule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkScheduleRule> OnAppliesTo_WorkScheduleRule_CanExec;

        [EventBasedMethod("OnAppliesTo_WorkScheduleRule_CanExec")]
        public virtual bool AppliesToCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnAppliesTo_WorkScheduleRule_CanExec != null)
				{
					OnAppliesTo_WorkScheduleRule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkScheduleRule> OnAppliesTo_WorkScheduleRule_CanExecReason;

        [EventBasedMethod("OnAppliesTo_WorkScheduleRule_CanExecReason")]
        public virtual string AppliesToCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnAppliesTo_WorkScheduleRule_CanExecReason != null)
				{
					OnAppliesTo_WorkScheduleRule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(WorkScheduleRule);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (WorkScheduleRule)obj;
            var otherImpl = (WorkScheduleRuleEfImpl)obj;
            var me = (WorkScheduleRule)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.IsWorkingDay = other.IsWorkingDay;
            me.Name = other.Name;
            me.ValidFrom = other.ValidFrom;
            me.ValidUntil = other.ValidUntil;
            me.WorkingHours = other.WorkingHours;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
            this._fk_WorkSchedule = otherImpl._fk_WorkSchedule;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "IsWorkingDay":
                case "Module":
                case "Name":
                case "ValidFrom":
                case "ValidUntil":
                case "WorkingHours":
                case "WorkSchedule":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "WorkSchedule":
                return TriggerFetchWorkScheduleAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;

            if (_fk_guid_WorkSchedule.HasValue)
                WorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)Context.FindPersistenceObject<Zetbox.App.Calendar.WorkSchedule>(_fk_guid_WorkSchedule.Value);
            else
            if (_fk_WorkSchedule.HasValue)
                WorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)Context.Find<Zetbox.App.Calendar.WorkSchedule>(_fk_WorkSchedule.Value);
            else
                WorkScheduleImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("a14bfc87-c65e-4111-8245-3fbb31189392"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, DateTime>(
                        lazyCtx,
                        new Guid("ddab18cc-3278-4ac5-8a76-25d23b1cb7be"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("0556d238-5f1e-4f01-b7b1-13f562726942"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, DateTime>(
                        lazyCtx,
                        new Guid("d61d2a16-f80d-449f-9850-0301a43fdc71"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, Guid>(
                        lazyCtx,
                        new Guid("c730faff-a917-4f89-9a49-b65374cb4de1"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, bool>(
                        lazyCtx,
                        new Guid("09cfc4e1-c106-46ec-825d-31226d8df335"),
                        "IsWorkingDay",
                        null,
                        obj => obj.IsWorkingDay,
                        (obj, val) => obj.IsWorkingDay = val,
						obj => OnIsWorkingDay_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("7fc947a4-09c5-433b-a26e-5014663e3931"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, string>(
                        lazyCtx,
                        new Guid("88bd31d8-6963-49ed-8ac8-31d438744eef"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, DateTime?>(
                        lazyCtx,
                        new Guid("940552fc-7cb1-4512-9096-54c3e70f7a1f"),
                        "ValidFrom",
                        null,
                        obj => obj.ValidFrom,
                        (obj, val) => obj.ValidFrom = val,
						obj => OnValidFrom_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, DateTime?>(
                        lazyCtx,
                        new Guid("4fced9a6-fe27-44a2-a21d-17a09c720588"),
                        "ValidUntil",
                        null,
                        obj => obj.ValidUntil,
                        (obj, val) => obj.ValidUntil = val,
						obj => OnValidUntil_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, decimal>(
                        lazyCtx,
                        new Guid("20370deb-580a-44e6-b201-f5740ee5e330"),
                        "WorkingHours",
                        null,
                        obj => obj.WorkingHours,
                        (obj, val) => obj.WorkingHours = val,
						obj => OnWorkingHours_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkScheduleRule, Zetbox.App.Calendar.WorkSchedule>(
                        lazyCtx,
                        new Guid("115c1d4c-ddd3-4d33-ae74-a6b676fc0dfa"),
                        "WorkSchedule",
                        null,
                        obj => obj.WorkSchedule,
                        (obj, val) => obj.WorkSchedule = val,
						obj => OnWorkSchedule_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_WorkScheduleRule")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_WorkScheduleRule != null)
            {
                OnToString_WorkScheduleRule(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<WorkScheduleRule> OnToString_WorkScheduleRule;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_WorkScheduleRule")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_WorkScheduleRule != null)
            {
                OnObjectIsValid_WorkScheduleRule(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<WorkScheduleRule> OnObjectIsValid_WorkScheduleRule;

        [EventBasedMethod("OnNotifyPreSave_WorkScheduleRule")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_WorkScheduleRule != null) OnNotifyPreSave_WorkScheduleRule(this);
        }
        public static event ObjectEventHandler<WorkScheduleRule> OnNotifyPreSave_WorkScheduleRule;

        [EventBasedMethod("OnNotifyPostSave_WorkScheduleRule")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_WorkScheduleRule != null) OnNotifyPostSave_WorkScheduleRule(this);
        }
        public static event ObjectEventHandler<WorkScheduleRule> OnNotifyPostSave_WorkScheduleRule;

        [EventBasedMethod("OnNotifyCreated_WorkScheduleRule")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("ValidFrom");
            SetNotInitializedProperty("ValidUntil");
            SetNotInitializedProperty("WorkingHours");
            SetNotInitializedProperty("WorkSchedule");
            base.NotifyCreated();
            if (OnNotifyCreated_WorkScheduleRule != null) OnNotifyCreated_WorkScheduleRule(this);
        }
        public static event ObjectEventHandler<WorkScheduleRule> OnNotifyCreated_WorkScheduleRule;

        [EventBasedMethod("OnNotifyDeleting_WorkScheduleRule")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_WorkScheduleRule != null) OnNotifyDeleting_WorkScheduleRule(this);
            ChangedBy = null;
            CreatedBy = null;
            Module = null;
            WorkSchedule = null;
        }
        public static event ObjectEventHandler<WorkScheduleRule> OnNotifyDeleting_WorkScheduleRule;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_WorkScheduleRule_was_ChangedBy", "ChangedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_WorkScheduleRule_was_CreatedBy", "CreatedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._isIsWorkingDaySet);
            if (this._isIsWorkingDaySet) {
                binStream.Write(this._IsWorkingDay);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>("Model.FK_WorkScheduleRule_has_Module", "Module");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Name);
            binStream.Write(this._ValidFrom);
            binStream.Write(this._ValidUntil);
            binStream.Write(this._WorkingHours);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>("Model.FK_WorkSchedule_has_WorkScheduleRules", "WorkSchedule");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._isIsWorkingDaySet = binStream.ReadBoolean();
            if (this._isIsWorkingDaySet) {
                this._IsWorkingDay = binStream.ReadBoolean();
            }
            binStream.Read(out this._fk_Module);
            this._Name = binStream.ReadString();
            this._ValidFrom = binStream.ReadNullableDateTime();
            this._ValidUntil = binStream.ReadNullableDateTime();
            this._WorkingHours = binStream.ReadDecimal();
            binStream.Read(out this._fk_WorkSchedule);
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._IsWorkingDay, xml, "IsWorkingDay", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._ValidFrom, xml, "ValidFrom", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._ValidUntil, xml, "ValidUntil", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._WorkingHours, xml, "WorkingHours", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(WorkSchedule != null ? WorkSchedule.ExportGuid : (Guid?)null, xml, "WorkSchedule", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|IsWorkingDay":
                // Import must have default value set
                this._IsWorkingDay = XmlStreamer.ReadBoolean(xml);
                this._isIsWorkingDaySet = true;
                break;
            case "Zetbox.App.Calendar|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.Calendar|ValidFrom":
                this._ValidFrom = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Calendar|ValidUntil":
                this._ValidUntil = XmlStreamer.ReadNullableDateTime(xml);
                break;
            case "Zetbox.App.Calendar|WorkingHours":
                this._WorkingHours = XmlStreamer.ReadDecimal(xml);
                break;
            case "Zetbox.App.Calendar|WorkSchedule":
                this._fk_guid_WorkSchedule = XmlStreamer.ReadNullableGuid(xml);
                break;
            }
        }

        #endregion

    }
}
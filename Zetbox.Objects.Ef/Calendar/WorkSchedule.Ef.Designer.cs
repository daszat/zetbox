// <autogenerated/>

namespace Zetbox.App.Calendar
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// A WorkSchedule describing recurrent working hours
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="WorkScheduleEfImpl")]
    [System.Diagnostics.DebuggerDisplay("WorkSchedule")]
    public class WorkScheduleEfImpl : BaseServerDataObject_EntityFramework, WorkSchedule, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("901a2ddd-1330-4129-b8a2-92b8e655d168");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public WorkScheduleEfImpl()
            : base(null)
        {
        }

        public WorkScheduleEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_BaseWorkSchedule_has_ChildWorkSchedules
    A: ZeroOrOne WorkSchedule as BaseWorkSchedule
    B: ZeroOrMore WorkSchedule as ChildWorkSchedules
    Preferred Storage: MergeIntoB
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseWorkSchedule
        // fkBackingName=_fk_BaseWorkSchedule; fkGuidBackingName=_fk_guid_BaseWorkSchedule;
        // referencedInterface=Zetbox.App.Calendar.WorkSchedule; moduleNamespace=Zetbox.App.Calendar;
        // inverse Navigator=ChildWorkSchedule; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Calendar.WorkSchedule BaseWorkSchedule
        {
            get { return BaseWorkScheduleImpl; }
            set { BaseWorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)value; }
        }

        private int? _fk_BaseWorkSchedule;

        /// <summary>ForeignKey Property for BaseWorkSchedule's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_BaseWorkSchedule
		{
			get { return BaseWorkSchedule != null ? BaseWorkSchedule.ID : (int?)null; }
			set { _fk_BaseWorkSchedule = value; }
		}

        private Guid? _fk_guid_BaseWorkSchedule = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_BaseWorkSchedule_has_ChildWorkSchedules", "BaseWorkSchedule")]
        public Zetbox.App.Calendar.WorkScheduleEfImpl BaseWorkScheduleImpl
        {
            get
            {
                Zetbox.App.Calendar.WorkScheduleEfImpl __value;
                EntityReference<Zetbox.App.Calendar.WorkScheduleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>(
                        "Model.FK_BaseWorkSchedule_has_ChildWorkSchedules",
                        "BaseWorkSchedule");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnBaseWorkSchedule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__value);
                    OnBaseWorkSchedule_Getter(this, e);
                    __value = (Zetbox.App.Calendar.WorkScheduleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Calendar.WorkScheduleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>(
                        "Model.FK_BaseWorkSchedule_has_ChildWorkSchedules",
                        "BaseWorkSchedule");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Calendar.WorkScheduleEfImpl __oldValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)r.Value;
                Zetbox.App.Calendar.WorkScheduleEfImpl __newValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("BaseWorkSchedule", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("ChildWorkSchedule", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("ChildWorkSchedule", null, null);
                }

                if (OnBaseWorkSchedule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnBaseWorkSchedule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Calendar.WorkScheduleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Calendar.WorkScheduleEfImpl)__newValue;

                if (OnBaseWorkSchedule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Calendar.WorkSchedule>(__oldValue, __newValue);
                    OnBaseWorkSchedule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("BaseWorkSchedule", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("ChildWorkSchedule", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("ChildWorkSchedule", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchBaseWorkScheduleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Calendar.WorkSchedule>(this.BaseWorkSchedule);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for BaseWorkSchedule
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnBaseWorkSchedule_IsValid;

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_WorkSchedule_was_ChangedBy
    A: ZeroOrMore WorkSchedule as WorkSchedule
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkSchedule_was_ChangedBy", "ChangedBy")]
        public Zetbox.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkSchedule_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkSchedule_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("486810c7-c031-4c86-ad86-7b88530008ca"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkSchedule.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn_store;
        private DateTime _ChangedOn {
            get { return _ChangedOn_store; }
            set {
                ReportEfPropertyChanging("ChangedOn");
                _ChangedOn_store = value;
                ReportEfPropertyChanged("ChangedOn");
            }
        }
        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_BaseWorkSchedule_has_ChildWorkSchedules
    A: ZeroOrOne WorkSchedule as BaseWorkSchedule
    B: ZeroOrMore WorkSchedule as ChildWorkSchedules
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Calendar.WorkSchedule> ChildWorkSchedule
        {
            get
            {
                if (_ChildWorkSchedule == null)
                {
                    _ChildWorkSchedule = new EntityCollectionWrapper<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkScheduleEfImpl>(
                            this.Context, ChildWorkScheduleImpl,
                            () => this.NotifyPropertyChanging("ChildWorkSchedule", null, null),
                            null, // see GetChildWorkScheduleImplCollection()
                            (item) => item.NotifyPropertyChanging("BaseWorkSchedule", null, null),
                            (item) => item.NotifyPropertyChanged("BaseWorkSchedule", null, null));
                }
                return _ChildWorkSchedule;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_BaseWorkSchedule_has_ChildWorkSchedules", "ChildWorkSchedules")]
        public EntityCollection<Zetbox.App.Calendar.WorkScheduleEfImpl> ChildWorkScheduleImpl
        {
            get
            {
                return GetChildWorkScheduleImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Calendar.WorkScheduleEfImpl> _ChildWorkSchedule;

        private EntityCollection<Zetbox.App.Calendar.WorkScheduleEfImpl> _ChildWorkScheduleImplEntityCollection;
        internal EntityCollection<Zetbox.App.Calendar.WorkScheduleEfImpl> GetChildWorkScheduleImplCollection()
        {
            if (_ChildWorkScheduleImplEntityCollection == null)
            {
                _ChildWorkScheduleImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Calendar.WorkScheduleEfImpl>(
                        "Model.FK_BaseWorkSchedule_has_ChildWorkSchedules",
                        "ChildWorkSchedules");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_ChildWorkScheduleImplEntityCollection.IsLoaded)
                {
                    _ChildWorkScheduleImplEntityCollection.Load();
                }
                _ChildWorkScheduleImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("ChildWorkSchedule", null, null); if (OnChildWorkSchedule_PostSetter != null && IsAttached) OnChildWorkSchedule_PostSetter(this); };
            }
            return _ChildWorkScheduleImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChildWorkScheduleAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Calendar.WorkSchedule>>(this.ChildWorkSchedule);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Calendar.WorkSchedule> OnChildWorkSchedule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnChildWorkSchedule_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_WorkSchedule_was_CreatedBy
    A: ZeroOrMore WorkSchedule as WorkSchedule
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkSchedule_was_CreatedBy", "CreatedBy")]
        public Zetbox.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkSchedule_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_WorkSchedule_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("b81a61fa-b991-4928-8390-d529abc42e72"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkSchedule.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn_store;
        private DateTime _CreatedOn {
            get { return _CreatedOn_store; }
            set {
                ReportEfPropertyChanging("CreatedOn");
                _CreatedOn_store = value;
                ReportEfPropertyChanged("CreatedOn");
            }
        }
        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnCreatedOn_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("45599fa5-a838-4a1e-b9f1-4031dea7f4e7"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'WorkSchedule.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnExportGuid_IsValid;

        /// <summary>
        /// Optional member of a module
        /// </summary>
    /*
    Relation: FK_WorkSchedule_has_Module
    A: ZeroOrMore WorkSchedule as WorkSchedule
    B: One Module as Module
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
        // fkBackingName=_fk_Module; fkGuidBackingName=_fk_guid_Module;
        // referencedInterface=Zetbox.App.Base.Module; moduleNamespace=Zetbox.App.Calendar;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Module Module
        {
            get { return ModuleImpl; }
            set { ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)value; }
        }

        private int? _fk_Module;

        /// <summary>ForeignKey Property for Module's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_Module
		{
			get { return Module != null ? Module.ID : (int?)null; }
			set { _fk_Module = value; }
		}

        private Guid? _fk_guid_Module = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_WorkSchedule_has_Module", "Module")]
        public Zetbox.App.Base.ModuleEfImpl ModuleImpl
        {
            get
            {
                Zetbox.App.Base.ModuleEfImpl __value;
                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_WorkSchedule_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnModule_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Module>(__value);
                    OnModule_Getter(this, e);
                    __value = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ModuleEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>(
                        "Model.FK_WorkSchedule_has_Module",
                        "Module");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ModuleEfImpl __oldValue = (Zetbox.App.Base.ModuleEfImpl)r.Value;
                Zetbox.App.Base.ModuleEfImpl __newValue = (Zetbox.App.Base.ModuleEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("Module", __oldValue, __newValue);

                if (OnModule_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ModuleEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ModuleEfImpl)__newValue;

                if (OnModule_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Module>(__oldValue, __newValue);
                    OnModule_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("Module", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchModuleAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Module>(this.Module);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for Module
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, Zetbox.App.Base.Module> OnModule_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnModule_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name_store;
        private string _Name {
            get { return _Name_store; }
            set {
                ReportEfPropertyChanging("Name");
                _Name_store = value;
                ReportEfPropertyChanged("Name");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.Calendar.WorkSchedule, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_WorkSchedule_has_WorkScheduleRules
    A: One WorkSchedule as WorkSchedule
    B: ZeroOrMore WorkScheduleRule as WorkScheduleRules
    Preferred Storage: MergeIntoB
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.Calendar.WorkScheduleRule> WorkScheduleRules
        {
            get
            {
                if (_WorkScheduleRules == null)
                {
                    _WorkScheduleRules = new EntityCollectionWrapper<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Calendar.WorkScheduleRuleEfImpl>(
                            this.Context, WorkScheduleRulesImpl,
                            () => this.NotifyPropertyChanging("WorkScheduleRules", null, null),
                            null, // see GetWorkScheduleRulesImplCollection()
                            (item) => item.NotifyPropertyChanging("WorkSchedule", null, null),
                            (item) => item.NotifyPropertyChanged("WorkSchedule", null, null));
                }
                return _WorkScheduleRules;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_WorkSchedule_has_WorkScheduleRules", "WorkScheduleRules")]
        public EntityCollection<Zetbox.App.Calendar.WorkScheduleRuleEfImpl> WorkScheduleRulesImpl
        {
            get
            {
                return GetWorkScheduleRulesImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.Calendar.WorkScheduleRule, Zetbox.App.Calendar.WorkScheduleRuleEfImpl> _WorkScheduleRules;

        private EntityCollection<Zetbox.App.Calendar.WorkScheduleRuleEfImpl> _WorkScheduleRulesImplEntityCollection;
        internal EntityCollection<Zetbox.App.Calendar.WorkScheduleRuleEfImpl> GetWorkScheduleRulesImplCollection()
        {
            if (_WorkScheduleRulesImplEntityCollection == null)
            {
                _WorkScheduleRulesImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.Calendar.WorkScheduleRuleEfImpl>(
                        "Model.FK_WorkSchedule_has_WorkScheduleRules",
                        "WorkScheduleRules");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_WorkScheduleRulesImplEntityCollection.IsLoaded)
                {
                    _WorkScheduleRulesImplEntityCollection.Load();
                }
                _WorkScheduleRulesImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("WorkScheduleRules", null, null); if (OnWorkScheduleRules_PostSetter != null && IsAttached) OnWorkScheduleRules_PostSetter(this); };
            }
            return _WorkScheduleRulesImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchWorkScheduleRulesAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.Calendar.WorkScheduleRule>>(this.WorkScheduleRules);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.Calendar.WorkSchedule> OnWorkScheduleRules_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.Calendar.WorkSchedule> OnWorkScheduleRules_IsValid;

        /// <summary>
        /// Duplicates this work schedule
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnDuplicate_WorkSchedule")]
        public virtual Zetbox.App.Calendar.WorkSchedule Duplicate()
        {
            var e = new MethodReturnEventArgs<Zetbox.App.Calendar.WorkSchedule>();
            if (OnDuplicate_WorkSchedule != null)
            {
                OnDuplicate_WorkSchedule(this, e);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.Duplicate");
            }
            return e.Result;
        }
        public delegate void Duplicate_Handler<T>(T obj, MethodReturnEventArgs<Zetbox.App.Calendar.WorkSchedule> ret);
        public static event Duplicate_Handler<WorkSchedule> OnDuplicate_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnDuplicate_WorkSchedule_CanExec;

        [EventBasedMethod("OnDuplicate_WorkSchedule_CanExec")]
        public virtual bool DuplicateCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnDuplicate_WorkSchedule_CanExec != null)
				{
					OnDuplicate_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnDuplicate_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnDuplicate_WorkSchedule_CanExecReason")]
        public virtual string DuplicateCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnDuplicate_WorkSchedule_CanExecReason != null)
				{
					OnDuplicate_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Gets the number of holidays between two dates. A Holiday is defined as every yearly rule, that is not a working day. All other rules are ignored.
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetHolidays_WorkSchedule")]
        public virtual int GetHolidays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetHolidays_WorkSchedule != null)
            {
                OnGetHolidays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetHolidays");
            }
            return e.Result;
        }
        public delegate void GetHolidays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetHolidays_Handler<WorkSchedule> OnGetHolidays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetHolidays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetHolidays_WorkSchedule_CanExec")]
        public virtual bool GetHolidaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetHolidays_WorkSchedule_CanExec != null)
				{
					OnGetHolidays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetHolidays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetHolidays_WorkSchedule_CanExecReason")]
        public virtual string GetHolidaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetHolidays_WorkSchedule_CanExecReason != null)
				{
					OnGetHolidays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Gets the number of free days between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetOffDays_WorkSchedule")]
        public virtual int GetOffDays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetOffDays_WorkSchedule != null)
            {
                OnGetOffDays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetOffDays");
            }
            return e.Result;
        }
        public delegate void GetOffDays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetOffDays_Handler<WorkSchedule> OnGetOffDays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetOffDays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetOffDays_WorkSchedule_CanExec")]
        public virtual bool GetOffDaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetOffDays_WorkSchedule_CanExec != null)
				{
					OnGetOffDays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetOffDays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetOffDays_WorkSchedule_CanExecReason")]
        public virtual string GetOffDaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetOffDays_WorkSchedule_CanExecReason != null)
				{
					OnGetOffDays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Get the number of working days between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetWorkingDays_WorkSchedule")]
        public virtual int GetWorkingDays(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<int>();
            if (OnGetWorkingDays_WorkSchedule != null)
            {
                OnGetWorkingDays_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetWorkingDays");
            }
            return e.Result;
        }
        public delegate void GetWorkingDays_Handler<T>(T obj, MethodReturnEventArgs<int> ret, DateTime from, DateTime until);
        public static event GetWorkingDays_Handler<WorkSchedule> OnGetWorkingDays_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetWorkingDays_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetWorkingDays_WorkSchedule_CanExec")]
        public virtual bool GetWorkingDaysCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetWorkingDays_WorkSchedule_CanExec != null)
				{
					OnGetWorkingDays_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetWorkingDays_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetWorkingDays_WorkSchedule_CanExecReason")]
        public virtual string GetWorkingDaysCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetWorkingDays_WorkSchedule_CanExecReason != null)
				{
					OnGetWorkingDays_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// Returns the amount of working hours between two dates
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnGetWorkingHours_WorkSchedule")]
        public virtual decimal GetWorkingHours(DateTime from, DateTime until)
        {
            var e = new MethodReturnEventArgs<decimal>();
            if (OnGetWorkingHours_WorkSchedule != null)
            {
                OnGetWorkingHours_WorkSchedule(this, e, from, until);
            }
            else
            {
                throw new NotImplementedException("No handler registered on WorkSchedule.GetWorkingHours");
            }
            return e.Result;
        }
        public delegate void GetWorkingHours_Handler<T>(T obj, MethodReturnEventArgs<decimal> ret, DateTime from, DateTime until);
        public static event GetWorkingHours_Handler<WorkSchedule> OnGetWorkingHours_WorkSchedule;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<WorkSchedule> OnGetWorkingHours_WorkSchedule_CanExec;

        [EventBasedMethod("OnGetWorkingHours_WorkSchedule_CanExec")]
        public virtual bool GetWorkingHoursCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnGetWorkingHours_WorkSchedule_CanExec != null)
				{
					OnGetWorkingHours_WorkSchedule_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<WorkSchedule> OnGetWorkingHours_WorkSchedule_CanExecReason;

        [EventBasedMethod("OnGetWorkingHours_WorkSchedule_CanExecReason")]
        public virtual string GetWorkingHoursCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnGetWorkingHours_WorkSchedule_CanExecReason != null)
				{
					OnGetWorkingHours_WorkSchedule_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(WorkSchedule);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (WorkSchedule)obj;
            var otherImpl = (WorkScheduleEfImpl)obj;
            var me = (WorkSchedule)this;

            me.ChangedOn = other.ChangedOn;
            me.CreatedOn = other.CreatedOn;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            this._fk_BaseWorkSchedule = otherImpl._fk_BaseWorkSchedule;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_Module = otherImpl._fk_Module;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "BaseWorkSchedule":
                case "ChangedBy":
                case "ChangedOn":
                case "CreatedBy":
                case "CreatedOn":
                case "ExportGuid":
                case "Module":
                case "Name":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "ChildWorkSchedule":
                case "WorkScheduleRules":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "BaseWorkSchedule":
                return TriggerFetchBaseWorkScheduleAsync();
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "ChildWorkSchedule":
                return TriggerFetchChildWorkScheduleAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "Module":
                return TriggerFetchModuleAsync();
            case "WorkScheduleRules":
                return TriggerFetchWorkScheduleRulesAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_guid_BaseWorkSchedule.HasValue)
                BaseWorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)Context.FindPersistenceObject<Zetbox.App.Calendar.WorkSchedule>(_fk_guid_BaseWorkSchedule.Value);
            else
            if (_fk_BaseWorkSchedule.HasValue)
                BaseWorkScheduleImpl = (Zetbox.App.Calendar.WorkScheduleEfImpl)Context.Find<Zetbox.App.Calendar.WorkSchedule>(_fk_BaseWorkSchedule.Value);
            else
                BaseWorkScheduleImpl = null;

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.Module>(_fk_guid_Module.Value);
            else
            if (_fk_Module.HasValue)
                ModuleImpl = (Zetbox.App.Base.ModuleEfImpl)Context.Find<Zetbox.App.Base.Module>(_fk_Module.Value);
            else
                ModuleImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, Zetbox.App.Calendar.WorkSchedule>(
                        lazyCtx,
                        new Guid("17a8fbd3-5a42-4cf6-9517-0adf4142f4fe"),
                        "BaseWorkSchedule",
                        null,
                        obj => obj.BaseWorkSchedule,
                        (obj, val) => obj.BaseWorkSchedule = val,
						obj => OnBaseWorkSchedule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("34eb524b-3f24-4972-b0e5-a64c9f27838a"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, DateTime>(
                        lazyCtx,
                        new Guid("486810c7-c031-4c86-ad86-7b88530008ca"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<WorkSchedule, ICollection<Zetbox.App.Calendar.WorkSchedule>>(
                        lazyCtx,
                        new Guid("c2fc6792-bc1f-42bb-b6c3-451ab99ddbef"),
                        "ChildWorkSchedule",
                        null,
                        obj => obj.ChildWorkSchedule,
                        null, // lists are read-only properties
                        obj => OnChildWorkSchedule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("d567d5a4-3be0-44f1-af91-046180218a38"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, DateTime>(
                        lazyCtx,
                        new Guid("b81a61fa-b991-4928-8390-d529abc42e72"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, Guid>(
                        lazyCtx,
                        new Guid("45599fa5-a838-4a1e-b9f1-4031dea7f4e7"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, Zetbox.App.Base.Module>(
                        lazyCtx,
                        new Guid("82affab5-a5b2-45ca-a29c-6b7dc0f31190"),
                        "Module",
                        null,
                        obj => obj.Module,
                        (obj, val) => obj.Module = val,
						obj => OnModule_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<WorkSchedule, string>(
                        lazyCtx,
                        new Guid("49cdf3fb-639f-4c20-b9ca-9af1bbe0d4d7"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<WorkSchedule, ICollection<Zetbox.App.Calendar.WorkScheduleRule>>(
                        lazyCtx,
                        new Guid("b16c20d8-ac72-45e8-883c-52c6f28571f2"),
                        "WorkScheduleRules",
                        null,
                        obj => obj.WorkScheduleRules,
                        null, // lists are read-only properties
                        obj => OnWorkScheduleRules_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_WorkSchedule")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_WorkSchedule != null)
            {
                OnToString_WorkSchedule(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<WorkSchedule> OnToString_WorkSchedule;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_WorkSchedule")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_WorkSchedule != null)
            {
                OnObjectIsValid_WorkSchedule(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<WorkSchedule> OnObjectIsValid_WorkSchedule;

        [EventBasedMethod("OnNotifyPreSave_WorkSchedule")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_WorkSchedule != null) OnNotifyPreSave_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyPreSave_WorkSchedule;

        [EventBasedMethod("OnNotifyPostSave_WorkSchedule")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_WorkSchedule != null) OnNotifyPostSave_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyPostSave_WorkSchedule;

        [EventBasedMethod("OnNotifyCreated_WorkSchedule")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("BaseWorkSchedule");
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Module");
            SetNotInitializedProperty("Name");
            base.NotifyCreated();
            if (OnNotifyCreated_WorkSchedule != null) OnNotifyCreated_WorkSchedule(this);
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyCreated_WorkSchedule;

        [EventBasedMethod("OnNotifyDeleting_WorkSchedule")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_WorkSchedule != null) OnNotifyDeleting_WorkSchedule(this);
            ChildWorkSchedule.Clear();
            WorkScheduleRules.Clear();
            BaseWorkSchedule = null;
            ChangedBy = null;
            CreatedBy = null;
            Module = null;
        }
        public static event ObjectEventHandler<WorkSchedule> OnNotifyDeleting_WorkSchedule;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Calendar.WorkScheduleEfImpl>("Model.FK_BaseWorkSchedule_has_ChildWorkSchedules", "BaseWorkSchedule");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_WorkSchedule_was_ChangedBy", "ChangedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_WorkSchedule_was_CreatedBy", "CreatedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ModuleEfImpl>("Model.FK_WorkSchedule_has_Module", "Module");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._Name);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_BaseWorkSchedule);
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            binStream.Read(out this._fk_Module);
            this._Name = binStream.ReadString();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(BaseWorkSchedule != null ? BaseWorkSchedule.ExportGuid : (Guid?)null, xml, "BaseWorkSchedule", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(Module != null ? Module.ExportGuid : (Guid?)null, xml, "Module", "Zetbox.App.Calendar");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.Calendar")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.Calendar");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.Calendar|BaseWorkSchedule":
                this._fk_guid_BaseWorkSchedule = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.Calendar|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.Calendar|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.Calendar|Module":
                this._fk_guid_Module = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.Calendar|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            }
        }

        #endregion

    }
}
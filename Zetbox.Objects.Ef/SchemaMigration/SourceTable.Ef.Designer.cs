// <autogenerated/>

namespace Zetbox.App.SchemaMigration
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Serialization;

    using Zetbox.API;
    using Zetbox.DalProvider.Base.RelationWrappers;

    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using Zetbox.API.Server;
    using Zetbox.DalProvider.Ef;

    /// <summary>
    /// 
    /// </summary>
    [EdmEntityType(NamespaceName="Model", Name="SourceTableEfImpl")]
    [System.Diagnostics.DebuggerDisplay("SourceTable")]
    public class SourceTableEfImpl : BaseServerDataObject_EntityFramework, SourceTable, Zetbox.API.IExportableInternal
    {
        private static readonly Guid _objectClassID = new Guid("7f95aa3e-0150-4073-8b9e-803226872cc2");
        public override Guid ObjectClassID { get { return _objectClassID; } }

        [Obsolete]
        public SourceTableEfImpl()
            : base(null)
        {
        }

        public SourceTableEfImpl(Func<IFrozenContext> lazyCtx)
            : base(lazyCtx)
        {
        }

        /// <summary>
        /// Identity which changed this object
        /// </summary>
    /*
    Relation: FK_SourceTable_was_ChangedBy
    A: ZeroOrMore SourceTable as SourceTable
    B: ZeroOrOne Identity as ChangedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
        // fkBackingName=_fk_ChangedBy; fkGuidBackingName=_fk_guid_ChangedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity ChangedBy
        {
            get { return ChangedByImpl; }
            set { ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_ChangedBy;

        /// <summary>ForeignKey Property for ChangedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_ChangedBy
		{
			get { return ChangedBy != null ? ChangedBy.ID : (int?)null; }
			set { _fk_ChangedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceTable_was_ChangedBy", "ChangedBy")]
        public Zetbox.App.Base.IdentityEfImpl ChangedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceTable_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnChangedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnChangedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceTable_was_ChangedBy",
                        "ChangedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("ChangedBy", __oldValue, __newValue);

                if (OnChangedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnChangedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnChangedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("ChangedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchChangedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.ChangedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for ChangedBy
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnChangedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnChangedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnChangedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnChangedBy_IsValid;

        /// <summary>
        /// Date and time where this object was changed
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime ChangedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ChangedOn;
                if (!_isChangedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("42040e80-e6a4-4d19-959f-033080669059"));
                    if (__p != null) {
                        _isChangedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ChangedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceTable.ChangedOn'");
                    }
                }
                if (OnChangedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnChangedOn_Getter(this, __e);
                    __result = _ChangedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isChangedOnSet = true;
                if (_ChangedOn != value)
                {
                    var __oldValue = _ChangedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnChangedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ChangedOn", __oldValue, __newValue);
                    _ChangedOn = __newValue;
                    NotifyPropertyChanged("ChangedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnChangedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnChangedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ChangedOn");
                }
            }
        }
        private DateTime _ChangedOn_store;
        private DateTime _ChangedOn {
            get { return _ChangedOn_store; }
            set {
                ReportEfPropertyChanging("ChangedOn");
                _ChangedOn_store = value;
                ReportEfPropertyChanged("ChangedOn");
            }
        }
        private bool _isChangedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnChangedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnChangedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnChangedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnChangedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Comment
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Comment;
                if (OnComment_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnComment_Getter(this, __e);
                    __result = _Comment = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Comment != value)
                {
                    var __oldValue = _Comment;
                    var __newValue = value;
                    if (OnComment_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Comment", __oldValue, __newValue);
                    _Comment = __newValue;
                    NotifyPropertyChanged("Comment", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnComment_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnComment_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Comment");
                }
            }
        }
        private string _Comment_store;
        private string _Comment {
            get { return _Comment_store; }
            set {
                ReportEfPropertyChanging("Comment");
                _Comment_store = value;
                ReportEfPropertyChanged("Comment");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnComment_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnComment_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnComment_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnComment_IsValid;

        /// <summary>
        /// Identity which created this object
        /// </summary>
    /*
    Relation: FK_SourceTable_was_CreatedBy
    A: ZeroOrMore SourceTable as SourceTable
    B: ZeroOrOne Identity as CreatedBy
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
        // fkBackingName=_fk_CreatedBy; fkGuidBackingName=_fk_guid_CreatedBy;
        // referencedInterface=Zetbox.App.Base.Identity; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target not exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.Identity CreatedBy
        {
            get { return CreatedByImpl; }
            set { CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)value; }
        }

        private int? _fk_CreatedBy;

        /// <summary>ForeignKey Property for CreatedBy's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_CreatedBy
		{
			get { return CreatedBy != null ? CreatedBy.ID : (int?)null; }
			set { _fk_CreatedBy = value; }
		}


        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceTable_was_CreatedBy", "CreatedBy")]
        public Zetbox.App.Base.IdentityEfImpl CreatedByImpl
        {
            get
            {
                Zetbox.App.Base.IdentityEfImpl __value;
                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceTable_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnCreatedBy_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.Identity>(__value);
                    OnCreatedBy_Getter(this, e);
                    __value = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.IdentityEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>(
                        "Model.FK_SourceTable_was_CreatedBy",
                        "CreatedBy");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.IdentityEfImpl __oldValue = (Zetbox.App.Base.IdentityEfImpl)r.Value;
                Zetbox.App.Base.IdentityEfImpl __newValue = (Zetbox.App.Base.IdentityEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("CreatedBy", __oldValue, __newValue);

                if (OnCreatedBy_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.IdentityEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.IdentityEfImpl)__newValue;

                if (OnCreatedBy_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.Identity>(__oldValue, __newValue);
                    OnCreatedBy_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("CreatedBy", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchCreatedByAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.Identity>(this.CreatedBy);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for CreatedBy
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnCreatedBy_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnCreatedBy_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.Identity> OnCreatedBy_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnCreatedBy_IsValid;

        /// <summary>
        /// Date and time where this object was created
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public DateTime CreatedOn
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _CreatedOn;
                if (!_isCreatedOnSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("0a19a3eb-ffa2-4eef-861f-824cc327ab27"));
                    if (__p != null) {
                        _isCreatedOnSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._CreatedOn = (DateTime)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceTable.CreatedOn'");
                    }
                }
                if (OnCreatedOn_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<DateTime>(__result);
                    OnCreatedOn_Getter(this, __e);
                    __result = _CreatedOn = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isCreatedOnSet = true;
                if (_CreatedOn != value)
                {
                    var __oldValue = _CreatedOn;
                    var __newValue = value;
                    if (__newValue.Kind == DateTimeKind.Unspecified)
                        __newValue = DateTime.SpecifyKind(__newValue, DateTimeKind.Local);
                    if (OnCreatedOn_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("CreatedOn", __oldValue, __newValue);
                    _CreatedOn = __newValue;
                    NotifyPropertyChanged("CreatedOn", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnCreatedOn_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<DateTime>(__oldValue, __newValue);
                        OnCreatedOn_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("CreatedOn");
                }
            }
        }
        private DateTime _CreatedOn_store;
        private DateTime _CreatedOn {
            get { return _CreatedOn_store; }
            set {
                ReportEfPropertyChanging("CreatedOn");
                _CreatedOn_store = value;
                ReportEfPropertyChanged("CreatedOn");
            }
        }
        private bool _isCreatedOnSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnCreatedOn_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnCreatedOn_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, DateTime> OnCreatedOn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnCreatedOn_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Description
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Description;
                if (OnDescription_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnDescription_Getter(this, __e);
                    __result = _Description = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Description != value)
                {
                    var __oldValue = _Description;
                    var __newValue = value;
                    if (OnDescription_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Description", __oldValue, __newValue);
                    _Description = __newValue;
                    NotifyPropertyChanged("Description", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnDescription_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnDescription_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Description");
                }
            }
        }
        private string _Description_store;
        private string _Description {
            get { return _Description_store; }
            set {
                ReportEfPropertyChanging("Description");
                _Description_store = value;
                ReportEfPropertyChanged("Description");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnDescription_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnDescription_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnDescription_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnDescription_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceTable_created_ObjectClass
    A: ZeroOrOne SourceTable as SourceTable
    B: ZeroOrOne ObjectClass as ObjectClass
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DestinationObjectClass
        // fkBackingName=_fk_DestinationObjectClass; fkGuidBackingName=_fk_guid_DestinationObjectClass;
        // referencedInterface=Zetbox.App.Base.ObjectClass; moduleNamespace=Zetbox.App.SchemaMigration;
        // no inverse navigator handling
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.Base.ObjectClass DestinationObjectClass
        {
            get { return DestinationObjectClassImpl; }
            set { DestinationObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)value; }
        }

        private int? _fk_DestinationObjectClass;

        /// <summary>ForeignKey Property for DestinationObjectClass's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_DestinationObjectClass
		{
			get { return DestinationObjectClass != null ? DestinationObjectClass.ID : (int?)null; }
			set { _fk_DestinationObjectClass = value; }
		}

        private Guid? _fk_guid_DestinationObjectClass = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceTable_created_ObjectClass", "ObjectClass")]
        public Zetbox.App.Base.ObjectClassEfImpl DestinationObjectClassImpl
        {
            get
            {
                Zetbox.App.Base.ObjectClassEfImpl __value;
                EntityReference<Zetbox.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>(
                        "Model.FK_SourceTable_created_ObjectClass",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnDestinationObjectClass_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.Base.ObjectClass>(__value);
                    OnDestinationObjectClass_Getter(this, e);
                    __value = (Zetbox.App.Base.ObjectClassEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.Base.ObjectClassEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>(
                        "Model.FK_SourceTable_created_ObjectClass",
                        "ObjectClass");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.Base.ObjectClassEfImpl __oldValue = (Zetbox.App.Base.ObjectClassEfImpl)r.Value;
                Zetbox.App.Base.ObjectClassEfImpl __newValue = (Zetbox.App.Base.ObjectClassEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("DestinationObjectClass", __oldValue, __newValue);

                if (OnDestinationObjectClass_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnDestinationObjectClass_PreSetter(this, e);
                    __newValue = (Zetbox.App.Base.ObjectClassEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.Base.ObjectClassEfImpl)__newValue;

                if (OnDestinationObjectClass_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.Base.ObjectClass>(__oldValue, __newValue);
                    OnDestinationObjectClass_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("DestinationObjectClass", __oldValue, __newValue);
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchDestinationObjectClassAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.Base.ObjectClass>(this.DestinationObjectClass);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for DestinationObjectClass
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.ObjectClass> OnDestinationObjectClass_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.ObjectClass> OnDestinationObjectClass_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.Base.ObjectClass> OnDestinationObjectClass_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnDestinationObjectClass_IsValid;

        /// <summary>
        /// Export Guid
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public Guid ExportGuid
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ExportGuid;
                if (!_isExportGuidSet && ObjectState == DataObjectState.New) {
                    var __p = FrozenContext.FindPersistenceObject<Zetbox.App.Base.Property>(new Guid("7f6f277e-78fa-4955-925c-554a6cfd466a"));
                    if (__p != null) {
                        _isExportGuidSet = true;
                        // http://connect.microsoft.com/VisualStudio/feedback/details/593117/cannot-directly-cast-boxed-int-to-nullable-enum
                        object __tmp_value = __p.DefaultValue.GetDefaultValue();
                        __result = this._ExportGuid = (Guid)__tmp_value;
                    } else {
                        Zetbox.API.Utils.Logging.Log.Warn("Unable to get default value for property 'SourceTable.ExportGuid'");
                    }
                }
                if (OnExportGuid_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Guid>(__result);
                    OnExportGuid_Getter(this, __e);
                    __result = _ExportGuid = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                _isExportGuidSet = true;
                if (_ExportGuid != value)
                {
                    var __oldValue = _ExportGuid;
                    var __newValue = value;
                    if (OnExportGuid_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("ExportGuid", __oldValue, __newValue);
                    _ExportGuid = __newValue;
                    NotifyPropertyChanged("ExportGuid", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnExportGuid_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Guid>(__oldValue, __newValue);
                        OnExportGuid_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("ExportGuid");
                }
            }
        }
        private Guid _ExportGuid_store;
        private Guid _ExportGuid {
            get { return _ExportGuid_store; }
            set {
                ReportEfPropertyChanging("ExportGuid");
                _ExportGuid_store = value;
                ReportEfPropertyChanged("ExportGuid");
            }
        }
        private bool _isExportGuidSet = false;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Guid> OnExportGuid_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Guid> OnExportGuid_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Guid> OnExportGuid_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnExportGuid_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // value type property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
        [XmlIgnore()]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        [EdmScalarProperty()]
        public string Name
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Name;
                if (OnName_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<string>(__result);
                    OnName_Getter(this, __e);
                    __result = _Name = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Name != value)
                {
                    var __oldValue = _Name;
                    var __newValue = value;
                    if (OnName_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Name", __oldValue, __newValue);
                    _Name = __newValue;
                    NotifyPropertyChanged("Name", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnName_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<string>(__oldValue, __newValue);
                        OnName_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Name");
                }
            }
        }
        private string _Name_store;
        private string _Name {
            get { return _Name_store; }
            set {
                ReportEfPropertyChanging("Name");
                _Name_store = value;
                ReportEfPropertyChanged("Name");
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingDataProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnName_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnName_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, string> OnName_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnName_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceColumn_belongs_to_SourceTable
    A: ZeroOrMore SourceColumn as SourceColumn
    B: One SourceTable as SourceTable
    Preferred Storage: MergeIntoA
    */
        // object list property
        // object list property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public ICollection<Zetbox.App.SchemaMigration.SourceColumn> SourceColumn
        {
            get
            {
                if (_SourceColumn == null)
                {
                    _SourceColumn = new EntityCollectionWrapper<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumnEfImpl>(
                            this.Context, SourceColumnImpl,
                            () => this.NotifyPropertyChanging("SourceColumn", null, null),
                            null, // see GetSourceColumnImplCollection()
                            (item) => item.NotifyPropertyChanging("SourceTable", null, null),
                            (item) => item.NotifyPropertyChanged("SourceTable", null, null));
                }
                return _SourceColumn;
            }
        }
    
        [EdmRelationshipNavigationProperty("Model", "FK_SourceColumn_belongs_to_SourceTable", "SourceColumn")]
        public EntityCollection<Zetbox.App.SchemaMigration.SourceColumnEfImpl> SourceColumnImpl
        {
            get
            {
                return GetSourceColumnImplCollection();
            }
        }
        private EntityCollectionWrapper<Zetbox.App.SchemaMigration.SourceColumn, Zetbox.App.SchemaMigration.SourceColumnEfImpl> _SourceColumn;

        private EntityCollection<Zetbox.App.SchemaMigration.SourceColumnEfImpl> _SourceColumnImplEntityCollection;
        internal EntityCollection<Zetbox.App.SchemaMigration.SourceColumnEfImpl> GetSourceColumnImplCollection()
        {
            if (_SourceColumnImplEntityCollection == null)
            {
                _SourceColumnImplEntityCollection = ((IEntityWithRelationships)(this)).RelationshipManager
                    .GetRelatedCollection<Zetbox.App.SchemaMigration.SourceColumnEfImpl>(
                        "Model.FK_SourceColumn_belongs_to_SourceTable",
                        "SourceColumn");
                // the EntityCollection has to be loaded before attaching the AssociationChanged event
                // because the event is triggered while relation entries are loaded from the database
                // although that does not require notification of the business logic.
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !_SourceColumnImplEntityCollection.IsLoaded)
                {
                    _SourceColumnImplEntityCollection.Load();
                }
                _SourceColumnImplEntityCollection.AssociationChanged += (s, e) => { this.NotifyPropertyChanged("SourceColumn", null, null); if (OnSourceColumn_PostSetter != null && IsAttached) OnSourceColumn_PostSetter(this); };
            }
            return _SourceColumnImplEntityCollection;
        }

        public Zetbox.API.Async.ZbTask TriggerFetchSourceColumnAsync()
        {
            return new Zetbox.API.Async.ZbTask<ICollection<Zetbox.App.SchemaMigration.SourceColumn>>(this.SourceColumn);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectListProperty
public static event PropertyListChangedHandler<Zetbox.App.SchemaMigration.SourceTable> OnSourceColumn_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnSourceColumn_IsValid;

        /// <summary>
        /// 
        /// </summary>
    /*
    Relation: FK_SourceTables_are_contained_in_StagingDatabase
    A: ZeroOrMore SourceTable as SourceTables
    B: One StagingDatabase as StagingDatabase
    Preferred Storage: MergeIntoA
    */
        // object reference property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for StagingDatabase
        // fkBackingName=_fk_StagingDatabase; fkGuidBackingName=_fk_guid_StagingDatabase;
        // referencedInterface=Zetbox.App.SchemaMigration.StagingDatabase; moduleNamespace=Zetbox.App.SchemaMigration;
        // inverse Navigator=SourceTables; is list;
        // PositionStorage=none;
        // Target exportable

        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        public Zetbox.App.SchemaMigration.StagingDatabase StagingDatabase
        {
            get { return StagingDatabaseImpl; }
            set { StagingDatabaseImpl = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)value; }
        }

        private int? _fk_StagingDatabase;

        /// <summary>ForeignKey Property for StagingDatabase's id, used on APIs only</summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public int? FK_StagingDatabase
		{
			get { return StagingDatabase != null ? StagingDatabase.ID : (int?)null; }
			set { _fk_StagingDatabase = value; }
		}

        private Guid? _fk_guid_StagingDatabase = null;

        // internal implementation, EF sees only this property
        [EdmRelationshipNavigationProperty("Model", "FK_SourceTables_are_contained_in_StagingDatabase", "StagingDatabase")]
        public Zetbox.App.SchemaMigration.StagingDatabaseEfImpl StagingDatabaseImpl
        {
            get
            {
                Zetbox.App.SchemaMigration.StagingDatabaseEfImpl __value;
                EntityReference<Zetbox.App.SchemaMigration.StagingDatabaseEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.StagingDatabaseEfImpl>(
                        "Model.FK_SourceTables_are_contained_in_StagingDatabase",
                        "StagingDatabase");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                __value = r.Value;
                if (OnStagingDatabase_Getter != null)
                {
                    var e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.StagingDatabase>(__value);
                    OnStagingDatabase_Getter(this, e);
                    __value = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)e.Result;
                }
                return __value;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (value != null && value.Context != this.Context) throw new WrongZetboxContextException();

                EntityReference<Zetbox.App.SchemaMigration.StagingDatabaseEfImpl> r
                    = ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.StagingDatabaseEfImpl>(
                        "Model.FK_SourceTables_are_contained_in_StagingDatabase",
                        "StagingDatabase");
                if (this.EntityState.In(System.Data.EntityState.Modified, System.Data.EntityState.Unchanged)
                    && !r.IsLoaded)
                {
                    r.Load();
                }
                Zetbox.App.SchemaMigration.StagingDatabaseEfImpl __oldValue = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)r.Value;
                Zetbox.App.SchemaMigration.StagingDatabaseEfImpl __newValue = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)value;

                // Changing Event fires before anything is touched
                NotifyPropertyChanging("StagingDatabase", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanging("SourceTables", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanging("SourceTables", null, null);
                }

                if (OnStagingDatabase_PreSetter != null)
                {
                    var e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.StagingDatabase>(__oldValue, __newValue);
                    OnStagingDatabase_PreSetter(this, e);
                    __newValue = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)e.Result;
                }

                r.Value = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)__newValue;

                if (OnStagingDatabase_PostSetter != null)
                {
                    var e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.StagingDatabase>(__oldValue, __newValue);
                    OnStagingDatabase_PostSetter(this, e);
                }

                // everything is done. fire the Changed event
                NotifyPropertyChanged("StagingDatabase", __oldValue, __newValue);
                if (__oldValue != null) {
                    __oldValue.NotifyPropertyChanged("SourceTables", null, null);
                }
                if (__newValue != null) {
                    __newValue.NotifyPropertyChanged("SourceTables", null, null);
                }
                if(IsAttached) UpdateChangedInfo = true;
            }
        }

        public Zetbox.API.Async.ZbTask TriggerFetchStagingDatabaseAsync()
        {
            return new Zetbox.API.Async.ZbTask<Zetbox.App.SchemaMigration.StagingDatabase>(this.StagingDatabase);
        }

        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.ObjectReferencePropertyTemplate for StagingDatabase
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.StagingDatabase> OnStagingDatabase_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.StagingDatabase> OnStagingDatabase_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.StagingDatabase> OnStagingDatabase_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnStagingDatabase_IsValid;

        /// <summary>
        /// 
        /// </summary>
        // enumeration property
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
        public Zetbox.App.SchemaMigration.MappingStatus? Status
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _Status;
                if (OnStatus_Getter != null)
                {
                    var __e = new PropertyGetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__result);
                    OnStatus_Getter(this, __e);
                    __result = _Status = __e.Result;
                }
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_Status != value)
                {
                    var __oldValue = _Status;
                    var __newValue = value;
                    if (OnStatus_PreSetter != null && IsAttached)
                    {
                        var __e = new PropertyPreSetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PreSetter(this, __e);
                        __newValue = __e.Result;
                    }
                    NotifyPropertyChanging("Status", __oldValue, __newValue);
                    _Status = __newValue;
                    NotifyPropertyChanged("Status", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                    if (OnStatus_PostSetter != null && IsAttached)
                    {
                        var __e = new PropertyPostSetterEventArgs<Zetbox.App.SchemaMigration.MappingStatus?>(__oldValue, __newValue);
                        OnStatus_PostSetter(this, __e);
                    }
                }
                else
                {
                    SetInitializedProperty("Status");
                }
            }
        }
        private Zetbox.App.SchemaMigration.MappingStatus? _Status_store;
        private Zetbox.App.SchemaMigration.MappingStatus? _Status {
            get { return _Status_store; }
            set {
                ReportEfPropertyChanging("StatusImpl");
                _Status_store = value;
                ReportEfPropertyChanged("StatusImpl");
            }
        }

        /// <summary>EF sees only this property, for Status</summary>
        [XmlIgnore()]
        [EdmScalarProperty()]
        public int? StatusImpl
        {
            get
            {
                return (int?)this.Status;
            }
            set
            {
                this.Status = (Zetbox.App.SchemaMigration.MappingStatus?)value;
            }
        }
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.NotifyingEnumProperty
		public static event PropertyGetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_Getter;
		public static event PropertyPreSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_PreSetter;
		public static event PropertyPostSetterHandler<Zetbox.App.SchemaMigration.SourceTable, Zetbox.App.SchemaMigration.MappingStatus?> OnStatus_PostSetter;

        public static event PropertyIsValidHandler<Zetbox.App.SchemaMigration.SourceTable> OnStatus_IsValid;

        /// <summary>
        /// Creates a mapping report
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateMappingReport_SourceTable")]
        public virtual void CreateMappingReport()
        {
            // base.CreateMappingReport();
            if (OnCreateMappingReport_SourceTable != null)
            {
                OnCreateMappingReport_SourceTable(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method SourceTable.CreateMappingReport");
            }
        }
        public delegate void CreateMappingReport_Handler<T>(T obj);
        public static event CreateMappingReport_Handler<SourceTable> OnCreateMappingReport_SourceTable;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<SourceTable> OnCreateMappingReport_SourceTable_CanExec;

        [EventBasedMethod("OnCreateMappingReport_SourceTable_CanExec")]
        public virtual bool CreateMappingReportCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateMappingReport_SourceTable_CanExec != null)
				{
					OnCreateMappingReport_SourceTable_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<SourceTable> OnCreateMappingReport_SourceTable_CanExecReason;

        [EventBasedMethod("OnCreateMappingReport_SourceTable_CanExecReason")]
        public virtual string CreateMappingReportCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateMappingReport_SourceTable_CanExecReason != null)
				{
					OnCreateMappingReport_SourceTable_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        /// <summary>
        /// 
        /// </summary>
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.Method
        [EventBasedMethod("OnCreateObjectClass_SourceTable")]
        public virtual void CreateObjectClass()
        {
            // base.CreateObjectClass();
            if (OnCreateObjectClass_SourceTable != null)
            {
                OnCreateObjectClass_SourceTable(this);
            }
            else
            {
                throw new NotImplementedException("No handler registered on method SourceTable.CreateObjectClass");
            }
        }
        public delegate void CreateObjectClass_Handler<T>(T obj);
        public static event CreateObjectClass_Handler<SourceTable> OnCreateObjectClass_SourceTable;
        // BEGIN Zetbox.Generator.Templates.ObjectClasses.MethodCanExec
		// CanExec
		public static event CanExecMethodEventHandler<SourceTable> OnCreateObjectClass_SourceTable_CanExec;

        [EventBasedMethod("OnCreateObjectClass_SourceTable_CanExec")]
        public virtual bool CreateObjectClassCanExec
        {
			get 
			{
				var e = new MethodReturnEventArgs<bool>();
				if (OnCreateObjectClass_SourceTable_CanExec != null)
				{
					OnCreateObjectClass_SourceTable_CanExec(this, e);
				}
				else
				{
					e.Result = true;
				}
				return e.Result;
			}
        }

		// CanExecReason
		public static event CanExecReasonMethodEventHandler<SourceTable> OnCreateObjectClass_SourceTable_CanExecReason;

        [EventBasedMethod("OnCreateObjectClass_SourceTable_CanExecReason")]
        public virtual string CreateObjectClassCanExecReason
        {
			get 
			{
				var e = new MethodReturnEventArgs<string>();
				if (OnCreateObjectClass_SourceTable_CanExecReason != null)
				{
					OnCreateObjectClass_SourceTable_CanExecReason(this, e);
				}
				else
				{
					e.Result = string.Empty;
				}
				return e.Result;
			}
        }
        // END Zetbox.Generator.Templates.ObjectClasses.MethodCanExec

        public override Type GetImplementedInterface()
        {
            return typeof(SourceTable);
        }

        public override void ApplyChangesFrom(IPersistenceObject obj)
        {
            base.ApplyChangesFrom(obj);
            var other = (SourceTable)obj;
            var otherImpl = (SourceTableEfImpl)obj;
            var me = (SourceTable)this;

            me.ChangedOn = other.ChangedOn;
            me.Comment = other.Comment;
            me.CreatedOn = other.CreatedOn;
            me.Description = other.Description;
            me.ExportGuid = other.ExportGuid;
            me.Name = other.Name;
            me.Status = other.Status;
            this._fk_ChangedBy = otherImpl._fk_ChangedBy;
            this._fk_CreatedBy = otherImpl._fk_CreatedBy;
            this._fk_DestinationObjectClass = otherImpl._fk_DestinationObjectClass;
            this._fk_StagingDatabase = otherImpl._fk_StagingDatabase;
        }
        public override void SetNew()
        {
            base.SetNew();
        }
        #region Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        protected override void OnPropertyChanged(string property, object oldValue, object newValue)
        {
            base.OnPropertyChanged(property, oldValue, newValue);

            // Do not audit calculated properties
            switch (property)
            {
                case "ChangedBy":
                case "ChangedOn":
                case "Comment":
                case "CreatedBy":
                case "CreatedOn":
                case "Description":
                case "DestinationObjectClass":
                case "ExportGuid":
                case "Name":
                case "StagingDatabase":
                case "Status":
                    AuditPropertyChange(property, oldValue, newValue);
                    break;
            }
        }

        protected override bool ShouldSetModified(string property)
        {
            switch (property)
            {
                case "SourceColumn":
                    return false;
                default:
                    return base.ShouldSetModified(property);
            }
        }
        #endregion // Zetbox.DalProvider.Ef.Generator.Templates.ObjectClasses.OnPropertyChange

        public override Zetbox.API.Async.ZbTask TriggerFetch(string propName)
        {
            switch(propName)
            {
            case "ChangedBy":
                return TriggerFetchChangedByAsync();
            case "CreatedBy":
                return TriggerFetchCreatedByAsync();
            case "DestinationObjectClass":
                return TriggerFetchDestinationObjectClassAsync();
            case "SourceColumn":
                return TriggerFetchSourceColumnAsync();
            case "StagingDatabase":
                return TriggerFetchStagingDatabaseAsync();
            default:
                return base.TriggerFetch(propName);
            }
        }

        public override void ReloadReferences()
        {
            // Do not reload references if the current object has been deleted.
            // TODO: enable when MemoryContext uses MemoryDataObjects
            //if (this.ObjectState == DataObjectState.Deleted) return;
            base.ReloadReferences();

            // fix direct object references

            if (_fk_ChangedBy.HasValue)
                ChangedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_ChangedBy.Value);
            else
                ChangedByImpl = null;

            if (_fk_CreatedBy.HasValue)
                CreatedByImpl = (Zetbox.App.Base.IdentityEfImpl)Context.Find<Zetbox.App.Base.Identity>(_fk_CreatedBy.Value);
            else
                CreatedByImpl = null;

            if (_fk_guid_DestinationObjectClass.HasValue)
                DestinationObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)Context.FindPersistenceObject<Zetbox.App.Base.ObjectClass>(_fk_guid_DestinationObjectClass.Value);
            else
            if (_fk_DestinationObjectClass.HasValue)
                DestinationObjectClassImpl = (Zetbox.App.Base.ObjectClassEfImpl)Context.Find<Zetbox.App.Base.ObjectClass>(_fk_DestinationObjectClass.Value);
            else
                DestinationObjectClassImpl = null;

            if (_fk_guid_StagingDatabase.HasValue)
                StagingDatabaseImpl = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)Context.FindPersistenceObject<Zetbox.App.SchemaMigration.StagingDatabase>(_fk_guid_StagingDatabase.Value);
            else
            if (_fk_StagingDatabase.HasValue)
                StagingDatabaseImpl = (Zetbox.App.SchemaMigration.StagingDatabaseEfImpl)Context.Find<Zetbox.App.SchemaMigration.StagingDatabase>(_fk_StagingDatabase.Value);
            else
                StagingDatabaseImpl = null;
            // fix cached lists references
        }
        #region Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        private static readonly object _propertiesLock = new object();
        private static System.ComponentModel.PropertyDescriptor[] _properties;

        private void _InitializePropertyDescriptors(Func<IFrozenContext> lazyCtx)
        {
            if (_properties != null) return;
            lock (_propertiesLock)
            {
                // recheck for a lost race after aquiring the lock
                if (_properties != null) return;

                _properties = new System.ComponentModel.PropertyDescriptor[] {
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("1156b3eb-af9b-4a44-8ed3-e64fa3fbb251"),
                        "ChangedBy",
                        null,
                        obj => obj.ChangedBy,
                        (obj, val) => obj.ChangedBy = val,
						obj => OnChangedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, DateTime>(
                        lazyCtx,
                        new Guid("42040e80-e6a4-4d19-959f-033080669059"),
                        "ChangedOn",
                        null,
                        obj => obj.ChangedOn,
                        (obj, val) => obj.ChangedOn = val,
						obj => OnChangedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, string>(
                        lazyCtx,
                        new Guid("86a05242-c667-4181-a7a7-1d50d20f9d0f"),
                        "Comment",
                        null,
                        obj => obj.Comment,
                        (obj, val) => obj.Comment = val,
						obj => OnComment_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Zetbox.App.Base.Identity>(
                        lazyCtx,
                        new Guid("c32e650b-4c12-4eeb-9f93-46df426e38de"),
                        "CreatedBy",
                        null,
                        obj => obj.CreatedBy,
                        (obj, val) => obj.CreatedBy = val,
						obj => OnCreatedBy_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, DateTime>(
                        lazyCtx,
                        new Guid("0a19a3eb-ffa2-4eef-861f-824cc327ab27"),
                        "CreatedOn",
                        null,
                        obj => obj.CreatedOn,
                        (obj, val) => obj.CreatedOn = val,
						obj => OnCreatedOn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, string>(
                        lazyCtx,
                        new Guid("8b93e1d4-1e2a-44a8-91c3-0c71541934c6"),
                        "Description",
                        null,
                        obj => obj.Description,
                        (obj, val) => obj.Description = val,
						obj => OnDescription_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Zetbox.App.Base.ObjectClass>(
                        lazyCtx,
                        new Guid("ec638748-894e-4e61-b618-7d8fbacec2fe"),
                        "DestinationObjectClass",
                        null,
                        obj => obj.DestinationObjectClass,
                        (obj, val) => obj.DestinationObjectClass = val,
						obj => OnDestinationObjectClass_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Guid>(
                        lazyCtx,
                        new Guid("7f6f277e-78fa-4955-925c-554a6cfd466a"),
                        "ExportGuid",
                        null,
                        obj => obj.ExportGuid,
                        (obj, val) => obj.ExportGuid = val,
						obj => OnExportGuid_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, string>(
                        lazyCtx,
                        new Guid("f01c1095-cf9b-41f5-b89c-532a86a78cc5"),
                        "Name",
                        null,
                        obj => obj.Name,
                        (obj, val) => obj.Name = val,
						obj => OnName_IsValid), 
                    // property.IsAssociation() && !property.IsObjectReferencePropertySingle()
                    new PropertyDescriptorEfImpl<SourceTable, ICollection<Zetbox.App.SchemaMigration.SourceColumn>>(
                        lazyCtx,
                        new Guid("0e435261-9490-4fbb-8268-f7f1f6607d2c"),
                        "SourceColumn",
                        null,
                        obj => obj.SourceColumn,
                        null, // lists are read-only properties
                        obj => OnSourceColumn_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Zetbox.App.SchemaMigration.StagingDatabase>(
                        lazyCtx,
                        new Guid("d57c1138-b611-44b6-bd30-9b6d6a91cbed"),
                        "StagingDatabase",
                        null,
                        obj => obj.StagingDatabase,
                        (obj, val) => obj.StagingDatabase = val,
						obj => OnStagingDatabase_IsValid), 
                    // else
                    new PropertyDescriptorEfImpl<SourceTable, Zetbox.App.SchemaMigration.MappingStatus?>(
                        lazyCtx,
                        new Guid("6029f896-82fd-4372-8cfd-76ca7e31ebf6"),
                        "Status",
                        null,
                        obj => obj.Status,
                        (obj, val) => obj.Status = val,
						obj => OnStatus_IsValid), 
                    // position columns
                };
            }
        }

        protected override void CollectProperties(Func<IFrozenContext> lazyCtx, List<System.ComponentModel.PropertyDescriptor> props)
        {
            base.CollectProperties(lazyCtx, props);
            _InitializePropertyDescriptors(lazyCtx);
            props.AddRange(_properties);
        }
        #endregion // Zetbox.Generator.Templates.ObjectClasses.CustomTypeDescriptor
        #region Zetbox.Generator.Templates.ObjectClasses.DefaultMethods

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnToString_SourceTable")]
        public override string ToString()
        {
            MethodReturnEventArgs<string> e = new MethodReturnEventArgs<string>();
            e.Result = base.ToString();
            if (OnToString_SourceTable != null)
            {
                OnToString_SourceTable(this, e);
            }
            return e.Result;
        }
        public static event ToStringHandler<SourceTable> OnToString_SourceTable;

        [System.Diagnostics.DebuggerHidden()]
        [EventBasedMethod("OnObjectIsValid_SourceTable")]
        protected override ObjectIsValidResult ObjectIsValid()
        {
            ObjectIsValidEventArgs e = new ObjectIsValidEventArgs();
            var b = base.ObjectIsValid();
            e.Errors.AddRange(b.Errors);
            if (OnObjectIsValid_SourceTable != null)
            {
                OnObjectIsValid_SourceTable(this, e);
            }
            return new ObjectIsValidResult(e.IsValid, e.Errors);
        }
        public static event ObjectIsValidHandler<SourceTable> OnObjectIsValid_SourceTable;

        [EventBasedMethod("OnNotifyPreSave_SourceTable")]
        public override void NotifyPreSave()
        {
            base.NotifyPreSave();
            if (OnNotifyPreSave_SourceTable != null) OnNotifyPreSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnNotifyPreSave_SourceTable;

        [EventBasedMethod("OnNotifyPostSave_SourceTable")]
        public override void NotifyPostSave()
        {
            base.NotifyPostSave();
            if (OnNotifyPostSave_SourceTable != null) OnNotifyPostSave_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnNotifyPostSave_SourceTable;

        [EventBasedMethod("OnNotifyCreated_SourceTable")]
        public override void NotifyCreated()
        {
            SetNotInitializedProperty("ChangedBy");
            SetNotInitializedProperty("Comment");
            SetNotInitializedProperty("CreatedBy");
            SetNotInitializedProperty("Description");
            SetNotInitializedProperty("DestinationObjectClass");
            SetNotInitializedProperty("Name");
            SetNotInitializedProperty("StagingDatabase");
            SetNotInitializedProperty("Status");
            base.NotifyCreated();
            if (OnNotifyCreated_SourceTable != null) OnNotifyCreated_SourceTable(this);
        }
        public static event ObjectEventHandler<SourceTable> OnNotifyCreated_SourceTable;

        [EventBasedMethod("OnNotifyDeleting_SourceTable")]
        public override void NotifyDeleting()
        {
            base.NotifyDeleting();
            if (OnNotifyDeleting_SourceTable != null) OnNotifyDeleting_SourceTable(this);
            SourceColumn.Clear();
            ChangedBy = null;
            CreatedBy = null;
            DestinationObjectClass = null;
            StagingDatabase = null;
        }
        public static event ObjectEventHandler<SourceTable> OnNotifyDeleting_SourceTable;

        #endregion // Zetbox.Generator.Templates.ObjectClasses.DefaultMethods
        // BEGIN Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        public override int ID
        {
            get
            {
                // create local variable to create single point of return
                // for the benefit of down-stream templates
                var __result = _ID;
                return __result;
            }
            set
            {
                if (this.IsReadonly) throw new ReadOnlyObjectException();
                if (_ID != value)
                {
                    var __oldValue = _ID;
                    var __newValue = value;
                    NotifyPropertyChanging("ID", __oldValue, __newValue);
                    _ID = __newValue;
                    NotifyPropertyChanged("ID", __oldValue, __newValue);
                    if(IsAttached) UpdateChangedInfo = true;

                }
                else
                {
                    SetInitializedProperty("ID");
                }
            }
        }
        private int _ID;
        // END Zetbox.DalProvider.Ef.Generator.Templates.Properties.IdProperty

        #region Serializer


        public override void ToStream(Zetbox.API.ZetboxStreamWriter binStream, HashSet<IStreamable> auxObjects, bool eagerLoadLists)
        {
            base.ToStream(binStream, auxObjects, eagerLoadLists);
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_SourceTable_was_ChangedBy", "ChangedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isChangedOnSet);
            if (this._isChangedOnSet) {
                binStream.Write(this._ChangedOn);
            }
            binStream.Write(this._Comment);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.IdentityEfImpl>("Model.FK_SourceTable_was_CreatedBy", "CreatedBy");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write(this._isCreatedOnSet);
            if (this._isCreatedOnSet) {
                binStream.Write(this._CreatedOn);
            }
            binStream.Write(this._Description);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.Base.ObjectClassEfImpl>("Model.FK_SourceTable_created_ObjectClass", "ObjectClass");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            if (auxObjects != null) {
                auxObjects.Add(DestinationObjectClass);
            }
            binStream.Write(this._isExportGuidSet);
            if (this._isExportGuidSet) {
                binStream.Write(this._ExportGuid);
            }
            binStream.Write(this._Name);
            {
                var r = this.RelationshipManager.GetRelatedReference<Zetbox.App.SchemaMigration.StagingDatabaseEfImpl>("Model.FK_SourceTables_are_contained_in_StagingDatabase", "StagingDatabase");
                var key = r.EntityKey;
                binStream.Write(r.Value != null ? r.Value.ID : (key != null ? (int?)key.EntityKeyValues.Single().Value : (int?)null));
            }
            binStream.Write((int?)_Status);
        }

        public override IEnumerable<IPersistenceObject> FromStream(Zetbox.API.ZetboxStreamReader binStream)
        {
            var baseResult = base.FromStream(binStream);
            var result = new List<IPersistenceObject>();
            // it may be only an empty shell to stand-in for unreadable data
            if (CurrentAccessRights != Zetbox.API.AccessRights.None) {
            binStream.Read(out this._fk_ChangedBy);
            this._isChangedOnSet = binStream.ReadBoolean();
            if (this._isChangedOnSet) {
                this._ChangedOn = binStream.ReadDateTime();
            }
            this._Comment = binStream.ReadString();
            binStream.Read(out this._fk_CreatedBy);
            this._isCreatedOnSet = binStream.ReadBoolean();
            if (this._isCreatedOnSet) {
                this._CreatedOn = binStream.ReadDateTime();
            }
            this._Description = binStream.ReadString();
            binStream.Read(out this._fk_DestinationObjectClass);
            this._isExportGuidSet = binStream.ReadBoolean();
            if (this._isExportGuidSet) {
                this._ExportGuid = binStream.ReadGuid();
            }
            this._Name = binStream.ReadString();
            binStream.Read(out this._fk_StagingDatabase);
            _Status = (Zetbox.App.SchemaMigration.MappingStatus?)binStream.ReadNullableInt32();
            } // if (CurrentAccessRights != Zetbox.API.AccessRights.None)
            return baseResult == null
                ? result.Count == 0
                    ? null
                    : result
                : baseResult.Concat(result);
        }

        public virtual void Export(System.Xml.XmlWriter xml, string[] modules)
        {
            xml.WriteAttributeString("ExportGuid", this._ExportGuid.ToString());
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._ChangedOn, xml, "ChangedOn", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Comment, xml, "Comment", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._CreatedOn, xml, "CreatedOn", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Description, xml, "Description", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(DestinationObjectClass != null ? DestinationObjectClass.ExportGuid : (Guid?)null, xml, "DestinationObjectClass", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(this._Name, xml, "Name", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream(StagingDatabase != null ? StagingDatabase.ExportGuid : (Guid?)null, xml, "StagingDatabase", "Zetbox.App.SchemaMigration");
            if (modules.Contains("*") || modules.Contains("Zetbox.App.SchemaMigration")) XmlStreamer.ToStream((int?)_Status, xml, "Status", "Zetbox.App.SchemaMigration");
        }

        public virtual void MergeImport(System.Xml.XmlReader xml)
        {
            // it may be only an empty shell to stand-in for unreadable data
            if (!CurrentAccessRights.HasReadRights()) return;
            switch (xml.NamespaceURI + "|" + xml.LocalName) {
            case "Zetbox.App.SchemaMigration|ChangedOn":
                // Import must have default value set
                this._ChangedOn = XmlStreamer.ReadDateTime(xml);
                this._isChangedOnSet = true;
                break;
            case "Zetbox.App.SchemaMigration|Comment":
                this._Comment = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|CreatedOn":
                // Import must have default value set
                this._CreatedOn = XmlStreamer.ReadDateTime(xml);
                this._isCreatedOnSet = true;
                break;
            case "Zetbox.App.SchemaMigration|Description":
                this._Description = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|DestinationObjectClass":
                this._fk_guid_DestinationObjectClass = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|ExportGuid":
                // Import must have default value set
                this._ExportGuid = XmlStreamer.ReadGuid(xml);
                this._isExportGuidSet = true;
                break;
            case "Zetbox.App.SchemaMigration|Name":
                this._Name = XmlStreamer.ReadString(xml);
                break;
            case "Zetbox.App.SchemaMigration|StagingDatabase":
                this._fk_guid_StagingDatabase = XmlStreamer.ReadNullableGuid(xml);
                break;
            case "Zetbox.App.SchemaMigration|Status":
                _Status = (Zetbox.App.SchemaMigration.MappingStatus?)XmlStreamer.ReadNullableInt32(xml);
               break;
            }
        }

        #endregion

    }
}
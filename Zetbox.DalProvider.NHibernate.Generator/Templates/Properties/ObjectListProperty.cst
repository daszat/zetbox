<%--
    This file is part of zetbox.

    Zetbox is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    Zetbox is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with zetbox.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ CodeTemplate Language="C#"
    Name="Properties.ObjectListProperty"
    ClassName="Zetbox.DalProvider.NHibernate.Generator.Templates.Properties.ObjectListProperty"
    Inherits="Zetbox.Generator.MemberTemplate" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Zetbox.API" %>
<%@ Import Namespace="Zetbox.API.Server" %>
<%@ Import Namespace="Zetbox.App.Base" %>
<%@ Import Namespace="Zetbox.App.Extensions" %>
<%@ Import Namespace="Zetbox.Generator" %>
<%@ Import Namespace="Zetbox.Generator.Extensions" %>
<%@ Parameter Name="ctx" Type="IZetboxContext" %>
<%@ Parameter Name="serializationList" Type="Zetbox.Generator.Templates.Serialization.SerializationMembersList" %>
<%@ Parameter Name="name" Type="string" %>
<%@ Parameter Name="eagerLoading" Type="bool" %>
<%@ Parameter Name="wrapperName" Type="string" %>
<%@ Parameter Name="wrapperClass" Type="string" %>
<%@ Parameter Name="exposedListType" Type="string" %>
<%@ Parameter Name="positionPropertyName" Type="string" %>
<%@ Parameter Name="otherName" Type="string" %>
<%@ Parameter Name="referencedInterface" Type="string" %>
<%@ Parameter Name="referencedProxy" Type="string" %>

<%
	var eventName = "On" + name + "_PostSetter";
%>
        // <%= this.GetType() %>
        // implement the user-visible interface
        [XmlIgnore()]
		[System.Runtime.Serialization.IgnoreDataMember]
        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        <%= GetModifiers() %> <%= exposedListType %><<%= referencedInterface %>> <%= name %>
        {
            get
            {
                if (<%= wrapperName %> == null)
                {
                    <%= wrapperName %> = new <%= wrapperClass %><<%= referencedInterface %>>(
                        "<%= otherName %>",
                        <% if (!String.IsNullOrEmpty(positionPropertyName)) { %>"<%= positionPropertyName %>"<% } else { %>null<% } %>,
                        this,
                        () => this.NotifyPropertyChanging("<%= name %>", null, null),
                        () => { this.NotifyPropertyChanged("<%= name %>", null, null); if(<%= eventName %> != null && IsAttached) <%= eventName%>(this); },
                        new ProjectedCollection<<%= referencedProxy %>, <%= referencedInterface %>>(
                            () => Proxy.<%= name %>,
                            p => (<%= referencedInterface %>)OurContext.AttachAndWrap(p),
                            d => (<%= referencedProxy %>)((NHibernatePersistenceObject)d).NHibernateProxy));
                }
                return <%= wrapperName %>;
            }
        }
    
        private <%= wrapperClass %><<%= referencedInterface %>> <%= wrapperName %>;
<% if (eagerLoading) { %>
        private List<int> <%= name %>Ids;
        private bool <%= name %>_was_eagerLoaded = false;
<% } %>

        public Zetbox.API.Async.ZbTask TriggerFetch<%= name %>Async()
        {
            return new Zetbox.API.Async.ZbTask<<%= exposedListType %><<%= referencedInterface %>>>(this.<%= name %>);
        }

<% AddSerialization(serializationList, name, eagerLoading); %>
